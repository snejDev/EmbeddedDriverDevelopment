
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bdc  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08000d84  08000d84  00010d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000dc4  08000dc4  00010dcc  2**0
                  CONTENTS
  4 .ARM          00000000  08000dc4  08000dc4  00010dcc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000dc4  08000dcc  00010dcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dc4  08000dc4  00010dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000dc8  08000dc8  00010dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010dcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010dcc  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010dcc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000011cd  00000000  00000000  00010dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000040e  00000000  00000000  00011fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000128  00000000  00000000  000123d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000f0  00000000  00000000  00012500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002106  00000000  00000000  000125f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001d56  00000000  00000000  000146f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000088c5  00000000  00000000  0001644c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001ed11  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003e4  00000000  00000000  0001ed64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000d6c 	.word	0x08000d6c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000d6c 	.word	0x08000d6c

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <GPIO_PCLK_Ctrl>:
 *
 * 	@notes					: API for enabling and disabling the clock
 */

void GPIO_PCLK_Ctrl(GPIO_RegDef_t *pGPIOx, uint8_t EN_DI)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	460b      	mov	r3, r1
 8000202:	70fb      	strb	r3, [r7, #3]
	if(EN_DI==ENABLE)
 8000204:	78fb      	ldrb	r3, [r7, #3]
 8000206:	2b01      	cmp	r3, #1
 8000208:	d162      	bne.n	80002d0 <GPIO_PCLK_Ctrl+0xd8>
	{
		if(pGPIOx==GPIOA)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a66      	ldr	r2, [pc, #408]	; (80003a8 <GPIO_PCLK_Ctrl+0x1b0>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d106      	bne.n	8000220 <GPIO_PCLK_Ctrl+0x28>
			GPIOA_PCLK_EN();
 8000212:	4b66      	ldr	r3, [pc, #408]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 8000214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000216:	4a65      	ldr	r2, [pc, #404]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 8000218:	f043 0301 	orr.w	r3, r3, #1
 800021c:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx==GPIOH)
			GPIOH_PCLK_DI();
		else if(pGPIOx==GPIOI)
			GPIOI_PCLK_DI();
	}
}
 800021e:	e0bc      	b.n	800039a <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOB)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4a63      	ldr	r2, [pc, #396]	; (80003b0 <GPIO_PCLK_Ctrl+0x1b8>)
 8000224:	4293      	cmp	r3, r2
 8000226:	d106      	bne.n	8000236 <GPIO_PCLK_Ctrl+0x3e>
			GPIOB_PCLK_EN();
 8000228:	4b60      	ldr	r3, [pc, #384]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 800022a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800022c:	4a5f      	ldr	r2, [pc, #380]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 800022e:	f043 0302 	orr.w	r3, r3, #2
 8000232:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000234:	e0b1      	b.n	800039a <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOC)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	4a5e      	ldr	r2, [pc, #376]	; (80003b4 <GPIO_PCLK_Ctrl+0x1bc>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d106      	bne.n	800024c <GPIO_PCLK_Ctrl+0x54>
			GPIOC_PCLK_EN();
 800023e:	4b5b      	ldr	r3, [pc, #364]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 8000240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000242:	4a5a      	ldr	r2, [pc, #360]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 8000244:	f043 0304 	orr.w	r3, r3, #4
 8000248:	6313      	str	r3, [r2, #48]	; 0x30
}
 800024a:	e0a6      	b.n	800039a <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOD)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	4a5a      	ldr	r2, [pc, #360]	; (80003b8 <GPIO_PCLK_Ctrl+0x1c0>)
 8000250:	4293      	cmp	r3, r2
 8000252:	d106      	bne.n	8000262 <GPIO_PCLK_Ctrl+0x6a>
			GPIOD_PCLK_EN();
 8000254:	4b55      	ldr	r3, [pc, #340]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 8000256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000258:	4a54      	ldr	r2, [pc, #336]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 800025a:	f043 0308 	orr.w	r3, r3, #8
 800025e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000260:	e09b      	b.n	800039a <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOE)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4a55      	ldr	r2, [pc, #340]	; (80003bc <GPIO_PCLK_Ctrl+0x1c4>)
 8000266:	4293      	cmp	r3, r2
 8000268:	d106      	bne.n	8000278 <GPIO_PCLK_Ctrl+0x80>
			GPIOE_PCLK_EN();
 800026a:	4b50      	ldr	r3, [pc, #320]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 800026c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800026e:	4a4f      	ldr	r2, [pc, #316]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 8000270:	f043 0310 	orr.w	r3, r3, #16
 8000274:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000276:	e090      	b.n	800039a <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOF)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	4a51      	ldr	r2, [pc, #324]	; (80003c0 <GPIO_PCLK_Ctrl+0x1c8>)
 800027c:	4293      	cmp	r3, r2
 800027e:	d106      	bne.n	800028e <GPIO_PCLK_Ctrl+0x96>
			GPIOF_PCLK_EN();
 8000280:	4b4a      	ldr	r3, [pc, #296]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 8000282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000284:	4a49      	ldr	r2, [pc, #292]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 8000286:	f043 0320 	orr.w	r3, r3, #32
 800028a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800028c:	e085      	b.n	800039a <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOG)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4a4c      	ldr	r2, [pc, #304]	; (80003c4 <GPIO_PCLK_Ctrl+0x1cc>)
 8000292:	4293      	cmp	r3, r2
 8000294:	d106      	bne.n	80002a4 <GPIO_PCLK_Ctrl+0xac>
			GPIOG_PCLK_EN();
 8000296:	4b45      	ldr	r3, [pc, #276]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 8000298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800029a:	4a44      	ldr	r2, [pc, #272]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 800029c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a2:	e07a      	b.n	800039a <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOH)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	4a48      	ldr	r2, [pc, #288]	; (80003c8 <GPIO_PCLK_Ctrl+0x1d0>)
 80002a8:	4293      	cmp	r3, r2
 80002aa:	d106      	bne.n	80002ba <GPIO_PCLK_Ctrl+0xc2>
			GPIOH_PCLK_EN();
 80002ac:	4b3f      	ldr	r3, [pc, #252]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 80002ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b0:	4a3e      	ldr	r2, [pc, #248]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 80002b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002b8:	e06f      	b.n	800039a <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOI)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4a43      	ldr	r2, [pc, #268]	; (80003cc <GPIO_PCLK_Ctrl+0x1d4>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d16b      	bne.n	800039a <GPIO_PCLK_Ctrl+0x1a2>
			GPIOI_PCLK_EN();
 80002c2:	4b3a      	ldr	r3, [pc, #232]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 80002c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c6:	4a39      	ldr	r2, [pc, #228]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 80002c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ce:	e064      	b.n	800039a <GPIO_PCLK_Ctrl+0x1a2>
	else if(EN_DI==DISABLE)
 80002d0:	78fb      	ldrb	r3, [r7, #3]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d161      	bne.n	800039a <GPIO_PCLK_Ctrl+0x1a2>
		if(pGPIOx==GPIOA)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a33      	ldr	r2, [pc, #204]	; (80003a8 <GPIO_PCLK_Ctrl+0x1b0>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d106      	bne.n	80002ec <GPIO_PCLK_Ctrl+0xf4>
			GPIOA_PCLK_DI();
 80002de:	4b33      	ldr	r3, [pc, #204]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 80002e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e2:	4a32      	ldr	r2, [pc, #200]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 80002e4:	f023 0301 	bic.w	r3, r3, #1
 80002e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ea:	e056      	b.n	800039a <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOB)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a30      	ldr	r2, [pc, #192]	; (80003b0 <GPIO_PCLK_Ctrl+0x1b8>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d106      	bne.n	8000302 <GPIO_PCLK_Ctrl+0x10a>
			GPIOB_PCLK_DI();
 80002f4:	4b2d      	ldr	r3, [pc, #180]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f8:	4a2c      	ldr	r2, [pc, #176]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 80002fa:	f023 0302 	bic.w	r3, r3, #2
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000300:	e04b      	b.n	800039a <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOC)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a2b      	ldr	r2, [pc, #172]	; (80003b4 <GPIO_PCLK_Ctrl+0x1bc>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d106      	bne.n	8000318 <GPIO_PCLK_Ctrl+0x120>
			GPIOC_PCLK_DI();
 800030a:	4b28      	ldr	r3, [pc, #160]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 800030c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030e:	4a27      	ldr	r2, [pc, #156]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 8000310:	f023 0304 	bic.w	r3, r3, #4
 8000314:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000316:	e040      	b.n	800039a <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOD)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a27      	ldr	r2, [pc, #156]	; (80003b8 <GPIO_PCLK_Ctrl+0x1c0>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d106      	bne.n	800032e <GPIO_PCLK_Ctrl+0x136>
			GPIOD_PCLK_DI();
 8000320:	4b22      	ldr	r3, [pc, #136]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000324:	4a21      	ldr	r2, [pc, #132]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 8000326:	f023 0308 	bic.w	r3, r3, #8
 800032a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800032c:	e035      	b.n	800039a <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOE)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a22      	ldr	r2, [pc, #136]	; (80003bc <GPIO_PCLK_Ctrl+0x1c4>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d106      	bne.n	8000344 <GPIO_PCLK_Ctrl+0x14c>
			GPIOE_PCLK_DI();
 8000336:	4b1d      	ldr	r3, [pc, #116]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033a:	4a1c      	ldr	r2, [pc, #112]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 800033c:	f023 0310 	bic.w	r3, r3, #16
 8000340:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000342:	e02a      	b.n	800039a <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOF)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a1e      	ldr	r2, [pc, #120]	; (80003c0 <GPIO_PCLK_Ctrl+0x1c8>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d106      	bne.n	800035a <GPIO_PCLK_Ctrl+0x162>
			GPIOF_PCLK_DI();
 800034c:	4b17      	ldr	r3, [pc, #92]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000350:	4a16      	ldr	r2, [pc, #88]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 8000352:	f023 0320 	bic.w	r3, r3, #32
 8000356:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000358:	e01f      	b.n	800039a <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOG)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a19      	ldr	r2, [pc, #100]	; (80003c4 <GPIO_PCLK_Ctrl+0x1cc>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d106      	bne.n	8000370 <GPIO_PCLK_Ctrl+0x178>
			GPIOG_PCLK_DI();
 8000362:	4b12      	ldr	r3, [pc, #72]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 8000364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000366:	4a11      	ldr	r2, [pc, #68]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 8000368:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800036c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036e:	e014      	b.n	800039a <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOH)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a15      	ldr	r2, [pc, #84]	; (80003c8 <GPIO_PCLK_Ctrl+0x1d0>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d106      	bne.n	8000386 <GPIO_PCLK_Ctrl+0x18e>
			GPIOH_PCLK_DI();
 8000378:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 800037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037c:	4a0b      	ldr	r2, [pc, #44]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 800037e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000382:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000384:	e009      	b.n	800039a <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOI)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4a10      	ldr	r2, [pc, #64]	; (80003cc <GPIO_PCLK_Ctrl+0x1d4>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d105      	bne.n	800039a <GPIO_PCLK_Ctrl+0x1a2>
			GPIOI_PCLK_DI();
 800038e:	4b07      	ldr	r3, [pc, #28]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 8000390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000392:	4a06      	ldr	r2, [pc, #24]	; (80003ac <GPIO_PCLK_Ctrl+0x1b4>)
 8000394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000398:	6313      	str	r3, [r2, #48]	; 0x30
}
 800039a:	bf00      	nop
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	40020000 	.word	0x40020000
 80003ac:	40023800 	.word	0x40023800
 80003b0:	40020400 	.word	0x40020400
 80003b4:	40020800 	.word	0x40020800
 80003b8:	40020c00 	.word	0x40020c00
 80003bc:	40021000 	.word	0x40021000
 80003c0:	40021400 	.word	0x40021400
 80003c4:	40021800 	.word	0x40021800
 80003c8:	40021c00 	.word	0x40021c00
 80003cc:	40022000 	.word	0x40022000

080003d0 <GPIO_Init>:
 * 	@return					: void
 *
 * 	@notes					: API for initializing the GPIO pins
 */
void GPIO_Init(GPIOx_Handle_t *pGPIOx_Handle)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	uint32_t temp;

	//Pin mode configuration
	if(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinMode<=GPIO_MODE_AN)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	795b      	ldrb	r3, [r3, #5]
 80003dc:	2b03      	cmp	r3, #3
 80003de:	d820      	bhi.n	8000422 <GPIO_Init+0x52>
	{
		//Non-Interrupt modes
		temp = (pGPIOx_Handle->GPIO_PinConfig.GPIO_PinMode)<<(2*(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	795b      	ldrb	r3, [r3, #5]
 80003e4:	461a      	mov	r2, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	791b      	ldrb	r3, [r3, #4]
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	fa02 f303 	lsl.w	r3, r2, r3
 80003f0:	60bb      	str	r3, [r7, #8]
		pGPIOx_Handle->pGPIOx->MODER &= ~((0x3)<<(2*(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo)));
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	791b      	ldrb	r3, [r3, #4]
 80003fc:	005b      	lsls	r3, r3, #1
 80003fe:	2103      	movs	r1, #3
 8000400:	fa01 f303 	lsl.w	r3, r1, r3
 8000404:	43db      	mvns	r3, r3
 8000406:	4619      	mov	r1, r3
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	400a      	ands	r2, r1
 800040e:	601a      	str	r2, [r3, #0]
		pGPIOx_Handle->pGPIOx->MODER |= temp;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	6819      	ldr	r1, [r3, #0]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	68ba      	ldr	r2, [r7, #8]
 800041c:	430a      	orrs	r2, r1
 800041e:	601a      	str	r2, [r3, #0]
 8000420:	e0c8      	b.n	80005b4 <GPIO_Init+0x1e4>
	{
		//Interrupt Mode

		/**EXTI Line Configuration**/
		//IT_RT -  Interrupt Rising Edge Trigger
		if(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RT)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	795b      	ldrb	r3, [r3, #5]
 8000426:	2b04      	cmp	r3, #4
 8000428:	d122      	bne.n	8000470 <GPIO_Init+0xa0>
		{
			//Configure RTSR
			EXTI->EXTI_RTSR &= ~(1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));
 800042a:	4b5d      	ldr	r3, [pc, #372]	; (80005a0 <GPIO_Init+0x1d0>)
 800042c:	689b      	ldr	r3, [r3, #8]
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	7912      	ldrb	r2, [r2, #4]
 8000432:	4611      	mov	r1, r2
 8000434:	2201      	movs	r2, #1
 8000436:	408a      	lsls	r2, r1
 8000438:	43d2      	mvns	r2, r2
 800043a:	4611      	mov	r1, r2
 800043c:	4a58      	ldr	r2, [pc, #352]	; (80005a0 <GPIO_Init+0x1d0>)
 800043e:	400b      	ands	r3, r1
 8000440:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_RTSR |= 1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo);
 8000442:	4b57      	ldr	r3, [pc, #348]	; (80005a0 <GPIO_Init+0x1d0>)
 8000444:	689b      	ldr	r3, [r3, #8]
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	7912      	ldrb	r2, [r2, #4]
 800044a:	4611      	mov	r1, r2
 800044c:	2201      	movs	r2, #1
 800044e:	408a      	lsls	r2, r1
 8000450:	4611      	mov	r1, r2
 8000452:	4a53      	ldr	r2, [pc, #332]	; (80005a0 <GPIO_Init+0x1d0>)
 8000454:	430b      	orrs	r3, r1
 8000456:	6093      	str	r3, [r2, #8]
			//Clear FTSR
			EXTI->EXTI_FTSR &=  ~(1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));
 8000458:	4b51      	ldr	r3, [pc, #324]	; (80005a0 <GPIO_Init+0x1d0>)
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	687a      	ldr	r2, [r7, #4]
 800045e:	7912      	ldrb	r2, [r2, #4]
 8000460:	4611      	mov	r1, r2
 8000462:	2201      	movs	r2, #1
 8000464:	408a      	lsls	r2, r1
 8000466:	43d2      	mvns	r2, r2
 8000468:	4611      	mov	r1, r2
 800046a:	4a4d      	ldr	r2, [pc, #308]	; (80005a0 <GPIO_Init+0x1d0>)
 800046c:	400b      	ands	r3, r1
 800046e:	60d3      	str	r3, [r2, #12]

		}
		//IT_FT -  Interrupt Falling Edge Trigger
		if(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_FT)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	795b      	ldrb	r3, [r3, #5]
 8000474:	2b05      	cmp	r3, #5
 8000476:	d122      	bne.n	80004be <GPIO_Init+0xee>
		{
			//Configure FTSR
			EXTI->EXTI_FTSR &= ~(1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));
 8000478:	4b49      	ldr	r3, [pc, #292]	; (80005a0 <GPIO_Init+0x1d0>)
 800047a:	68db      	ldr	r3, [r3, #12]
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	7912      	ldrb	r2, [r2, #4]
 8000480:	4611      	mov	r1, r2
 8000482:	2201      	movs	r2, #1
 8000484:	408a      	lsls	r2, r1
 8000486:	43d2      	mvns	r2, r2
 8000488:	4611      	mov	r1, r2
 800048a:	4a45      	ldr	r2, [pc, #276]	; (80005a0 <GPIO_Init+0x1d0>)
 800048c:	400b      	ands	r3, r1
 800048e:	60d3      	str	r3, [r2, #12]
			EXTI->EXTI_FTSR |= 1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo);
 8000490:	4b43      	ldr	r3, [pc, #268]	; (80005a0 <GPIO_Init+0x1d0>)
 8000492:	68db      	ldr	r3, [r3, #12]
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	7912      	ldrb	r2, [r2, #4]
 8000498:	4611      	mov	r1, r2
 800049a:	2201      	movs	r2, #1
 800049c:	408a      	lsls	r2, r1
 800049e:	4611      	mov	r1, r2
 80004a0:	4a3f      	ldr	r2, [pc, #252]	; (80005a0 <GPIO_Init+0x1d0>)
 80004a2:	430b      	orrs	r3, r1
 80004a4:	60d3      	str	r3, [r2, #12]
			//Clear RTSR
			EXTI->EXTI_RTSR &=  ~(1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));
 80004a6:	4b3e      	ldr	r3, [pc, #248]	; (80005a0 <GPIO_Init+0x1d0>)
 80004a8:	689b      	ldr	r3, [r3, #8]
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	7912      	ldrb	r2, [r2, #4]
 80004ae:	4611      	mov	r1, r2
 80004b0:	2201      	movs	r2, #1
 80004b2:	408a      	lsls	r2, r1
 80004b4:	43d2      	mvns	r2, r2
 80004b6:	4611      	mov	r1, r2
 80004b8:	4a39      	ldr	r2, [pc, #228]	; (80005a0 <GPIO_Init+0x1d0>)
 80004ba:	400b      	ands	r3, r1
 80004bc:	6093      	str	r3, [r2, #8]
		}
		//IT_RFT -  Interrupt Rising/Falling Edge Trigger
		if(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RFT)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	795b      	ldrb	r3, [r3, #5]
 80004c2:	2b06      	cmp	r3, #6
 80004c4:	d12d      	bne.n	8000522 <GPIO_Init+0x152>
		{
			//Configure RTSR
			EXTI->EXTI_RTSR &= ~(1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));
 80004c6:	4b36      	ldr	r3, [pc, #216]	; (80005a0 <GPIO_Init+0x1d0>)
 80004c8:	689b      	ldr	r3, [r3, #8]
 80004ca:	687a      	ldr	r2, [r7, #4]
 80004cc:	7912      	ldrb	r2, [r2, #4]
 80004ce:	4611      	mov	r1, r2
 80004d0:	2201      	movs	r2, #1
 80004d2:	408a      	lsls	r2, r1
 80004d4:	43d2      	mvns	r2, r2
 80004d6:	4611      	mov	r1, r2
 80004d8:	4a31      	ldr	r2, [pc, #196]	; (80005a0 <GPIO_Init+0x1d0>)
 80004da:	400b      	ands	r3, r1
 80004dc:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_RTSR |= 1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo);
 80004de:	4b30      	ldr	r3, [pc, #192]	; (80005a0 <GPIO_Init+0x1d0>)
 80004e0:	689b      	ldr	r3, [r3, #8]
 80004e2:	687a      	ldr	r2, [r7, #4]
 80004e4:	7912      	ldrb	r2, [r2, #4]
 80004e6:	4611      	mov	r1, r2
 80004e8:	2201      	movs	r2, #1
 80004ea:	408a      	lsls	r2, r1
 80004ec:	4611      	mov	r1, r2
 80004ee:	4a2c      	ldr	r2, [pc, #176]	; (80005a0 <GPIO_Init+0x1d0>)
 80004f0:	430b      	orrs	r3, r1
 80004f2:	6093      	str	r3, [r2, #8]
			//Configure FTSR
			EXTI->EXTI_FTSR &= ~(1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));
 80004f4:	4b2a      	ldr	r3, [pc, #168]	; (80005a0 <GPIO_Init+0x1d0>)
 80004f6:	68db      	ldr	r3, [r3, #12]
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	7912      	ldrb	r2, [r2, #4]
 80004fc:	4611      	mov	r1, r2
 80004fe:	2201      	movs	r2, #1
 8000500:	408a      	lsls	r2, r1
 8000502:	43d2      	mvns	r2, r2
 8000504:	4611      	mov	r1, r2
 8000506:	4a26      	ldr	r2, [pc, #152]	; (80005a0 <GPIO_Init+0x1d0>)
 8000508:	400b      	ands	r3, r1
 800050a:	60d3      	str	r3, [r2, #12]
			EXTI->EXTI_FTSR |= 1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo);
 800050c:	4b24      	ldr	r3, [pc, #144]	; (80005a0 <GPIO_Init+0x1d0>)
 800050e:	68db      	ldr	r3, [r3, #12]
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	7912      	ldrb	r2, [r2, #4]
 8000514:	4611      	mov	r1, r2
 8000516:	2201      	movs	r2, #1
 8000518:	408a      	lsls	r2, r1
 800051a:	4611      	mov	r1, r2
 800051c:	4a20      	ldr	r2, [pc, #128]	; (80005a0 <GPIO_Init+0x1d0>)
 800051e:	430b      	orrs	r3, r1
 8000520:	60d3      	str	r3, [r2, #12]
		}
		/**EXTI Line Configuration**/

		//Configure GPIO Port selection Register in SYSCFG
		SYSCFG_CLK_EN();																				//Enable SYSCFG Clock
 8000522:	4b20      	ldr	r3, [pc, #128]	; (80005a4 <GPIO_Init+0x1d4>)
 8000524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000526:	4a1f      	ldr	r2, [pc, #124]	; (80005a4 <GPIO_Init+0x1d4>)
 8000528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800052c:	6453      	str	r3, [r2, #68]	; 0x44
		uint8_t SYSCFG_ARRAY_INDEX = ((pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo)/4);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	791b      	ldrb	r3, [r3, #4]
 8000532:	089b      	lsrs	r3, r3, #2
 8000534:	73fb      	strb	r3, [r7, #15]
		uint8_t SYSCFG_BIT_FIELD= ((pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo)%4)*4;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	791b      	ldrb	r3, [r3, #4]
 800053a:	f003 0303 	and.w	r3, r3, #3
 800053e:	b2db      	uxtb	r3, r3
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	73bb      	strb	r3, [r7, #14]
		SYSCFG->SYSCFG_EXTICR[SYSCFG_ARRAY_INDEX] &= ~(Port_ConfigCode(GPIOA))<<(SYSCFG_BIT_FIELD);		//Clear the Bitfield
 8000544:	4818      	ldr	r0, [pc, #96]	; (80005a8 <GPIO_Init+0x1d8>)
 8000546:	f000 f90b 	bl	8000760 <Port_ConfigCode>
 800054a:	4603      	mov	r3, r0
 800054c:	43da      	mvns	r2, r3
 800054e:	7bbb      	ldrb	r3, [r7, #14]
 8000550:	fa02 f103 	lsl.w	r1, r2, r3
 8000554:	4a15      	ldr	r2, [pc, #84]	; (80005ac <GPIO_Init+0x1dc>)
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	3302      	adds	r3, #2
 800055a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800055e:	4608      	mov	r0, r1
 8000560:	4912      	ldr	r1, [pc, #72]	; (80005ac <GPIO_Init+0x1dc>)
 8000562:	7bfb      	ldrb	r3, [r7, #15]
 8000564:	4002      	ands	r2, r0
 8000566:	3302      	adds	r3, #2
 8000568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->SYSCFG_EXTICR[SYSCFG_ARRAY_INDEX] = Port_ConfigCode(GPIOD)<<(SYSCFG_BIT_FIELD);			//Assert the Port Config Code
 800056c:	4810      	ldr	r0, [pc, #64]	; (80005b0 <GPIO_Init+0x1e0>)
 800056e:	f000 f8f7 	bl	8000760 <Port_ConfigCode>
 8000572:	4603      	mov	r3, r0
 8000574:	461a      	mov	r2, r3
 8000576:	7bbb      	ldrb	r3, [r7, #14]
 8000578:	fa02 f103 	lsl.w	r1, r2, r3
 800057c:	4a0b      	ldr	r2, [pc, #44]	; (80005ac <GPIO_Init+0x1dc>)
 800057e:	7bfb      	ldrb	r3, [r7, #15]
 8000580:	3302      	adds	r3, #2
 8000582:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//Configure EXTI Interrupt delivery using IMR Register
		EXTI->EXTI_IMR |= 1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo);
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <GPIO_Init+0x1d0>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	7912      	ldrb	r2, [r2, #4]
 800058e:	4611      	mov	r1, r2
 8000590:	2201      	movs	r2, #1
 8000592:	408a      	lsls	r2, r1
 8000594:	4611      	mov	r1, r2
 8000596:	4a02      	ldr	r2, [pc, #8]	; (80005a0 <GPIO_Init+0x1d0>)
 8000598:	430b      	orrs	r3, r1
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	e00a      	b.n	80005b4 <GPIO_Init+0x1e4>
 800059e:	bf00      	nop
 80005a0:	40013c00 	.word	0x40013c00
 80005a4:	40023800 	.word	0x40023800
 80005a8:	40020000 	.word	0x40020000
 80005ac:	40013800 	.word	0x40013800
 80005b0:	40020c00 	.word	0x40020c00
	}

	//Speed configuration
	temp = (pGPIOx_Handle->GPIO_PinConfig.GPIO_PinSpeed)<<(2*pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	799b      	ldrb	r3, [r3, #6]
 80005b8:	461a      	mov	r2, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	791b      	ldrb	r3, [r3, #4]
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	fa02 f303 	lsl.w	r3, r2, r3
 80005c4:	60bb      	str	r3, [r7, #8]
	pGPIOx_Handle->pGPIOx->OSPEEDR &= ~((0x3)<<(2*pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));	  //Clearing the required bits
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	689a      	ldr	r2, [r3, #8]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	791b      	ldrb	r3, [r3, #4]
 80005d0:	005b      	lsls	r3, r3, #1
 80005d2:	2103      	movs	r1, #3
 80005d4:	fa01 f303 	lsl.w	r3, r1, r3
 80005d8:	43db      	mvns	r3, r3
 80005da:	4619      	mov	r1, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	400a      	ands	r2, r1
 80005e2:	609a      	str	r2, [r3, #8]
	pGPIOx_Handle->pGPIOx->OSPEEDR |= temp;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	6899      	ldr	r1, [r3, #8]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	68ba      	ldr	r2, [r7, #8]
 80005f0:	430a      	orrs	r2, r1
 80005f2:	609a      	str	r2, [r3, #8]

	//Output type configuration
	temp = (pGPIOx_Handle->GPIO_PinConfig.GPIO_PinOPtype)<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	7a1b      	ldrb	r3, [r3, #8]
 80005f8:	461a      	mov	r2, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	791b      	ldrb	r3, [r3, #4]
 80005fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000602:	60bb      	str	r3, [r7, #8]
	pGPIOx_Handle->pGPIOx->OTYPER &= ~((0x1)<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));	 //Clearing the required bits
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	685a      	ldr	r2, [r3, #4]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	791b      	ldrb	r3, [r3, #4]
 800060e:	4619      	mov	r1, r3
 8000610:	2301      	movs	r3, #1
 8000612:	408b      	lsls	r3, r1
 8000614:	43db      	mvns	r3, r3
 8000616:	4619      	mov	r1, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	400a      	ands	r2, r1
 800061e:	605a      	str	r2, [r3, #4]
	pGPIOx_Handle->pGPIOx->OTYPER |= temp;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	6859      	ldr	r1, [r3, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	430a      	orrs	r2, r1
 800062e:	605a      	str	r2, [r3, #4]

	//Pull-Up/Down configuration
	temp = (pGPIOx_Handle->GPIO_PinConfig.GPIO_PinPuPdCtrl)<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	79db      	ldrb	r3, [r3, #7]
 8000634:	461a      	mov	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	791b      	ldrb	r3, [r3, #4]
 800063a:	fa02 f303 	lsl.w	r3, r2, r3
 800063e:	60bb      	str	r3, [r7, #8]
	pGPIOx_Handle->pGPIOx->PUPDR &= ~((0x1)<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));		//Clearing the required bits
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	68da      	ldr	r2, [r3, #12]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	791b      	ldrb	r3, [r3, #4]
 800064a:	4619      	mov	r1, r3
 800064c:	2301      	movs	r3, #1
 800064e:	408b      	lsls	r3, r1
 8000650:	43db      	mvns	r3, r3
 8000652:	4619      	mov	r1, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	400a      	ands	r2, r1
 800065a:	60da      	str	r2, [r3, #12]
	pGPIOx_Handle->pGPIOx->PUPDR |= temp;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	68d9      	ldr	r1, [r3, #12]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	68ba      	ldr	r2, [r7, #8]
 8000668:	430a      	orrs	r2, r1
 800066a:	60da      	str	r2, [r3, #12]

	//Alternate functionality configuration
	temp = (pGPIOx_Handle->GPIO_PinConfig.GPIO_PinAltFunc)<<(4*(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo%8));
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	7a5b      	ldrb	r3, [r3, #9]
 8000670:	461a      	mov	r2, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	791b      	ldrb	r3, [r3, #4]
 8000676:	f003 0307 	and.w	r3, r3, #7
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	fa02 f303 	lsl.w	r3, r2, r3
 8000680:	60bb      	str	r3, [r7, #8]
	pGPIOx_Handle->pGPIOx->AF[pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo/8] &= ~((0xF)<<(4*(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo%8)));	//Clearing the required bits
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	7912      	ldrb	r2, [r2, #4]
 800068a:	08d2      	lsrs	r2, r2, #3
 800068c:	b2d0      	uxtb	r0, r2
 800068e:	4602      	mov	r2, r0
 8000690:	3208      	adds	r2, #8
 8000692:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	791b      	ldrb	r3, [r3, #4]
 800069a:	f003 0307 	and.w	r3, r3, #7
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	210f      	movs	r1, #15
 80006a2:	fa01 f303 	lsl.w	r3, r1, r3
 80006a6:	43db      	mvns	r3, r3
 80006a8:	4619      	mov	r1, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4011      	ands	r1, r2
 80006b0:	f100 0208 	add.w	r2, r0, #8
 80006b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIOx_Handle->pGPIOx->AF[pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo/8] |= temp;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	7912      	ldrb	r2, [r2, #4]
 80006c0:	08d2      	lsrs	r2, r2, #3
 80006c2:	b2d0      	uxtb	r0, r2
 80006c4:	4602      	mov	r2, r0
 80006c6:	3208      	adds	r2, #8
 80006c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	68ba      	ldr	r2, [r7, #8]
 80006d2:	4311      	orrs	r1, r2
 80006d4:	f100 0208 	add.w	r2, r0, #8
 80006d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80006dc:	bf00      	nop
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <GPIO_IPinRead>:
 *
 * 	@notes					: API for reading individual GPIO pins
 * 							  Type-cast cos these are 32-bit registers
 */
uint8_t GPIO_IPinRead(GPIO_RegDef_t *pGPIOx, uint8_t PinNo)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	460b      	mov	r3, r1
 80006ee:	70fb      	strb	r3, [r7, #3]
	uint8_t value = (uint8_t)(((pGPIOx->IDR)>>PinNo)&0x00000001);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	691a      	ldr	r2, [r3, #16]
 80006f4:	78fb      	ldrb	r3, [r7, #3]
 80006f6:	fa22 f303 	lsr.w	r3, r2, r3
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	f003 0301 	and.w	r3, r3, #1
 8000700:	73fb      	strb	r3, [r7, #15]
	return value;
 8000702:	7bfb      	ldrb	r3, [r7, #15]
}
 8000704:	4618      	mov	r0, r3
 8000706:	3714      	adds	r7, #20
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <GPIO_OPinWrite>:
 * 	@return					: void
 *
 * 	@notes					: API for writing to a GPIO pin
 */
void GPIO_OPinWrite(GPIO_RegDef_t *pGPIOx, uint8_t PinNo, uint8_t value)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	460b      	mov	r3, r1
 800071a:	70fb      	strb	r3, [r7, #3]
 800071c:	4613      	mov	r3, r2
 800071e:	70bb      	strb	r3, [r7, #2]
	if(value==SET)
 8000720:	78bb      	ldrb	r3, [r7, #2]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d109      	bne.n	800073a <GPIO_OPinWrite+0x2a>
		pGPIOx->ODR |= (1<<PinNo);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	78fa      	ldrb	r2, [r7, #3]
 800072c:	2101      	movs	r1, #1
 800072e:	fa01 f202 	lsl.w	r2, r1, r2
 8000732:	431a      	orrs	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	615a      	str	r2, [r3, #20]
	else if(value==RESET)
		pGPIOx->ODR &= ~(1<<PinNo);
}
 8000738:	e00c      	b.n	8000754 <GPIO_OPinWrite+0x44>
	else if(value==RESET)
 800073a:	78bb      	ldrb	r3, [r7, #2]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d109      	bne.n	8000754 <GPIO_OPinWrite+0x44>
		pGPIOx->ODR &= ~(1<<PinNo);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	695b      	ldr	r3, [r3, #20]
 8000744:	78fa      	ldrb	r2, [r7, #3]
 8000746:	2101      	movs	r1, #1
 8000748:	fa01 f202 	lsl.w	r2, r1, r2
 800074c:	43d2      	mvns	r2, r2
 800074e:	401a      	ands	r2, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	615a      	str	r2, [r3, #20]
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <Port_ConfigCode>:
		(EXTI->EXTI_PR) |= (1<<PinNo);
	}
}

uint8_t Port_ConfigCode(GPIO_RegDef_t* pGPIOx)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	return ((pGPIOx==GPIOA)?0:\
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4a1e      	ldr	r2, [pc, #120]	; (80007e4 <Port_ConfigCode+0x84>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d031      	beq.n	80007d4 <Port_ConfigCode+0x74>
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4a1d      	ldr	r2, [pc, #116]	; (80007e8 <Port_ConfigCode+0x88>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d02b      	beq.n	80007d0 <Port_ConfigCode+0x70>
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4a1c      	ldr	r2, [pc, #112]	; (80007ec <Port_ConfigCode+0x8c>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d025      	beq.n	80007cc <Port_ConfigCode+0x6c>
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a1b      	ldr	r2, [pc, #108]	; (80007f0 <Port_ConfigCode+0x90>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d01f      	beq.n	80007c8 <Port_ConfigCode+0x68>
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4a1a      	ldr	r2, [pc, #104]	; (80007f4 <Port_ConfigCode+0x94>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d019      	beq.n	80007c4 <Port_ConfigCode+0x64>
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4a19      	ldr	r2, [pc, #100]	; (80007f8 <Port_ConfigCode+0x98>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d013      	beq.n	80007c0 <Port_ConfigCode+0x60>
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4a18      	ldr	r2, [pc, #96]	; (80007fc <Port_ConfigCode+0x9c>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d00d      	beq.n	80007bc <Port_ConfigCode+0x5c>
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4a17      	ldr	r2, [pc, #92]	; (8000800 <Port_ConfigCode+0xa0>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d007      	beq.n	80007b8 <Port_ConfigCode+0x58>
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4a16      	ldr	r2, [pc, #88]	; (8000804 <Port_ConfigCode+0xa4>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d101      	bne.n	80007b4 <Port_ConfigCode+0x54>
 80007b0:	2308      	movs	r3, #8
 80007b2:	e010      	b.n	80007d6 <Port_ConfigCode+0x76>
 80007b4:	2300      	movs	r3, #0
 80007b6:	e00e      	b.n	80007d6 <Port_ConfigCode+0x76>
 80007b8:	2307      	movs	r3, #7
 80007ba:	e00c      	b.n	80007d6 <Port_ConfigCode+0x76>
 80007bc:	2306      	movs	r3, #6
 80007be:	e00a      	b.n	80007d6 <Port_ConfigCode+0x76>
 80007c0:	2305      	movs	r3, #5
 80007c2:	e008      	b.n	80007d6 <Port_ConfigCode+0x76>
 80007c4:	2304      	movs	r3, #4
 80007c6:	e006      	b.n	80007d6 <Port_ConfigCode+0x76>
 80007c8:	2303      	movs	r3, #3
 80007ca:	e004      	b.n	80007d6 <Port_ConfigCode+0x76>
 80007cc:	2302      	movs	r3, #2
 80007ce:	e002      	b.n	80007d6 <Port_ConfigCode+0x76>
 80007d0:	2301      	movs	r3, #1
 80007d2:	e000      	b.n	80007d6 <Port_ConfigCode+0x76>
 80007d4:	2300      	movs	r3, #0
			(pGPIOx==GPIOE)?4:\
			(pGPIOx==GPIOF)?5:\
			(pGPIOx==GPIOG)?6:\
			(pGPIOx==GPIOH)?7:\
			(pGPIOx==GPIOI)?8:0);
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40020000 	.word	0x40020000
 80007e8:	40020400 	.word	0x40020400
 80007ec:	40020800 	.word	0x40020800
 80007f0:	40020c00 	.word	0x40020c00
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40021400 	.word	0x40021400
 80007fc:	40021800 	.word	0x40021800
 8000800:	40021c00 	.word	0x40021c00
 8000804:	40022000 	.word	0x40022000

08000808 <SPI_PCLK_Ctrl>:
 *
 * 	@notes					: API for enabling and disabling the clock
 */

void SPI_PCLK_Ctrl(SPI_RegDef_t *pSPIx, uint8_t EN_DI)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
	if(EN_DI==ENABLE)
 8000814:	78fb      	ldrb	r3, [r7, #3]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d120      	bne.n	800085c <SPI_PCLK_Ctrl+0x54>
	{
		if(pSPIx==SPI1)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4a24      	ldr	r2, [pc, #144]	; (80008b0 <SPI_PCLK_Ctrl+0xa8>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d106      	bne.n	8000830 <SPI_PCLK_Ctrl+0x28>
			SPI1_PCLK_EN();
 8000822:	4b24      	ldr	r3, [pc, #144]	; (80008b4 <SPI_PCLK_Ctrl+0xac>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000826:	4a23      	ldr	r2, [pc, #140]	; (80008b4 <SPI_PCLK_Ctrl+0xac>)
 8000828:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800082c:	6453      	str	r3, [r2, #68]	; 0x44
		else if(pSPIx==SPI2)
			SPI2_PCLK_DI();
		else if(pSPIx==SPI3)
			SPI3_PCLK_DI();
	}
}
 800082e:	e038      	b.n	80008a2 <SPI_PCLK_Ctrl+0x9a>
		else if(pSPIx==SPI2)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a21      	ldr	r2, [pc, #132]	; (80008b8 <SPI_PCLK_Ctrl+0xb0>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d106      	bne.n	8000846 <SPI_PCLK_Ctrl+0x3e>
			SPI2_PCLK_EN();
 8000838:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <SPI_PCLK_Ctrl+0xac>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	4a1d      	ldr	r2, [pc, #116]	; (80008b4 <SPI_PCLK_Ctrl+0xac>)
 800083e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000842:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000844:	e02d      	b.n	80008a2 <SPI_PCLK_Ctrl+0x9a>
		else if(pSPIx==SPI3)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a1c      	ldr	r2, [pc, #112]	; (80008bc <SPI_PCLK_Ctrl+0xb4>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d129      	bne.n	80008a2 <SPI_PCLK_Ctrl+0x9a>
			SPI3_PCLK_EN();
 800084e:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <SPI_PCLK_Ctrl+0xac>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	4a18      	ldr	r2, [pc, #96]	; (80008b4 <SPI_PCLK_Ctrl+0xac>)
 8000854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000858:	6413      	str	r3, [r2, #64]	; 0x40
}
 800085a:	e022      	b.n	80008a2 <SPI_PCLK_Ctrl+0x9a>
	else if(EN_DI==DISABLE)
 800085c:	78fb      	ldrb	r3, [r7, #3]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d11f      	bne.n	80008a2 <SPI_PCLK_Ctrl+0x9a>
		if(pSPIx==SPI1)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4a12      	ldr	r2, [pc, #72]	; (80008b0 <SPI_PCLK_Ctrl+0xa8>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d106      	bne.n	8000878 <SPI_PCLK_Ctrl+0x70>
			SPI1_PCLK_DI();
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <SPI_PCLK_Ctrl+0xac>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	4a11      	ldr	r2, [pc, #68]	; (80008b4 <SPI_PCLK_Ctrl+0xac>)
 8000870:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000874:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000876:	e014      	b.n	80008a2 <SPI_PCLK_Ctrl+0x9a>
		else if(pSPIx==SPI2)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a0f      	ldr	r2, [pc, #60]	; (80008b8 <SPI_PCLK_Ctrl+0xb0>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d106      	bne.n	800088e <SPI_PCLK_Ctrl+0x86>
			SPI2_PCLK_DI();
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <SPI_PCLK_Ctrl+0xac>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	4a0b      	ldr	r2, [pc, #44]	; (80008b4 <SPI_PCLK_Ctrl+0xac>)
 8000886:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800088a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800088c:	e009      	b.n	80008a2 <SPI_PCLK_Ctrl+0x9a>
		else if(pSPIx==SPI3)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <SPI_PCLK_Ctrl+0xb4>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d105      	bne.n	80008a2 <SPI_PCLK_Ctrl+0x9a>
			SPI3_PCLK_DI();
 8000896:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <SPI_PCLK_Ctrl+0xac>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	4a06      	ldr	r2, [pc, #24]	; (80008b4 <SPI_PCLK_Ctrl+0xac>)
 800089c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008a0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40013000 	.word	0x40013000
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40003800 	.word	0x40003800
 80008bc:	40003c00 	.word	0x40003c00

080008c0 <SPI_Init>:
 *
 * 	@notes					: API for enabling and disabling the clock
 */

void SPI_Init(SPIx_Handle_t *pSPIx_Handle)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]

	//SPI Device Mode
	temp |= (pSPIx_Handle->SPIx_PinConfig.SPI_DeviceConfig)<<SPI_CR1_MSTR;  //MSTR Bit of SPI_CR1
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	791b      	ldrb	r3, [r3, #4]
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	461a      	mov	r2, r3
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	60fb      	str	r3, [r7, #12]
	/*
		BIDIMODE		Full-Duplex-0											Half-Duplex-1(Master and Slave work reciprocally)
		RXONLY			0(Full-Duplex) - Simplex Tx(Disconnect MISO),			BIDIOE:	0(Receive)
						1(Rx Only) - Simplex RX											1(Transmit)
	*/
	uint8_t BusConfig = pSPIx_Handle->SPIx_PinConfig.SPI_BusConfig;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	795b      	ldrb	r3, [r3, #5]
 80008de:	72fb      	strb	r3, [r7, #11]
	if(BusConfig == BUSCONF_FULLDUP)
 80008e0:	7afb      	ldrb	r3, [r7, #11]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d104      	bne.n	80008f0 <SPI_Init+0x30>
		temp &= ~(1<<SPI_CR1_BIDIMODE);
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	e01a      	b.n	8000926 <SPI_Init+0x66>
	else if(BusConfig == BUSCONF_HALFDUP)
 80008f0:	7afb      	ldrb	r3, [r7, #11]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d104      	bne.n	8000900 <SPI_Init+0x40>
		temp |= (1<<SPI_CR1_BIDIMODE);
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	e012      	b.n	8000926 <SPI_Init+0x66>
	else if(BusConfig == BUSCONF_SIMPRX)
 8000900:	7afb      	ldrb	r3, [r7, #11]
 8000902:	2b02      	cmp	r3, #2
 8000904:	d108      	bne.n	8000918 <SPI_Init+0x58>
	{
		temp &= ~(1<<SPI_CR1_BIDIMODE);
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800090c:	60fb      	str	r3, [r7, #12]
		temp |= (1<<SPI_CR1_RXONLY);
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	e006      	b.n	8000926 <SPI_Init+0x66>
	}
	else if(BusConfig == BUSCONF_SIMPTX)	//Disconnect the MISO line
 8000918:	7afb      	ldrb	r3, [r7, #11]
 800091a:	2b03      	cmp	r3, #3
 800091c:	d103      	bne.n	8000926 <SPI_Init+0x66>
		temp &= ~(1<<SPI_CR1_BIDIMODE);
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000924:	60fb      	str	r3, [r7, #12]

	//SPI Clock Speed
	temp |= (pSPIx_Handle->SPIx_PinConfig.SPI_ClkSpeed)<<SPI_CR1_BR;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	799b      	ldrb	r3, [r3, #6]
 800092a:	00db      	lsls	r3, r3, #3
 800092c:	461a      	mov	r2, r3
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	4313      	orrs	r3, r2
 8000932:	60fb      	str	r3, [r7, #12]

	//SPI Data Frame Format
	if(pSPIx_Handle->SPIx_PinConfig.SPI_DFF == DFF8)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	79db      	ldrb	r3, [r3, #7]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d104      	bne.n	8000946 <SPI_Init+0x86>
		temp &= ~(1<<SPI_CR1_DFF);
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	e007      	b.n	8000956 <SPI_Init+0x96>
	else if(pSPIx_Handle->SPIx_PinConfig.SPI_DFF == DFF16)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	79db      	ldrb	r3, [r3, #7]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d103      	bne.n	8000956 <SPI_Init+0x96>
		temp |= (1<<SPI_CR1_DFF);
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000954:	60fb      	str	r3, [r7, #12]

	//SPI CPOL
	if(pSPIx_Handle->SPIx_PinConfig.SPI_CPOL == ZERO_IDLE)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	7a1b      	ldrb	r3, [r3, #8]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d104      	bne.n	8000968 <SPI_Init+0xa8>
		temp &= ~(1<<SPI_CR1_CPOL);
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	f023 0302 	bic.w	r3, r3, #2
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	e007      	b.n	8000978 <SPI_Init+0xb8>
	else if(pSPIx_Handle->SPIx_PinConfig.SPI_CPOL == HIGH_IDLE)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	7a1b      	ldrb	r3, [r3, #8]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d103      	bne.n	8000978 <SPI_Init+0xb8>
		temp |= (1<<SPI_CR1_CPOL);
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f043 0302 	orr.w	r3, r3, #2
 8000976:	60fb      	str	r3, [r7, #12]

	//SPI CPHA
	if(pSPIx_Handle->SPIx_PinConfig.SPI_CPHA == FIRSTCLK_CAP)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	7a5b      	ldrb	r3, [r3, #9]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d104      	bne.n	800098a <SPI_Init+0xca>
		temp &= ~(1<<SPI_CR1_CPHA);
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f023 0301 	bic.w	r3, r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	e007      	b.n	800099a <SPI_Init+0xda>
	else if(pSPIx_Handle->SPIx_PinConfig.SPI_CPHA == SECONDCLK_CAP)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	7a5b      	ldrb	r3, [r3, #9]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d103      	bne.n	800099a <SPI_Init+0xda>
		temp |= (1<<SPI_CR1_CPHA);
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	60fb      	str	r3, [r7, #12]

	//Software Slave Management(SSM)
	if(pSPIx_Handle->SPIx_PinConfig.SPI_SSM == SSM_DI)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	7a9b      	ldrb	r3, [r3, #10]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d104      	bne.n	80009ac <SPI_Init+0xec>
		temp &= ~(1<<SPI_CR1_SSM);
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	e007      	b.n	80009bc <SPI_Init+0xfc>
	else if(pSPIx_Handle->SPIx_PinConfig.SPI_SSM == SSM_EN)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	7a9b      	ldrb	r3, [r3, #10]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d103      	bne.n	80009bc <SPI_Init+0xfc>
		temp |= (1<<SPI_CR1_SSM);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009ba:	60fb      	str	r3, [r7, #12]

	pSPIx_Handle->pSPIx->SPI_CR1 &= ~(temp);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	6819      	ldr	r1, [r3, #0]
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	43da      	mvns	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	400a      	ands	r2, r1
 80009cc:	601a      	str	r2, [r3, #0]
	pSPIx_Handle->pSPIx->SPI_CR1 |= temp;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	6819      	ldr	r1, [r3, #0]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	68fa      	ldr	r2, [r7, #12]
 80009da:	430a      	orrs	r2, r1
 80009dc:	601a      	str	r2, [r3, #0]
}
 80009de:	bf00      	nop
 80009e0:	3714      	adds	r7, #20
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <SPI_TxDataB>:
 * 							  				len decremented by 1, loop back to *
 * 							  		DFF_16: 2 bytes of data is written to the data register
 * 							  				len decremented by 2, loop back to *
 */
void SPI_TxDataB(SPI_RegDef_t *pSPIx, uint8_t *pTxBuff, uint32_t len)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b084      	sub	sp, #16
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	60f8      	str	r0, [r7, #12]
 80009f2:	60b9      	str	r1, [r7, #8]
 80009f4:	607a      	str	r2, [r7, #4]
	//Tx Data Blocking Call API: Blocks Program execution, till all the data is transmitted
	while(len>0)
 80009f6:	e024      	b.n	8000a42 <SPI_TxDataB+0x58>
	{
		while(!(FlagStatus(pSPIx, SPI_SR_TXEM)));	//wait until TXE bit is SET
 80009f8:	bf00      	nop
 80009fa:	2102      	movs	r1, #2
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f000 f862 	bl	8000ac6 <FlagStatus>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d0f8      	beq.n	80009fa <SPI_TxDataB+0x10>

		if(pSPIx->SPI_CR1 & (1<<SPI_CR1_DFF))			//16 bit data Tx
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d00b      	beq.n	8000a2c <SPI_TxDataB+0x42>
		{
			pSPIx->SPI_DR = *((uint16_t*)pTxBuff);		//DR is 16 bits
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	881b      	ldrh	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	60da      	str	r2, [r3, #12]
			(uint16_t*)pTxBuff++;
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	3301      	adds	r3, #1
 8000a22:	60bb      	str	r3, [r7, #8]
			len -= 2;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3b02      	subs	r3, #2
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	e00a      	b.n	8000a42 <SPI_TxDataB+0x58>
		}
		else	//8 bit data Tx
		{
			pSPIx->SPI_DR = *pTxBuff;		//DR is 8 bits
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	461a      	mov	r2, r3
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	60da      	str	r2, [r3, #12]
			pTxBuff++;
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	60bb      	str	r3, [r7, #8]
			len--;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	607b      	str	r3, [r7, #4]
	while(len>0)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d1d7      	bne.n	80009f8 <SPI_TxDataB+0xe>
		}
	}
}
 8000a48:	bf00      	nop
 8000a4a:	bf00      	nop
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <SPI_EN>:
 *
 * 	@notes					: Enables/Disables SPI by setting the SPE bit
 * 							  Call the function after all the register config
 */
void SPI_EN(SPI_RegDef_t *pSPIx,uint8_t EN_DI)
{
 8000a52:	b480      	push	{r7}
 8000a54:	b083      	sub	sp, #12
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
 8000a5a:	460b      	mov	r3, r1
 8000a5c:	70fb      	strb	r3, [r7, #3]
	pSPIx->SPI_CR1 &= ~(1<<SPI_CR1_SPE);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	601a      	str	r2, [r3, #0]
	if(EN_DI==ENABLE)
 8000a6a:	78fb      	ldrb	r3, [r7, #3]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d105      	bne.n	8000a7c <SPI_EN+0x2a>
		(pSPIx->SPI_CR1) |= (1<<SPI_CR1_SPE);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	601a      	str	r2, [r3, #0]
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <SPI_SSOEConfig>:
 * 	@return					: void
 *
 * 	@notes					: Enables the output by setting the SSOE bit of SPI_CR2
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EN_DI)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	70fb      	strb	r3, [r7, #3]
	if(EN_DI==ENABLE)
 8000a94:	78fb      	ldrb	r3, [r7, #3]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d106      	bne.n	8000aa8 <SPI_SSOEConfig+0x20>
		(pSPIx->SPI_CR2) |= (1<<SPI_CR2_SSOE);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f043 0204 	orr.w	r2, r3, #4
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	605a      	str	r2, [r3, #4]
	else if(EN_DI == DISABLE)
		(pSPIx->SPI_CR2) &= ~(1<<SPI_CR2_SSOE);
}
 8000aa6:	e008      	b.n	8000aba <SPI_SSOEConfig+0x32>
	else if(EN_DI == DISABLE)
 8000aa8:	78fb      	ldrb	r3, [r7, #3]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d105      	bne.n	8000aba <SPI_SSOEConfig+0x32>
		(pSPIx->SPI_CR2) &= ~(1<<SPI_CR2_SSOE);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f023 0204 	bic.w	r2, r3, #4
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	605a      	str	r2, [r3, #4]
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <FlagStatus>:
 *
 * 	@notes					: Checks if a bit
 */

uint8_t FlagStatus(SPI_RegDef_t *pSPIx, uint32_t flag)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	6039      	str	r1, [r7, #0]
	if((pSPIx->SPI_SR) & flag)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	689a      	ldr	r2, [r3, #8]
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <FlagStatus+0x1a>
		return SET;
 8000adc:	2301      	movs	r3, #1
 8000ade:	e000      	b.n	8000ae2 <FlagStatus+0x1c>
	return RESET;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
	...

08000af0 <delay>:
void GPIO_Config();
void SPI_Config();
void delay();

void delay()
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
	for(int i=0;i<500000;i++);
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	e002      	b.n	8000b02 <delay+0x12>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3301      	adds	r3, #1
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <delay+0x28>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	ddf8      	ble.n	8000afc <delay+0xc>
}
 8000b0a:	bf00      	nop
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	0007a11f 	.word	0x0007a11f

08000b1c <GPIO_Config>:

void GPIO_Config()
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
	GPIOx_Handle_t gpio;
	gpio.pGPIOx = GPIOD;
 8000b22:	4b28      	ldr	r3, [pc, #160]	; (8000bc4 <GPIO_Config+0xa8>)
 8000b24:	607b      	str	r3, [r7, #4]

	//GPIOD PCLK ON
	GPIO_PCLK_Ctrl(GPIOD,ENABLE);
 8000b26:	2101      	movs	r1, #1
 8000b28:	4826      	ldr	r0, [pc, #152]	; (8000bc4 <GPIO_Config+0xa8>)
 8000b2a:	f7ff fb65 	bl	80001f8 <GPIO_PCLK_Ctrl>
	GPIO_PCLK_Ctrl(GPIOB, ENABLE);
 8000b2e:	2101      	movs	r1, #1
 8000b30:	4825      	ldr	r0, [pc, #148]	; (8000bc8 <GPIO_Config+0xac>)
 8000b32:	f7ff fb61 	bl	80001f8 <GPIO_PCLK_Ctrl>

	/*GPIO PD2*/
	//GPIO_PinConfig_t gpio.GPIO_PinConfig = gpio.GPIO_PinConfig;
	//GPIO Pin Configuration
	gpio.GPIO_PinConfig.GPIO_PinNo = GPIO_PINNO_2;
 8000b36:	2302      	movs	r3, #2
 8000b38:	723b      	strb	r3, [r7, #8]
	gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	727b      	strb	r3, [r7, #9]
	gpio.GPIO_PinConfig.GPIO_PinOPtype = GPIO_PP;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	733b      	strb	r3, [r7, #12]
	gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_PINSPEED_HIGH;
 8000b42:	2302      	movs	r3, #2
 8000b44:	72bb      	strb	r3, [r7, #10]
	gpio.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_PIN_NPUPD;
 8000b46:	2300      	movs	r3, #0
 8000b48:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(&gpio);
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fc3f 	bl	80003d0 <GPIO_Init>

	/*GPIO PD0*/
	//GPIO_PinConfig_t gpio.GPIO_PinConfig = gpio.GPIO_PinConfig;
	//GPIO Pin Configuration
	gpio.GPIO_PinConfig.GPIO_PinNo = GPIO_PINNO_0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	723b      	strb	r3, [r7, #8]
	gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000b56:	2300      	movs	r3, #0
 8000b58:	727b      	strb	r3, [r7, #9]
	//gpio.GPIO_PinConfig.GPIO_PinOPtype = GPIO_PP;
	gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_PINSPEED_HIGH;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	72bb      	strb	r3, [r7, #10]
	gpio.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_PIN_NPUPD;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(&gpio);
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fc33 	bl	80003d0 <GPIO_Init>

	//GPIOB Pin Config Tx Comm
	gpio.pGPIOx = GPIOB;
 8000b6a:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <GPIO_Config+0xac>)
 8000b6c:	607b      	str	r3, [r7, #4]
	gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_AF;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	727b      	strb	r3, [r7, #9]
	gpio.GPIO_PinConfig.GPIO_PinOPtype = GPIO_PP;
 8000b72:	2300      	movs	r3, #0
 8000b74:	733b      	strb	r3, [r7, #12]
	gpio.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_PIN_NPUPD;
 8000b76:	2300      	movs	r3, #0
 8000b78:	72fb      	strb	r3, [r7, #11]
	gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_PINSPEED_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	72bb      	strb	r3, [r7, #10]
	gpio.GPIO_PinConfig.GPIO_PinAltFunc = 5;
 8000b7e:	2305      	movs	r3, #5
 8000b80:	737b      	strb	r3, [r7, #13]

	//NSS
	gpio.GPIO_PinConfig.GPIO_PinNo = GPIO_PINNO_9;
 8000b82:	2309      	movs	r3, #9
 8000b84:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&gpio);
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fc21 	bl	80003d0 <GPIO_Init>

	//SCK
	gpio.GPIO_PinConfig.GPIO_PinNo = GPIO_PINNO_10;
 8000b8e:	230a      	movs	r3, #10
 8000b90:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&gpio);
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fc1b 	bl	80003d0 <GPIO_Init>

	//MISO
	gpio.GPIO_PinConfig.GPIO_PinNo = GPIO_PINNO_14;
 8000b9a:	230e      	movs	r3, #14
 8000b9c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&gpio);
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fc15 	bl	80003d0 <GPIO_Init>

	//MOSI
	gpio.GPIO_PinConfig.GPIO_PinNo = GPIO_PINNO_15;
 8000ba6:	230f      	movs	r3, #15
 8000ba8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&gpio);
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fc0f 	bl	80003d0 <GPIO_Init>

	//Configure
	GPIO_Init(&gpio);
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fc0b 	bl	80003d0 <GPIO_Init>
}
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40020c00 	.word	0x40020c00
 8000bc8:	40020400 	.word	0x40020400

08000bcc <SPI_Config>:

void SPI_Config()
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
	SPIx_Handle_t spi;

	SPI_PCLK_Ctrl(SPI2, ENABLE);
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	480d      	ldr	r0, [pc, #52]	; (8000c0c <SPI_Config+0x40>)
 8000bd6:	f7ff fe17 	bl	8000808 <SPI_PCLK_Ctrl>

	spi.pSPIx = SPI2;
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <SPI_Config+0x40>)
 8000bdc:	607b      	str	r3, [r7, #4]
	spi.SPIx_PinConfig.SPI_DeviceConfig = MASTER;
 8000bde:	2301      	movs	r3, #1
 8000be0:	723b      	strb	r3, [r7, #8]
	spi.SPIx_PinConfig.SPI_BusConfig = BUSCONF_FULLDUP;
 8000be2:	2300      	movs	r3, #0
 8000be4:	727b      	strb	r3, [r7, #9]
	spi.SPIx_PinConfig.SPI_ClkSpeed = BRDIV8;				//2MHz
 8000be6:	2302      	movs	r3, #2
 8000be8:	72bb      	strb	r3, [r7, #10]
	spi.SPIx_PinConfig.SPI_CPOL = ZERO_IDLE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	733b      	strb	r3, [r7, #12]
	spi.SPIx_PinConfig.SPI_CPHA = FIRSTCLK_CAP;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	737b      	strb	r3, [r7, #13]
	spi.SPIx_PinConfig.SPI_DFF = DFF8;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	72fb      	strb	r3, [r7, #11]
	spi.SPIx_PinConfig.SPI_SSM = SSM_DI;					//Hardware management
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&spi);
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fe5f 	bl	80008c0 <SPI_Init>
}
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40003800 	.word	0x40003800

08000c10 <main>:

int main(void)
{
 8000c10:	b5b0      	push	{r4, r5, r7, lr}
 8000c12:	b092      	sub	sp, #72	; 0x48
 8000c14:	af00      	add	r7, sp, #0
	GPIO_Config();
 8000c16:	f7ff ff81 	bl	8000b1c <GPIO_Config>
	SPI_Config();
 8000c1a:	f7ff ffd7 	bl	8000bcc <SPI_Config>

	SPI_SSOEConfig(SPI2, ENABLE);	//SSOE : LOW
 8000c1e:	2101      	movs	r1, #1
 8000c20:	4828      	ldr	r0, [pc, #160]	; (8000cc4 <main+0xb4>)
 8000c22:	f7ff ff31 	bl	8000a88 <SPI_SSOEConfig>

	char data[] = "Testing Long String Serial Peripheral Interface Transmission";
 8000c26:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <main+0xb8>)
 8000c28:	f107 0408 	add.w	r4, r7, #8
 8000c2c:	461d      	mov	r5, r3
 8000c2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c3a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c3e:	c407      	stmia	r4!, {r0, r1, r2}
 8000c40:	7023      	strb	r3, [r4, #0]

	GPIO_OPinWrite(GPIOD, GPIO_PINNO_2, RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2102      	movs	r1, #2
 8000c46:	4821      	ldr	r0, [pc, #132]	; (8000ccc <main+0xbc>)
 8000c48:	f7ff fd62 	bl	8000710 <GPIO_OPinWrite>

	while(1)
	{
		while(!(GPIO_IPinRead(GPIOD, GPIO_PINNO_0)))	//Wait till PIN0 Turns HIGH
 8000c4c:	e004      	b.n	8000c58 <main+0x48>
			GPIO_OPinWrite(GPIOD, GPIO_PINNO_2, RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2102      	movs	r1, #2
 8000c52:	481e      	ldr	r0, [pc, #120]	; (8000ccc <main+0xbc>)
 8000c54:	f7ff fd5c 	bl	8000710 <GPIO_OPinWrite>
		while(!(GPIO_IPinRead(GPIOD, GPIO_PINNO_0)))	//Wait till PIN0 Turns HIGH
 8000c58:	2100      	movs	r1, #0
 8000c5a:	481c      	ldr	r0, [pc, #112]	; (8000ccc <main+0xbc>)
 8000c5c:	f7ff fd42 	bl	80006e4 <GPIO_IPinRead>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d0f3      	beq.n	8000c4e <main+0x3e>

		GPIO_OPinWrite(GPIOD, GPIO_PINNO_2, SET);
 8000c66:	2201      	movs	r2, #1
 8000c68:	2102      	movs	r1, #2
 8000c6a:	4818      	ldr	r0, [pc, #96]	; (8000ccc <main+0xbc>)
 8000c6c:	f7ff fd50 	bl	8000710 <GPIO_OPinWrite>
		delay();
 8000c70:	f7ff ff3e 	bl	8000af0 <delay>

		SPI_EN(SPI2, ENABLE);							//SPE=1 : NSS pulled LOW
 8000c74:	2101      	movs	r1, #1
 8000c76:	4813      	ldr	r0, [pc, #76]	; (8000cc4 <main+0xb4>)
 8000c78:	f7ff feeb 	bl	8000a52 <SPI_EN>

		uint8_t dataLen = strlen(data);					//calculate data length
 8000c7c:	f107 0308 	add.w	r3, r7, #8
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fab1 	bl	80001e8 <strlen>
 8000c86:	4603      	mov	r3, r0
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	71fb      	strb	r3, [r7, #7]
		SPI_TxDataB(SPI2, &dataLen, 1);					//Tx Data length, passing data to a pointer *pTxBuff
 8000c8c:	1dfb      	adds	r3, r7, #7
 8000c8e:	2201      	movs	r2, #1
 8000c90:	4619      	mov	r1, r3
 8000c92:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <main+0xb4>)
 8000c94:	f7ff fea9 	bl	80009ea <SPI_TxDataB>

		SPI_TxDataB(SPI2,(uint8_t*)data,dataLen);	//Tx actual Data, passing data to a pointer *pTxBuff
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	f107 0308 	add.w	r3, r7, #8
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4808      	ldr	r0, [pc, #32]	; (8000cc4 <main+0xb4>)
 8000ca4:	f7ff fea1 	bl	80009ea <SPI_TxDataB>

		while(FlagStatus(SPI2, SPI_SR_BSYM));
 8000ca8:	bf00      	nop
 8000caa:	2180      	movs	r1, #128	; 0x80
 8000cac:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <main+0xb4>)
 8000cae:	f7ff ff0a 	bl	8000ac6 <FlagStatus>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d1f8      	bne.n	8000caa <main+0x9a>

		SPI_EN(SPI2, DISABLE);
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <main+0xb4>)
 8000cbc:	f7ff fec9 	bl	8000a52 <SPI_EN>
	{
 8000cc0:	e7c4      	b.n	8000c4c <main+0x3c>
 8000cc2:	bf00      	nop
 8000cc4:	40003800 	.word	0x40003800
 8000cc8:	08000d84 	.word	0x08000d84
 8000ccc:	40020c00 	.word	0x40020c00

08000cd0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cd0:	480d      	ldr	r0, [pc, #52]	; (8000d08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cd2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cd4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd8:	480c      	ldr	r0, [pc, #48]	; (8000d0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000cda:	490d      	ldr	r1, [pc, #52]	; (8000d10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <LoopForever+0xe>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce0:	e002      	b.n	8000ce8 <LoopCopyDataInit>

08000ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce6:	3304      	adds	r3, #4

08000ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cec:	d3f9      	bcc.n	8000ce2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cee:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf0:	4c0a      	ldr	r4, [pc, #40]	; (8000d1c <LoopForever+0x16>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf4:	e001      	b.n	8000cfa <LoopFillZerobss>

08000cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf8:	3204      	adds	r2, #4

08000cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cfc:	d3fb      	bcc.n	8000cf6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cfe:	f000 f811 	bl	8000d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d02:	f7ff ff85 	bl	8000c10 <main>

08000d06 <LoopForever>:

LoopForever:
    b LoopForever
 8000d06:	e7fe      	b.n	8000d06 <LoopForever>
  ldr   r0, =_estack
 8000d08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d10:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000d14:	08000dcc 	.word	0x08000dcc
  ldr r2, =_sbss
 8000d18:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000d1c:	2000001c 	.word	0x2000001c

08000d20 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC_IRQHandler>
	...

08000d24 <__libc_init_array>:
 8000d24:	b570      	push	{r4, r5, r6, lr}
 8000d26:	4d0d      	ldr	r5, [pc, #52]	; (8000d5c <__libc_init_array+0x38>)
 8000d28:	4c0d      	ldr	r4, [pc, #52]	; (8000d60 <__libc_init_array+0x3c>)
 8000d2a:	1b64      	subs	r4, r4, r5
 8000d2c:	10a4      	asrs	r4, r4, #2
 8000d2e:	2600      	movs	r6, #0
 8000d30:	42a6      	cmp	r6, r4
 8000d32:	d109      	bne.n	8000d48 <__libc_init_array+0x24>
 8000d34:	4d0b      	ldr	r5, [pc, #44]	; (8000d64 <__libc_init_array+0x40>)
 8000d36:	4c0c      	ldr	r4, [pc, #48]	; (8000d68 <__libc_init_array+0x44>)
 8000d38:	f000 f818 	bl	8000d6c <_init>
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	10a4      	asrs	r4, r4, #2
 8000d40:	2600      	movs	r6, #0
 8000d42:	42a6      	cmp	r6, r4
 8000d44:	d105      	bne.n	8000d52 <__libc_init_array+0x2e>
 8000d46:	bd70      	pop	{r4, r5, r6, pc}
 8000d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d4c:	4798      	blx	r3
 8000d4e:	3601      	adds	r6, #1
 8000d50:	e7ee      	b.n	8000d30 <__libc_init_array+0xc>
 8000d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d56:	4798      	blx	r3
 8000d58:	3601      	adds	r6, #1
 8000d5a:	e7f2      	b.n	8000d42 <__libc_init_array+0x1e>
 8000d5c:	08000dc4 	.word	0x08000dc4
 8000d60:	08000dc4 	.word	0x08000dc4
 8000d64:	08000dc4 	.word	0x08000dc4
 8000d68:	08000dc8 	.word	0x08000dc8

08000d6c <_init>:
 8000d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d6e:	bf00      	nop
 8000d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d72:	bc08      	pop	{r3}
 8000d74:	469e      	mov	lr, r3
 8000d76:	4770      	bx	lr

08000d78 <_fini>:
 8000d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d7a:	bf00      	nop
 8000d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d7e:	bc08      	pop	{r3}
 8000d80:	469e      	mov	lr, r3
 8000d82:	4770      	bx	lr
