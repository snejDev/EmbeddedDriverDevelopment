
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002220  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080023d0  080023d0  000123d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024a8  080024a8  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080024a8  080024a8  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024a8  080024a8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024a8  080024a8  000124a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024ac  080024ac  000124ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080024b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000030  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000094  20000094  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001c00  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000721  00000000  00000000  00021c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000218  00000000  00000000  000223b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000238  00000000  00000000  000225d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000033c8  00000000  00000000  00022808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002f8d  00000000  00000000  00025bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b34e  00000000  00000000  00028b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00033eab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000fb0  00000000  00000000  00033efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080023b8 	.word	0x080023b8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	080023b8 	.word	0x080023b8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <GPIO_PCLK_Ctrl>:
 *
 * 	@notes					: API for enabling and disabling the clock
 */

void GPIO_PCLK_Ctrl(GPIO_RegDef_t *pGPIOx, uint8_t EN_DI)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	460b      	mov	r3, r1
 80002aa:	70fb      	strb	r3, [r7, #3]
	if(EN_DI==ENABLE)
 80002ac:	78fb      	ldrb	r3, [r7, #3]
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d162      	bne.n	8000378 <GPIO_PCLK_Ctrl+0xd8>
	{
		if(pGPIOx==GPIOA)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4a66      	ldr	r2, [pc, #408]	; (8000450 <GPIO_PCLK_Ctrl+0x1b0>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d106      	bne.n	80002c8 <GPIO_PCLK_Ctrl+0x28>
			GPIOA_PCLK_EN();
 80002ba:	4b66      	ldr	r3, [pc, #408]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 80002bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002be:	4a65      	ldr	r2, [pc, #404]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 80002c0:	f043 0301 	orr.w	r3, r3, #1
 80002c4:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx==GPIOH)
			GPIOH_PCLK_DI();
		else if(pGPIOx==GPIOI)
			GPIOI_PCLK_DI();
	}
}
 80002c6:	e0bc      	b.n	8000442 <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOB)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	4a63      	ldr	r2, [pc, #396]	; (8000458 <GPIO_PCLK_Ctrl+0x1b8>)
 80002cc:	4293      	cmp	r3, r2
 80002ce:	d106      	bne.n	80002de <GPIO_PCLK_Ctrl+0x3e>
			GPIOB_PCLK_EN();
 80002d0:	4b60      	ldr	r3, [pc, #384]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 80002d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d4:	4a5f      	ldr	r2, [pc, #380]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 80002d6:	f043 0302 	orr.w	r3, r3, #2
 80002da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002dc:	e0b1      	b.n	8000442 <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOC)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	4a5e      	ldr	r2, [pc, #376]	; (800045c <GPIO_PCLK_Ctrl+0x1bc>)
 80002e2:	4293      	cmp	r3, r2
 80002e4:	d106      	bne.n	80002f4 <GPIO_PCLK_Ctrl+0x54>
			GPIOC_PCLK_EN();
 80002e6:	4b5b      	ldr	r3, [pc, #364]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 80002e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ea:	4a5a      	ldr	r2, [pc, #360]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 80002ec:	f043 0304 	orr.w	r3, r3, #4
 80002f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f2:	e0a6      	b.n	8000442 <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOD)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4a5a      	ldr	r2, [pc, #360]	; (8000460 <GPIO_PCLK_Ctrl+0x1c0>)
 80002f8:	4293      	cmp	r3, r2
 80002fa:	d106      	bne.n	800030a <GPIO_PCLK_Ctrl+0x6a>
			GPIOD_PCLK_EN();
 80002fc:	4b55      	ldr	r3, [pc, #340]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 80002fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000300:	4a54      	ldr	r2, [pc, #336]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 8000302:	f043 0308 	orr.w	r3, r3, #8
 8000306:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000308:	e09b      	b.n	8000442 <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOE)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4a55      	ldr	r2, [pc, #340]	; (8000464 <GPIO_PCLK_Ctrl+0x1c4>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d106      	bne.n	8000320 <GPIO_PCLK_Ctrl+0x80>
			GPIOE_PCLK_EN();
 8000312:	4b50      	ldr	r3, [pc, #320]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 8000314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000316:	4a4f      	ldr	r2, [pc, #316]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 8000318:	f043 0310 	orr.w	r3, r3, #16
 800031c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800031e:	e090      	b.n	8000442 <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOF)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	4a51      	ldr	r2, [pc, #324]	; (8000468 <GPIO_PCLK_Ctrl+0x1c8>)
 8000324:	4293      	cmp	r3, r2
 8000326:	d106      	bne.n	8000336 <GPIO_PCLK_Ctrl+0x96>
			GPIOF_PCLK_EN();
 8000328:	4b4a      	ldr	r3, [pc, #296]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 800032a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032c:	4a49      	ldr	r2, [pc, #292]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 800032e:	f043 0320 	orr.w	r3, r3, #32
 8000332:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000334:	e085      	b.n	8000442 <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOG)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4a4c      	ldr	r2, [pc, #304]	; (800046c <GPIO_PCLK_Ctrl+0x1cc>)
 800033a:	4293      	cmp	r3, r2
 800033c:	d106      	bne.n	800034c <GPIO_PCLK_Ctrl+0xac>
			GPIOG_PCLK_EN();
 800033e:	4b45      	ldr	r3, [pc, #276]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 8000340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000342:	4a44      	ldr	r2, [pc, #272]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 8000344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000348:	6313      	str	r3, [r2, #48]	; 0x30
}
 800034a:	e07a      	b.n	8000442 <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOH)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4a48      	ldr	r2, [pc, #288]	; (8000470 <GPIO_PCLK_Ctrl+0x1d0>)
 8000350:	4293      	cmp	r3, r2
 8000352:	d106      	bne.n	8000362 <GPIO_PCLK_Ctrl+0xc2>
			GPIOH_PCLK_EN();
 8000354:	4b3f      	ldr	r3, [pc, #252]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 8000356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000358:	4a3e      	ldr	r2, [pc, #248]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 800035a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800035e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000360:	e06f      	b.n	8000442 <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOI)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4a43      	ldr	r2, [pc, #268]	; (8000474 <GPIO_PCLK_Ctrl+0x1d4>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d16b      	bne.n	8000442 <GPIO_PCLK_Ctrl+0x1a2>
			GPIOI_PCLK_EN();
 800036a:	4b3a      	ldr	r3, [pc, #232]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 800036c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036e:	4a39      	ldr	r2, [pc, #228]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 8000370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000374:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000376:	e064      	b.n	8000442 <GPIO_PCLK_Ctrl+0x1a2>
	else if(EN_DI==DISABLE)
 8000378:	78fb      	ldrb	r3, [r7, #3]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d161      	bne.n	8000442 <GPIO_PCLK_Ctrl+0x1a2>
		if(pGPIOx==GPIOA)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4a33      	ldr	r2, [pc, #204]	; (8000450 <GPIO_PCLK_Ctrl+0x1b0>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d106      	bne.n	8000394 <GPIO_PCLK_Ctrl+0xf4>
			GPIOA_PCLK_DI();
 8000386:	4b33      	ldr	r3, [pc, #204]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 8000388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038a:	4a32      	ldr	r2, [pc, #200]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 800038c:	f023 0301 	bic.w	r3, r3, #1
 8000390:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000392:	e056      	b.n	8000442 <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOB)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a30      	ldr	r2, [pc, #192]	; (8000458 <GPIO_PCLK_Ctrl+0x1b8>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d106      	bne.n	80003aa <GPIO_PCLK_Ctrl+0x10a>
			GPIOB_PCLK_DI();
 800039c:	4b2d      	ldr	r3, [pc, #180]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 800039e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a0:	4a2c      	ldr	r2, [pc, #176]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 80003a2:	f023 0302 	bic.w	r3, r3, #2
 80003a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a8:	e04b      	b.n	8000442 <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOC)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4a2b      	ldr	r2, [pc, #172]	; (800045c <GPIO_PCLK_Ctrl+0x1bc>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d106      	bne.n	80003c0 <GPIO_PCLK_Ctrl+0x120>
			GPIOC_PCLK_DI();
 80003b2:	4b28      	ldr	r3, [pc, #160]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 80003b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b6:	4a27      	ldr	r2, [pc, #156]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 80003b8:	f023 0304 	bic.w	r3, r3, #4
 80003bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003be:	e040      	b.n	8000442 <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOD)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4a27      	ldr	r2, [pc, #156]	; (8000460 <GPIO_PCLK_Ctrl+0x1c0>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d106      	bne.n	80003d6 <GPIO_PCLK_Ctrl+0x136>
			GPIOD_PCLK_DI();
 80003c8:	4b22      	ldr	r3, [pc, #136]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 80003ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003cc:	4a21      	ldr	r2, [pc, #132]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 80003ce:	f023 0308 	bic.w	r3, r3, #8
 80003d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d4:	e035      	b.n	8000442 <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOE)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a22      	ldr	r2, [pc, #136]	; (8000464 <GPIO_PCLK_Ctrl+0x1c4>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d106      	bne.n	80003ec <GPIO_PCLK_Ctrl+0x14c>
			GPIOE_PCLK_DI();
 80003de:	4b1d      	ldr	r3, [pc, #116]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 80003e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e2:	4a1c      	ldr	r2, [pc, #112]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 80003e4:	f023 0310 	bic.w	r3, r3, #16
 80003e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ea:	e02a      	b.n	8000442 <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOF)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a1e      	ldr	r2, [pc, #120]	; (8000468 <GPIO_PCLK_Ctrl+0x1c8>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d106      	bne.n	8000402 <GPIO_PCLK_Ctrl+0x162>
			GPIOF_PCLK_DI();
 80003f4:	4b17      	ldr	r3, [pc, #92]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 80003f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f8:	4a16      	ldr	r2, [pc, #88]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 80003fa:	f023 0320 	bic.w	r3, r3, #32
 80003fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000400:	e01f      	b.n	8000442 <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOG)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4a19      	ldr	r2, [pc, #100]	; (800046c <GPIO_PCLK_Ctrl+0x1cc>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d106      	bne.n	8000418 <GPIO_PCLK_Ctrl+0x178>
			GPIOG_PCLK_DI();
 800040a:	4b12      	ldr	r3, [pc, #72]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 800040c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040e:	4a11      	ldr	r2, [pc, #68]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 8000410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000414:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000416:	e014      	b.n	8000442 <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOH)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4a15      	ldr	r2, [pc, #84]	; (8000470 <GPIO_PCLK_Ctrl+0x1d0>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d106      	bne.n	800042e <GPIO_PCLK_Ctrl+0x18e>
			GPIOH_PCLK_DI();
 8000420:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 8000422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000424:	4a0b      	ldr	r2, [pc, #44]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 8000426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800042a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800042c:	e009      	b.n	8000442 <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOI)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4a10      	ldr	r2, [pc, #64]	; (8000474 <GPIO_PCLK_Ctrl+0x1d4>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d105      	bne.n	8000442 <GPIO_PCLK_Ctrl+0x1a2>
			GPIOI_PCLK_DI();
 8000436:	4b07      	ldr	r3, [pc, #28]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 8000438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043a:	4a06      	ldr	r2, [pc, #24]	; (8000454 <GPIO_PCLK_Ctrl+0x1b4>)
 800043c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000440:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	40020000 	.word	0x40020000
 8000454:	40023800 	.word	0x40023800
 8000458:	40020400 	.word	0x40020400
 800045c:	40020800 	.word	0x40020800
 8000460:	40020c00 	.word	0x40020c00
 8000464:	40021000 	.word	0x40021000
 8000468:	40021400 	.word	0x40021400
 800046c:	40021800 	.word	0x40021800
 8000470:	40021c00 	.word	0x40021c00
 8000474:	40022000 	.word	0x40022000

08000478 <GPIO_Init>:
 * 	@return					: void
 *
 * 	@notes					: API for initializing the GPIO pins
 */
void GPIO_Init(GPIOx_Handle_t *pGPIOx_Handle)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	uint32_t temp;

	//Pin mode configuration
	if(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinMode<=GPIO_MODE_AN)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	795b      	ldrb	r3, [r3, #5]
 8000484:	2b03      	cmp	r3, #3
 8000486:	d820      	bhi.n	80004ca <GPIO_Init+0x52>
	{
		//Non-Interrupt modes
		temp = (pGPIOx_Handle->GPIO_PinConfig.GPIO_PinMode)<<(2*(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	795b      	ldrb	r3, [r3, #5]
 800048c:	461a      	mov	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	791b      	ldrb	r3, [r3, #4]
 8000492:	005b      	lsls	r3, r3, #1
 8000494:	fa02 f303 	lsl.w	r3, r2, r3
 8000498:	60bb      	str	r3, [r7, #8]
		pGPIOx_Handle->pGPIOx->MODER &= ~((0x3)<<(2*(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo)));
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	681a      	ldr	r2, [r3, #0]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	791b      	ldrb	r3, [r3, #4]
 80004a4:	005b      	lsls	r3, r3, #1
 80004a6:	2103      	movs	r1, #3
 80004a8:	fa01 f303 	lsl.w	r3, r1, r3
 80004ac:	43db      	mvns	r3, r3
 80004ae:	4619      	mov	r1, r3
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	400a      	ands	r2, r1
 80004b6:	601a      	str	r2, [r3, #0]
		pGPIOx_Handle->pGPIOx->MODER |= temp;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	6819      	ldr	r1, [r3, #0]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	68ba      	ldr	r2, [r7, #8]
 80004c4:	430a      	orrs	r2, r1
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	e0c8      	b.n	800065c <GPIO_Init+0x1e4>
	{
		//Interrupt Mode

		/**EXTI Line Configuration**/
		//IT_RT -  Interrupt Rising Edge Trigger
		if(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RT)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	795b      	ldrb	r3, [r3, #5]
 80004ce:	2b04      	cmp	r3, #4
 80004d0:	d122      	bne.n	8000518 <GPIO_Init+0xa0>
		{
			//Configure RTSR
			EXTI->EXTI_RTSR &= ~(1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));
 80004d2:	4b5d      	ldr	r3, [pc, #372]	; (8000648 <GPIO_Init+0x1d0>)
 80004d4:	689b      	ldr	r3, [r3, #8]
 80004d6:	687a      	ldr	r2, [r7, #4]
 80004d8:	7912      	ldrb	r2, [r2, #4]
 80004da:	4611      	mov	r1, r2
 80004dc:	2201      	movs	r2, #1
 80004de:	408a      	lsls	r2, r1
 80004e0:	43d2      	mvns	r2, r2
 80004e2:	4611      	mov	r1, r2
 80004e4:	4a58      	ldr	r2, [pc, #352]	; (8000648 <GPIO_Init+0x1d0>)
 80004e6:	400b      	ands	r3, r1
 80004e8:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_RTSR |= 1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo);
 80004ea:	4b57      	ldr	r3, [pc, #348]	; (8000648 <GPIO_Init+0x1d0>)
 80004ec:	689b      	ldr	r3, [r3, #8]
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	7912      	ldrb	r2, [r2, #4]
 80004f2:	4611      	mov	r1, r2
 80004f4:	2201      	movs	r2, #1
 80004f6:	408a      	lsls	r2, r1
 80004f8:	4611      	mov	r1, r2
 80004fa:	4a53      	ldr	r2, [pc, #332]	; (8000648 <GPIO_Init+0x1d0>)
 80004fc:	430b      	orrs	r3, r1
 80004fe:	6093      	str	r3, [r2, #8]
			//Clear FTSR
			EXTI->EXTI_FTSR &=  ~(1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));
 8000500:	4b51      	ldr	r3, [pc, #324]	; (8000648 <GPIO_Init+0x1d0>)
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	7912      	ldrb	r2, [r2, #4]
 8000508:	4611      	mov	r1, r2
 800050a:	2201      	movs	r2, #1
 800050c:	408a      	lsls	r2, r1
 800050e:	43d2      	mvns	r2, r2
 8000510:	4611      	mov	r1, r2
 8000512:	4a4d      	ldr	r2, [pc, #308]	; (8000648 <GPIO_Init+0x1d0>)
 8000514:	400b      	ands	r3, r1
 8000516:	60d3      	str	r3, [r2, #12]

		}
		//IT_FT -  Interrupt Falling Edge Trigger
		if(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_FT)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	795b      	ldrb	r3, [r3, #5]
 800051c:	2b05      	cmp	r3, #5
 800051e:	d122      	bne.n	8000566 <GPIO_Init+0xee>
		{
			//Configure FTSR
			EXTI->EXTI_FTSR &= ~(1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));
 8000520:	4b49      	ldr	r3, [pc, #292]	; (8000648 <GPIO_Init+0x1d0>)
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	7912      	ldrb	r2, [r2, #4]
 8000528:	4611      	mov	r1, r2
 800052a:	2201      	movs	r2, #1
 800052c:	408a      	lsls	r2, r1
 800052e:	43d2      	mvns	r2, r2
 8000530:	4611      	mov	r1, r2
 8000532:	4a45      	ldr	r2, [pc, #276]	; (8000648 <GPIO_Init+0x1d0>)
 8000534:	400b      	ands	r3, r1
 8000536:	60d3      	str	r3, [r2, #12]
			EXTI->EXTI_FTSR |= 1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo);
 8000538:	4b43      	ldr	r3, [pc, #268]	; (8000648 <GPIO_Init+0x1d0>)
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	687a      	ldr	r2, [r7, #4]
 800053e:	7912      	ldrb	r2, [r2, #4]
 8000540:	4611      	mov	r1, r2
 8000542:	2201      	movs	r2, #1
 8000544:	408a      	lsls	r2, r1
 8000546:	4611      	mov	r1, r2
 8000548:	4a3f      	ldr	r2, [pc, #252]	; (8000648 <GPIO_Init+0x1d0>)
 800054a:	430b      	orrs	r3, r1
 800054c:	60d3      	str	r3, [r2, #12]
			//Clear RTSR
			EXTI->EXTI_RTSR &=  ~(1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));
 800054e:	4b3e      	ldr	r3, [pc, #248]	; (8000648 <GPIO_Init+0x1d0>)
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	7912      	ldrb	r2, [r2, #4]
 8000556:	4611      	mov	r1, r2
 8000558:	2201      	movs	r2, #1
 800055a:	408a      	lsls	r2, r1
 800055c:	43d2      	mvns	r2, r2
 800055e:	4611      	mov	r1, r2
 8000560:	4a39      	ldr	r2, [pc, #228]	; (8000648 <GPIO_Init+0x1d0>)
 8000562:	400b      	ands	r3, r1
 8000564:	6093      	str	r3, [r2, #8]
		}
		//IT_RFT -  Interrupt Rising/Falling Edge Trigger
		if(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RFT)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	795b      	ldrb	r3, [r3, #5]
 800056a:	2b06      	cmp	r3, #6
 800056c:	d12d      	bne.n	80005ca <GPIO_Init+0x152>
		{
			//Configure RTSR
			EXTI->EXTI_RTSR &= ~(1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));
 800056e:	4b36      	ldr	r3, [pc, #216]	; (8000648 <GPIO_Init+0x1d0>)
 8000570:	689b      	ldr	r3, [r3, #8]
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	7912      	ldrb	r2, [r2, #4]
 8000576:	4611      	mov	r1, r2
 8000578:	2201      	movs	r2, #1
 800057a:	408a      	lsls	r2, r1
 800057c:	43d2      	mvns	r2, r2
 800057e:	4611      	mov	r1, r2
 8000580:	4a31      	ldr	r2, [pc, #196]	; (8000648 <GPIO_Init+0x1d0>)
 8000582:	400b      	ands	r3, r1
 8000584:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_RTSR |= 1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo);
 8000586:	4b30      	ldr	r3, [pc, #192]	; (8000648 <GPIO_Init+0x1d0>)
 8000588:	689b      	ldr	r3, [r3, #8]
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	7912      	ldrb	r2, [r2, #4]
 800058e:	4611      	mov	r1, r2
 8000590:	2201      	movs	r2, #1
 8000592:	408a      	lsls	r2, r1
 8000594:	4611      	mov	r1, r2
 8000596:	4a2c      	ldr	r2, [pc, #176]	; (8000648 <GPIO_Init+0x1d0>)
 8000598:	430b      	orrs	r3, r1
 800059a:	6093      	str	r3, [r2, #8]
			//Configure FTSR
			EXTI->EXTI_FTSR &= ~(1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));
 800059c:	4b2a      	ldr	r3, [pc, #168]	; (8000648 <GPIO_Init+0x1d0>)
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	7912      	ldrb	r2, [r2, #4]
 80005a4:	4611      	mov	r1, r2
 80005a6:	2201      	movs	r2, #1
 80005a8:	408a      	lsls	r2, r1
 80005aa:	43d2      	mvns	r2, r2
 80005ac:	4611      	mov	r1, r2
 80005ae:	4a26      	ldr	r2, [pc, #152]	; (8000648 <GPIO_Init+0x1d0>)
 80005b0:	400b      	ands	r3, r1
 80005b2:	60d3      	str	r3, [r2, #12]
			EXTI->EXTI_FTSR |= 1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo);
 80005b4:	4b24      	ldr	r3, [pc, #144]	; (8000648 <GPIO_Init+0x1d0>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	7912      	ldrb	r2, [r2, #4]
 80005bc:	4611      	mov	r1, r2
 80005be:	2201      	movs	r2, #1
 80005c0:	408a      	lsls	r2, r1
 80005c2:	4611      	mov	r1, r2
 80005c4:	4a20      	ldr	r2, [pc, #128]	; (8000648 <GPIO_Init+0x1d0>)
 80005c6:	430b      	orrs	r3, r1
 80005c8:	60d3      	str	r3, [r2, #12]
		}
		/**EXTI Line Configuration**/

		//Configure GPIO Port selection Register in SYSCFG
		SYSCFG_CLK_EN();																				//Enable SYSCFG Clock
 80005ca:	4b20      	ldr	r3, [pc, #128]	; (800064c <GPIO_Init+0x1d4>)
 80005cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ce:	4a1f      	ldr	r2, [pc, #124]	; (800064c <GPIO_Init+0x1d4>)
 80005d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d4:	6453      	str	r3, [r2, #68]	; 0x44
		uint8_t SYSCFG_ARRAY_INDEX = ((pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo)/4);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	791b      	ldrb	r3, [r3, #4]
 80005da:	089b      	lsrs	r3, r3, #2
 80005dc:	73fb      	strb	r3, [r7, #15]
		uint8_t SYSCFG_BIT_FIELD= ((pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo)%4)*4;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	791b      	ldrb	r3, [r3, #4]
 80005e2:	f003 0303 	and.w	r3, r3, #3
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	73bb      	strb	r3, [r7, #14]
		SYSCFG->SYSCFG_EXTICR[SYSCFG_ARRAY_INDEX] &= ~(Port_ConfigCode(GPIOA))<<(SYSCFG_BIT_FIELD);		//Clear the Bitfield
 80005ec:	4818      	ldr	r0, [pc, #96]	; (8000650 <GPIO_Init+0x1d8>)
 80005ee:	f000 f90b 	bl	8000808 <Port_ConfigCode>
 80005f2:	4603      	mov	r3, r0
 80005f4:	43da      	mvns	r2, r3
 80005f6:	7bbb      	ldrb	r3, [r7, #14]
 80005f8:	fa02 f103 	lsl.w	r1, r2, r3
 80005fc:	4a15      	ldr	r2, [pc, #84]	; (8000654 <GPIO_Init+0x1dc>)
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	3302      	adds	r3, #2
 8000602:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000606:	4608      	mov	r0, r1
 8000608:	4912      	ldr	r1, [pc, #72]	; (8000654 <GPIO_Init+0x1dc>)
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	4002      	ands	r2, r0
 800060e:	3302      	adds	r3, #2
 8000610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->SYSCFG_EXTICR[SYSCFG_ARRAY_INDEX] = Port_ConfigCode(GPIOD)<<(SYSCFG_BIT_FIELD);			//Assert the Port Config Code
 8000614:	4810      	ldr	r0, [pc, #64]	; (8000658 <GPIO_Init+0x1e0>)
 8000616:	f000 f8f7 	bl	8000808 <Port_ConfigCode>
 800061a:	4603      	mov	r3, r0
 800061c:	461a      	mov	r2, r3
 800061e:	7bbb      	ldrb	r3, [r7, #14]
 8000620:	fa02 f103 	lsl.w	r1, r2, r3
 8000624:	4a0b      	ldr	r2, [pc, #44]	; (8000654 <GPIO_Init+0x1dc>)
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	3302      	adds	r3, #2
 800062a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//Configure EXTI Interrupt delivery using IMR Register
		EXTI->EXTI_IMR |= 1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo);
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <GPIO_Init+0x1d0>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	7912      	ldrb	r2, [r2, #4]
 8000636:	4611      	mov	r1, r2
 8000638:	2201      	movs	r2, #1
 800063a:	408a      	lsls	r2, r1
 800063c:	4611      	mov	r1, r2
 800063e:	4a02      	ldr	r2, [pc, #8]	; (8000648 <GPIO_Init+0x1d0>)
 8000640:	430b      	orrs	r3, r1
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	e00a      	b.n	800065c <GPIO_Init+0x1e4>
 8000646:	bf00      	nop
 8000648:	40013c00 	.word	0x40013c00
 800064c:	40023800 	.word	0x40023800
 8000650:	40020000 	.word	0x40020000
 8000654:	40013800 	.word	0x40013800
 8000658:	40020c00 	.word	0x40020c00
	}

	//Speed configuration
	temp = (pGPIOx_Handle->GPIO_PinConfig.GPIO_PinSpeed)<<(2*pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	799b      	ldrb	r3, [r3, #6]
 8000660:	461a      	mov	r2, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	791b      	ldrb	r3, [r3, #4]
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	fa02 f303 	lsl.w	r3, r2, r3
 800066c:	60bb      	str	r3, [r7, #8]
	pGPIOx_Handle->pGPIOx->OSPEEDR &= ~((0x3)<<(2*pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));	  //Clearing the required bits
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	689a      	ldr	r2, [r3, #8]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	791b      	ldrb	r3, [r3, #4]
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	2103      	movs	r1, #3
 800067c:	fa01 f303 	lsl.w	r3, r1, r3
 8000680:	43db      	mvns	r3, r3
 8000682:	4619      	mov	r1, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	400a      	ands	r2, r1
 800068a:	609a      	str	r2, [r3, #8]
	pGPIOx_Handle->pGPIOx->OSPEEDR |= temp;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	6899      	ldr	r1, [r3, #8]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	68ba      	ldr	r2, [r7, #8]
 8000698:	430a      	orrs	r2, r1
 800069a:	609a      	str	r2, [r3, #8]

	//Output type configuration
	temp = (pGPIOx_Handle->GPIO_PinConfig.GPIO_PinOPtype)<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	7a1b      	ldrb	r3, [r3, #8]
 80006a0:	461a      	mov	r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	791b      	ldrb	r3, [r3, #4]
 80006a6:	fa02 f303 	lsl.w	r3, r2, r3
 80006aa:	60bb      	str	r3, [r7, #8]
	pGPIOx_Handle->pGPIOx->OTYPER &= ~((0x1)<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));	 //Clearing the required bits
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	685a      	ldr	r2, [r3, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	791b      	ldrb	r3, [r3, #4]
 80006b6:	4619      	mov	r1, r3
 80006b8:	2301      	movs	r3, #1
 80006ba:	408b      	lsls	r3, r1
 80006bc:	43db      	mvns	r3, r3
 80006be:	4619      	mov	r1, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	400a      	ands	r2, r1
 80006c6:	605a      	str	r2, [r3, #4]
	pGPIOx_Handle->pGPIOx->OTYPER |= temp;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	6859      	ldr	r1, [r3, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	68ba      	ldr	r2, [r7, #8]
 80006d4:	430a      	orrs	r2, r1
 80006d6:	605a      	str	r2, [r3, #4]

	//Pull-Up/Down configuration
	temp = (pGPIOx_Handle->GPIO_PinConfig.GPIO_PinPuPdCtrl)<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	79db      	ldrb	r3, [r3, #7]
 80006dc:	461a      	mov	r2, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	791b      	ldrb	r3, [r3, #4]
 80006e2:	fa02 f303 	lsl.w	r3, r2, r3
 80006e6:	60bb      	str	r3, [r7, #8]
	pGPIOx_Handle->pGPIOx->PUPDR &= ~((0x1)<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));		//Clearing the required bits
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	68da      	ldr	r2, [r3, #12]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	791b      	ldrb	r3, [r3, #4]
 80006f2:	4619      	mov	r1, r3
 80006f4:	2301      	movs	r3, #1
 80006f6:	408b      	lsls	r3, r1
 80006f8:	43db      	mvns	r3, r3
 80006fa:	4619      	mov	r1, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	400a      	ands	r2, r1
 8000702:	60da      	str	r2, [r3, #12]
	pGPIOx_Handle->pGPIOx->PUPDR |= temp;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	68d9      	ldr	r1, [r3, #12]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	430a      	orrs	r2, r1
 8000712:	60da      	str	r2, [r3, #12]

	//Alternate functionality configuration
	temp = (pGPIOx_Handle->GPIO_PinConfig.GPIO_PinAltFunc)<<(4*(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo%8));
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	7a5b      	ldrb	r3, [r3, #9]
 8000718:	461a      	mov	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	791b      	ldrb	r3, [r3, #4]
 800071e:	f003 0307 	and.w	r3, r3, #7
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	fa02 f303 	lsl.w	r3, r2, r3
 8000728:	60bb      	str	r3, [r7, #8]
	pGPIOx_Handle->pGPIOx->AF[pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo/8] &= ~((0xF)<<(4*(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo%8)));	//Clearing the required bits
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	7912      	ldrb	r2, [r2, #4]
 8000732:	08d2      	lsrs	r2, r2, #3
 8000734:	b2d0      	uxtb	r0, r2
 8000736:	4602      	mov	r2, r0
 8000738:	3208      	adds	r2, #8
 800073a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	791b      	ldrb	r3, [r3, #4]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	210f      	movs	r1, #15
 800074a:	fa01 f303 	lsl.w	r3, r1, r3
 800074e:	43db      	mvns	r3, r3
 8000750:	4619      	mov	r1, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4011      	ands	r1, r2
 8000758:	f100 0208 	add.w	r2, r0, #8
 800075c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIOx_Handle->pGPIOx->AF[pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo/8] |= temp;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	7912      	ldrb	r2, [r2, #4]
 8000768:	08d2      	lsrs	r2, r2, #3
 800076a:	b2d0      	uxtb	r0, r2
 800076c:	4602      	mov	r2, r0
 800076e:	3208      	adds	r2, #8
 8000770:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	68ba      	ldr	r2, [r7, #8]
 800077a:	4311      	orrs	r1, r2
 800077c:	f100 0208 	add.w	r2, r0, #8
 8000780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <GPIO_IPinRead>:
 *
 * 	@notes					: API for reading individual GPIO pins
 * 							  Type-cast cos these are 32-bit registers
 */
uint8_t GPIO_IPinRead(GPIO_RegDef_t *pGPIOx, uint8_t PinNo)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	460b      	mov	r3, r1
 8000796:	70fb      	strb	r3, [r7, #3]
	uint8_t value = (uint8_t)(((pGPIOx->IDR)>>PinNo)&0x00000001);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	691a      	ldr	r2, [r3, #16]
 800079c:	78fb      	ldrb	r3, [r7, #3]
 800079e:	fa22 f303 	lsr.w	r3, r2, r3
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	f003 0301 	and.w	r3, r3, #1
 80007a8:	73fb      	strb	r3, [r7, #15]
	return value;
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <GPIO_OPinWrite>:
 * 	@return					: void
 *
 * 	@notes					: API for writing to a GPIO pin
 */
void GPIO_OPinWrite(GPIO_RegDef_t *pGPIOx, uint8_t PinNo, uint8_t value)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	70fb      	strb	r3, [r7, #3]
 80007c4:	4613      	mov	r3, r2
 80007c6:	70bb      	strb	r3, [r7, #2]
	if(value==SET)
 80007c8:	78bb      	ldrb	r3, [r7, #2]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d109      	bne.n	80007e2 <GPIO_OPinWrite+0x2a>
		pGPIOx->ODR |= (1<<PinNo);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	78fa      	ldrb	r2, [r7, #3]
 80007d4:	2101      	movs	r1, #1
 80007d6:	fa01 f202 	lsl.w	r2, r1, r2
 80007da:	431a      	orrs	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	615a      	str	r2, [r3, #20]
	else if(value==RESET)
		pGPIOx->ODR &= ~(1<<PinNo);
}
 80007e0:	e00c      	b.n	80007fc <GPIO_OPinWrite+0x44>
	else if(value==RESET)
 80007e2:	78bb      	ldrb	r3, [r7, #2]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d109      	bne.n	80007fc <GPIO_OPinWrite+0x44>
		pGPIOx->ODR &= ~(1<<PinNo);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	695b      	ldr	r3, [r3, #20]
 80007ec:	78fa      	ldrb	r2, [r7, #3]
 80007ee:	2101      	movs	r1, #1
 80007f0:	fa01 f202 	lsl.w	r2, r1, r2
 80007f4:	43d2      	mvns	r2, r2
 80007f6:	401a      	ands	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	615a      	str	r2, [r3, #20]
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <Port_ConfigCode>:
		(EXTI->EXTI_PR) |= (1<<PinNo);
	}
}

uint8_t Port_ConfigCode(GPIO_RegDef_t* pGPIOx)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	return ((pGPIOx==GPIOA)?0:\
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a1e      	ldr	r2, [pc, #120]	; (800088c <Port_ConfigCode+0x84>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d031      	beq.n	800087c <Port_ConfigCode+0x74>
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4a1d      	ldr	r2, [pc, #116]	; (8000890 <Port_ConfigCode+0x88>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d02b      	beq.n	8000878 <Port_ConfigCode+0x70>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4a1c      	ldr	r2, [pc, #112]	; (8000894 <Port_ConfigCode+0x8c>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d025      	beq.n	8000874 <Port_ConfigCode+0x6c>
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a1b      	ldr	r2, [pc, #108]	; (8000898 <Port_ConfigCode+0x90>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d01f      	beq.n	8000870 <Port_ConfigCode+0x68>
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a1a      	ldr	r2, [pc, #104]	; (800089c <Port_ConfigCode+0x94>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d019      	beq.n	800086c <Port_ConfigCode+0x64>
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a19      	ldr	r2, [pc, #100]	; (80008a0 <Port_ConfigCode+0x98>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d013      	beq.n	8000868 <Port_ConfigCode+0x60>
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4a18      	ldr	r2, [pc, #96]	; (80008a4 <Port_ConfigCode+0x9c>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d00d      	beq.n	8000864 <Port_ConfigCode+0x5c>
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4a17      	ldr	r2, [pc, #92]	; (80008a8 <Port_ConfigCode+0xa0>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d007      	beq.n	8000860 <Port_ConfigCode+0x58>
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4a16      	ldr	r2, [pc, #88]	; (80008ac <Port_ConfigCode+0xa4>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d101      	bne.n	800085c <Port_ConfigCode+0x54>
 8000858:	2308      	movs	r3, #8
 800085a:	e010      	b.n	800087e <Port_ConfigCode+0x76>
 800085c:	2300      	movs	r3, #0
 800085e:	e00e      	b.n	800087e <Port_ConfigCode+0x76>
 8000860:	2307      	movs	r3, #7
 8000862:	e00c      	b.n	800087e <Port_ConfigCode+0x76>
 8000864:	2306      	movs	r3, #6
 8000866:	e00a      	b.n	800087e <Port_ConfigCode+0x76>
 8000868:	2305      	movs	r3, #5
 800086a:	e008      	b.n	800087e <Port_ConfigCode+0x76>
 800086c:	2304      	movs	r3, #4
 800086e:	e006      	b.n	800087e <Port_ConfigCode+0x76>
 8000870:	2303      	movs	r3, #3
 8000872:	e004      	b.n	800087e <Port_ConfigCode+0x76>
 8000874:	2302      	movs	r3, #2
 8000876:	e002      	b.n	800087e <Port_ConfigCode+0x76>
 8000878:	2301      	movs	r3, #1
 800087a:	e000      	b.n	800087e <Port_ConfigCode+0x76>
 800087c:	2300      	movs	r3, #0
			(pGPIOx==GPIOE)?4:\
			(pGPIOx==GPIOF)?5:\
			(pGPIOx==GPIOG)?6:\
			(pGPIOx==GPIOH)?7:\
			(pGPIOx==GPIOI)?8:0);
}
 800087e:	4618      	mov	r0, r3
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40020000 	.word	0x40020000
 8000890:	40020400 	.word	0x40020400
 8000894:	40020800 	.word	0x40020800
 8000898:	40020c00 	.word	0x40020c00
 800089c:	40021000 	.word	0x40021000
 80008a0:	40021400 	.word	0x40021400
 80008a4:	40021800 	.word	0x40021800
 80008a8:	40021c00 	.word	0x40021c00
 80008ac:	40022000 	.word	0x40022000

080008b0 <SPI_PCLK_Ctrl>:
 *
 * 	@notes					: API for enabling and disabling the clock
 */

void SPI_PCLK_Ctrl(SPI_RegDef_t *pSPIx, uint8_t EN_DI)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	460b      	mov	r3, r1
 80008ba:	70fb      	strb	r3, [r7, #3]
	if(EN_DI==ENABLE)
 80008bc:	78fb      	ldrb	r3, [r7, #3]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d120      	bne.n	8000904 <SPI_PCLK_Ctrl+0x54>
	{
		if(pSPIx==SPI1)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4a24      	ldr	r2, [pc, #144]	; (8000958 <SPI_PCLK_Ctrl+0xa8>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d106      	bne.n	80008d8 <SPI_PCLK_Ctrl+0x28>
			SPI1_PCLK_EN();
 80008ca:	4b24      	ldr	r3, [pc, #144]	; (800095c <SPI_PCLK_Ctrl+0xac>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	4a23      	ldr	r2, [pc, #140]	; (800095c <SPI_PCLK_Ctrl+0xac>)
 80008d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008d4:	6453      	str	r3, [r2, #68]	; 0x44
		else if(pSPIx==SPI2)
			SPI2_PCLK_DI();
		else if(pSPIx==SPI3)
			SPI3_PCLK_DI();
	}
}
 80008d6:	e038      	b.n	800094a <SPI_PCLK_Ctrl+0x9a>
		else if(pSPIx==SPI2)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a21      	ldr	r2, [pc, #132]	; (8000960 <SPI_PCLK_Ctrl+0xb0>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d106      	bne.n	80008ee <SPI_PCLK_Ctrl+0x3e>
			SPI2_PCLK_EN();
 80008e0:	4b1e      	ldr	r3, [pc, #120]	; (800095c <SPI_PCLK_Ctrl+0xac>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	4a1d      	ldr	r2, [pc, #116]	; (800095c <SPI_PCLK_Ctrl+0xac>)
 80008e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ea:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008ec:	e02d      	b.n	800094a <SPI_PCLK_Ctrl+0x9a>
		else if(pSPIx==SPI3)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a1c      	ldr	r2, [pc, #112]	; (8000964 <SPI_PCLK_Ctrl+0xb4>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d129      	bne.n	800094a <SPI_PCLK_Ctrl+0x9a>
			SPI3_PCLK_EN();
 80008f6:	4b19      	ldr	r3, [pc, #100]	; (800095c <SPI_PCLK_Ctrl+0xac>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	4a18      	ldr	r2, [pc, #96]	; (800095c <SPI_PCLK_Ctrl+0xac>)
 80008fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000900:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000902:	e022      	b.n	800094a <SPI_PCLK_Ctrl+0x9a>
	else if(EN_DI==DISABLE)
 8000904:	78fb      	ldrb	r3, [r7, #3]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d11f      	bne.n	800094a <SPI_PCLK_Ctrl+0x9a>
		if(pSPIx==SPI1)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4a12      	ldr	r2, [pc, #72]	; (8000958 <SPI_PCLK_Ctrl+0xa8>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d106      	bne.n	8000920 <SPI_PCLK_Ctrl+0x70>
			SPI1_PCLK_DI();
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <SPI_PCLK_Ctrl+0xac>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	4a11      	ldr	r2, [pc, #68]	; (800095c <SPI_PCLK_Ctrl+0xac>)
 8000918:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800091c:	6453      	str	r3, [r2, #68]	; 0x44
}
 800091e:	e014      	b.n	800094a <SPI_PCLK_Ctrl+0x9a>
		else if(pSPIx==SPI2)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a0f      	ldr	r2, [pc, #60]	; (8000960 <SPI_PCLK_Ctrl+0xb0>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d106      	bne.n	8000936 <SPI_PCLK_Ctrl+0x86>
			SPI2_PCLK_DI();
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <SPI_PCLK_Ctrl+0xac>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	4a0b      	ldr	r2, [pc, #44]	; (800095c <SPI_PCLK_Ctrl+0xac>)
 800092e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000932:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000934:	e009      	b.n	800094a <SPI_PCLK_Ctrl+0x9a>
		else if(pSPIx==SPI3)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <SPI_PCLK_Ctrl+0xb4>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d105      	bne.n	800094a <SPI_PCLK_Ctrl+0x9a>
			SPI3_PCLK_DI();
 800093e:	4b07      	ldr	r3, [pc, #28]	; (800095c <SPI_PCLK_Ctrl+0xac>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	4a06      	ldr	r2, [pc, #24]	; (800095c <SPI_PCLK_Ctrl+0xac>)
 8000944:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000948:	6413      	str	r3, [r2, #64]	; 0x40
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40013000 	.word	0x40013000
 800095c:	40023800 	.word	0x40023800
 8000960:	40003800 	.word	0x40003800
 8000964:	40003c00 	.word	0x40003c00

08000968 <SPI_Init>:
 *
 * 	@notes					: API for enabling and disabling the clock
 */

void SPI_Init(SPIx_Handle_t *pSPIx_Handle)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]

	//SPI Device Mode
	temp |= (pSPIx_Handle->SPIx_PinConfig.SPI_DeviceConfig)<<SPI_CR1_MSTR;  //MSTR Bit of SPI_CR1
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	791b      	ldrb	r3, [r3, #4]
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	461a      	mov	r2, r3
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	4313      	orrs	r3, r2
 8000980:	60fb      	str	r3, [r7, #12]
	/*
		BIDIMODE		Full-Duplex-0											Half-Duplex-1(Master and Slave work reciprocally)
		RXONLY			0(Full-Duplex) - Simplex Tx(Disconnect MISO),			BIDIOE:	0(Receive)
						1(Rx Only) - Simplex RX											1(Transmit)
	*/
	uint8_t BusConfig = pSPIx_Handle->SPIx_PinConfig.SPI_BusConfig;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	795b      	ldrb	r3, [r3, #5]
 8000986:	72fb      	strb	r3, [r7, #11]
	if(BusConfig == BUSCONF_FULLDUP)
 8000988:	7afb      	ldrb	r3, [r7, #11]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d104      	bne.n	8000998 <SPI_Init+0x30>
		temp &= ~(1<<SPI_CR1_BIDIMODE);
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	e01a      	b.n	80009ce <SPI_Init+0x66>
	else if(BusConfig == BUSCONF_HALFDUP)
 8000998:	7afb      	ldrb	r3, [r7, #11]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d104      	bne.n	80009a8 <SPI_Init+0x40>
		temp |= (1<<SPI_CR1_BIDIMODE);
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	e012      	b.n	80009ce <SPI_Init+0x66>
	else if(BusConfig == BUSCONF_SIMPRX)
 80009a8:	7afb      	ldrb	r3, [r7, #11]
 80009aa:	2b02      	cmp	r3, #2
 80009ac:	d108      	bne.n	80009c0 <SPI_Init+0x58>
	{
		temp &= ~(1<<SPI_CR1_BIDIMODE);
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009b4:	60fb      	str	r3, [r7, #12]
		temp |= (1<<SPI_CR1_RXONLY);
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	e006      	b.n	80009ce <SPI_Init+0x66>
	}
	else if(BusConfig == BUSCONF_SIMPTX)	//Disconnect the MISO line
 80009c0:	7afb      	ldrb	r3, [r7, #11]
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	d103      	bne.n	80009ce <SPI_Init+0x66>
		temp &= ~(1<<SPI_CR1_BIDIMODE);
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009cc:	60fb      	str	r3, [r7, #12]

	//SPI Clock Speed
	temp |= (pSPIx_Handle->SPIx_PinConfig.SPI_ClkSpeed)<<SPI_CR1_BR;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	799b      	ldrb	r3, [r3, #6]
 80009d2:	00db      	lsls	r3, r3, #3
 80009d4:	461a      	mov	r2, r3
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4313      	orrs	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]

	//SPI Data Frame Format
	if(pSPIx_Handle->SPIx_PinConfig.SPI_DFF == DFF8)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	79db      	ldrb	r3, [r3, #7]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d104      	bne.n	80009ee <SPI_Init+0x86>
		temp &= ~(1<<SPI_CR1_DFF);
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	e007      	b.n	80009fe <SPI_Init+0x96>
	else if(pSPIx_Handle->SPIx_PinConfig.SPI_DFF == DFF16)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	79db      	ldrb	r3, [r3, #7]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d103      	bne.n	80009fe <SPI_Init+0x96>
		temp |= (1<<SPI_CR1_DFF);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009fc:	60fb      	str	r3, [r7, #12]

	//SPI CPOL
	if(pSPIx_Handle->SPIx_PinConfig.SPI_CPOL == ZERO_IDLE)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	7a1b      	ldrb	r3, [r3, #8]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d104      	bne.n	8000a10 <SPI_Init+0xa8>
		temp &= ~(1<<SPI_CR1_CPOL);
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	f023 0302 	bic.w	r3, r3, #2
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	e007      	b.n	8000a20 <SPI_Init+0xb8>
	else if(pSPIx_Handle->SPIx_PinConfig.SPI_CPOL == HIGH_IDLE)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	7a1b      	ldrb	r3, [r3, #8]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d103      	bne.n	8000a20 <SPI_Init+0xb8>
		temp |= (1<<SPI_CR1_CPOL);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	f043 0302 	orr.w	r3, r3, #2
 8000a1e:	60fb      	str	r3, [r7, #12]

	//SPI CPHA
	if(pSPIx_Handle->SPIx_PinConfig.SPI_CPHA == FIRSTCLK_CAP)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	7a5b      	ldrb	r3, [r3, #9]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d104      	bne.n	8000a32 <SPI_Init+0xca>
		temp &= ~(1<<SPI_CR1_CPHA);
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f023 0301 	bic.w	r3, r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	e007      	b.n	8000a42 <SPI_Init+0xda>
	else if(pSPIx_Handle->SPIx_PinConfig.SPI_CPHA == SECONDCLK_CAP)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	7a5b      	ldrb	r3, [r3, #9]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d103      	bne.n	8000a42 <SPI_Init+0xda>
		temp |= (1<<SPI_CR1_CPHA);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	60fb      	str	r3, [r7, #12]

	//Software Slave Management(SSM)
	if(pSPIx_Handle->SPIx_PinConfig.SPI_SSM == SSM_DI)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	7a9b      	ldrb	r3, [r3, #10]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d104      	bne.n	8000a54 <SPI_Init+0xec>
		temp &= ~(1<<SPI_CR1_SSM);
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	e007      	b.n	8000a64 <SPI_Init+0xfc>
	else if(pSPIx_Handle->SPIx_PinConfig.SPI_SSM == SSM_EN)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	7a9b      	ldrb	r3, [r3, #10]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d103      	bne.n	8000a64 <SPI_Init+0xfc>
		temp |= (1<<SPI_CR1_SSM);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a62:	60fb      	str	r3, [r7, #12]

	pSPIx_Handle->pSPIx->SPI_CR1 &= ~(temp);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	6819      	ldr	r1, [r3, #0]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	43da      	mvns	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	400a      	ands	r2, r1
 8000a74:	601a      	str	r2, [r3, #0]
	pSPIx_Handle->pSPIx->SPI_CR1 |= temp;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	6819      	ldr	r1, [r3, #0]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	430a      	orrs	r2, r1
 8000a84:	601a      	str	r2, [r3, #0]
}
 8000a86:	bf00      	nop
 8000a88:	3714      	adds	r7, #20
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <SPI_TxDataB>:
 * 							  				len decremented by 1, loop back to *
 * 							  		DFF_16: 2 bytes of data is written to the data register
 * 							  				len decremented by 2, loop back to *
 */
void SPI_TxDataB(SPI_RegDef_t *pSPIx, uint8_t *pTxBuff, uint32_t len)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b084      	sub	sp, #16
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	60f8      	str	r0, [r7, #12]
 8000a9a:	60b9      	str	r1, [r7, #8]
 8000a9c:	607a      	str	r2, [r7, #4]
	//Tx Data Blocking Call API: Blocks Program execution, till all the data is transmitted

	while(len>0)
 8000a9e:	e024      	b.n	8000aea <SPI_TxDataB+0x58>
	{
		while(!(FlagStatus(pSPIx, SPI_SR_TXEM)));	//wait until TXE bit is SET
 8000aa0:	bf00      	nop
 8000aa2:	2102      	movs	r1, #2
 8000aa4:	68f8      	ldr	r0, [r7, #12]
 8000aa6:	f000 f896 	bl	8000bd6 <FlagStatus>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d0f8      	beq.n	8000aa2 <SPI_TxDataB+0x10>

		if(pSPIx->SPI_CR1 & (1<<SPI_CR1_DFF))			//16 bit data Tx
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d00b      	beq.n	8000ad4 <SPI_TxDataB+0x42>
		{
			pSPIx->SPI_DR = *((uint16_t*)pTxBuff);		//DR is 16 bits
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	60da      	str	r2, [r3, #12]
			(uint16_t*)pTxBuff++;
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	60bb      	str	r3, [r7, #8]
			len -= 2;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3b02      	subs	r3, #2
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	e00a      	b.n	8000aea <SPI_TxDataB+0x58>
		}
		else	//8 bit data Tx
		{
			pSPIx->SPI_DR = *pTxBuff;		//DR is 8 bits
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	60da      	str	r2, [r3, #12]
			pTxBuff++;
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	60bb      	str	r3, [r7, #8]
			len--;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	607b      	str	r3, [r7, #4]
	while(len>0)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d1d7      	bne.n	8000aa0 <SPI_TxDataB+0xe>
		}
	}
}
 8000af0:	bf00      	nop
 8000af2:	bf00      	nop
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <SPI_RxDataB>:
 * 	@notes					: This API is very similar to TxDataB API;
 * 							  Waits until, the RXNE bit of SR register is SET
 * 							  As soon as the bit is SET, it copies the data from the DR to RxBuff
 */
void SPI_RxDataB(SPI_RegDef_t *pSPIx, uint8_t *pRxBuff, uint32_t len)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b084      	sub	sp, #16
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	60f8      	str	r0, [r7, #12]
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
	//Tx Data Blocking Call API: Blocks Program execution, till all the data is transmitted
	while(len>0)
 8000b06:	e024      	b.n	8000b52 <SPI_RxDataB+0x58>
	{
		while(!(FlagStatus(pSPIx, SPI_SR_RXNEM)));	//wait until RXNE bit is SET
 8000b08:	bf00      	nop
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	68f8      	ldr	r0, [r7, #12]
 8000b0e:	f000 f862 	bl	8000bd6 <FlagStatus>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d0f8      	beq.n	8000b0a <SPI_RxDataB+0x10>

		if(pSPIx->SPI_CR1 & (1<<SPI_CR1_DFF))			//16 bit data Rx
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d00b      	beq.n	8000b3c <SPI_RxDataB+0x42>
		{
			*((uint16_t*)pRxBuff) = pSPIx->SPI_DR;		//DR is 16 bits
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	801a      	strh	r2, [r3, #0]
			(uint16_t*)pRxBuff++;
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	3301      	adds	r3, #1
 8000b32:	60bb      	str	r3, [r7, #8]
			len -= 2;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3b02      	subs	r3, #2
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	e00a      	b.n	8000b52 <SPI_RxDataB+0x58>
		}
		else	//8 bit data Tx
		{
			*pRxBuff = pSPIx->SPI_DR;		//DR is 8 bits
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	701a      	strb	r2, [r3, #0]
			pRxBuff++;
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	60bb      	str	r3, [r7, #8]
			len--;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	607b      	str	r3, [r7, #4]
	while(len>0)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d1d7      	bne.n	8000b08 <SPI_RxDataB+0xe>
		}
	}
}
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <SPI_EN>:
 *
 * 	@notes					: Enables/Disables SPI by setting the SPE bit
 * 							  Call the function after all the register config
 */
void SPI_EN(SPI_RegDef_t *pSPIx,uint8_t EN_DI)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	70fb      	strb	r3, [r7, #3]
	pSPIx->SPI_CR1 &= ~(1<<SPI_CR1_SPE);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	601a      	str	r2, [r3, #0]
	if(EN_DI==ENABLE)
 8000b7a:	78fb      	ldrb	r3, [r7, #3]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d105      	bne.n	8000b8c <SPI_EN+0x2a>
		(pSPIx->SPI_CR1) |= (1<<SPI_CR1_SPE);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	601a      	str	r2, [r3, #0]
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <SPI_SSOEConfig>:
 * 	@return					: void
 *
 * 	@notes					: Enables the output by setting the SSOE bit of SPI_CR2
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EN_DI)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	70fb      	strb	r3, [r7, #3]
	if(EN_DI==ENABLE)
 8000ba4:	78fb      	ldrb	r3, [r7, #3]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d106      	bne.n	8000bb8 <SPI_SSOEConfig+0x20>
		(pSPIx->SPI_CR2) |= (1<<SPI_CR2_SSOE);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f043 0204 	orr.w	r2, r3, #4
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	605a      	str	r2, [r3, #4]
	else if(EN_DI == DISABLE)
		(pSPIx->SPI_CR2) &= ~(1<<SPI_CR2_SSOE);
}
 8000bb6:	e008      	b.n	8000bca <SPI_SSOEConfig+0x32>
	else if(EN_DI == DISABLE)
 8000bb8:	78fb      	ldrb	r3, [r7, #3]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d105      	bne.n	8000bca <SPI_SSOEConfig+0x32>
		(pSPIx->SPI_CR2) &= ~(1<<SPI_CR2_SSOE);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f023 0204 	bic.w	r2, r3, #4
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	605a      	str	r2, [r3, #4]
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <FlagStatus>:
 *
 * 	@notes					: Checks if a bit
 */

uint8_t FlagStatus(SPI_RegDef_t *pSPIx, uint32_t flag)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	6039      	str	r1, [r7, #0]
	if((pSPIx->SPI_SR) & flag)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	689a      	ldr	r2, [r3, #8]
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	4013      	ands	r3, r2
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <FlagStatus+0x1a>
		return SET;
 8000bec:	2301      	movs	r3, #1
 8000bee:	e000      	b.n	8000bf2 <FlagStatus+0x1c>
	return RESET;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
	...

08000c00 <delay>:
void SPI_Comm();
void delay();
bool AckVerify(uint8_t ACK_BYTE);

void delay()
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
	for(int i=0;i<500000;i++);
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	e002      	b.n	8000c12 <delay+0x12>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <delay+0x28>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	ddf8      	ble.n	8000c0c <delay+0xc>
}
 8000c1a:	bf00      	nop
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	0007a11f 	.word	0x0007a11f

08000c2c <GPIO_Config>:

void GPIO_Config()
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
	GPIOx_Handle_t gpio;
	gpio.pGPIOx = GPIOD;
 8000c32:	4b28      	ldr	r3, [pc, #160]	; (8000cd4 <GPIO_Config+0xa8>)
 8000c34:	607b      	str	r3, [r7, #4]
	 * PB14	:	MISO
	 * PB15	: 	MOSI
	 */

	//GPIOD PCLK ON
	GPIO_PCLK_Ctrl(GPIOD,ENABLE);
 8000c36:	2101      	movs	r1, #1
 8000c38:	4826      	ldr	r0, [pc, #152]	; (8000cd4 <GPIO_Config+0xa8>)
 8000c3a:	f7ff fb31 	bl	80002a0 <GPIO_PCLK_Ctrl>
	GPIO_PCLK_Ctrl(GPIOB,ENABLE);
 8000c3e:	2101      	movs	r1, #1
 8000c40:	4825      	ldr	r0, [pc, #148]	; (8000cd8 <GPIO_Config+0xac>)
 8000c42:	f7ff fb2d 	bl	80002a0 <GPIO_PCLK_Ctrl>

	/*GPIO PD2*/
	gpio.GPIO_PinConfig.GPIO_PinNo = GPIO_PINNO_2;
 8000c46:	2302      	movs	r3, #2
 8000c48:	723b      	strb	r3, [r7, #8]
	gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	727b      	strb	r3, [r7, #9]
	gpio.GPIO_PinConfig.GPIO_PinOPtype = GPIO_PP;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	733b      	strb	r3, [r7, #12]
	gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_PINSPEED_HIGH;
 8000c52:	2302      	movs	r3, #2
 8000c54:	72bb      	strb	r3, [r7, #10]
	gpio.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_PIN_NPUPD;
 8000c56:	2300      	movs	r3, #0
 8000c58:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(&gpio);
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fc0b 	bl	8000478 <GPIO_Init>

	/*GPIO PD0*/
	gpio.GPIO_PinConfig.GPIO_PinNo = GPIO_PINNO_0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	723b      	strb	r3, [r7, #8]
	gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000c66:	2300      	movs	r3, #0
 8000c68:	727b      	strb	r3, [r7, #9]
	gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_PINSPEED_HIGH;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	72bb      	strb	r3, [r7, #10]
	gpio.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_PIN_NPUPD;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(&gpio);
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fbff 	bl	8000478 <GPIO_Init>

	//GPIOB Pin Config Tx Comm
	gpio.pGPIOx = GPIOB;
 8000c7a:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <GPIO_Config+0xac>)
 8000c7c:	607b      	str	r3, [r7, #4]
	gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_AF;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	727b      	strb	r3, [r7, #9]
	gpio.GPIO_PinConfig.GPIO_PinOPtype = GPIO_PP;
 8000c82:	2300      	movs	r3, #0
 8000c84:	733b      	strb	r3, [r7, #12]
	gpio.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_PIN_NPUPD;
 8000c86:	2300      	movs	r3, #0
 8000c88:	72fb      	strb	r3, [r7, #11]
	gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_PINSPEED_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	72bb      	strb	r3, [r7, #10]
	gpio.GPIO_PinConfig.GPIO_PinAltFunc = 5;
 8000c8e:	2305      	movs	r3, #5
 8000c90:	737b      	strb	r3, [r7, #13]

	//NSS
	gpio.GPIO_PinConfig.GPIO_PinNo = GPIO_PINNO_9;
 8000c92:	2309      	movs	r3, #9
 8000c94:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&gpio);
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fbed 	bl	8000478 <GPIO_Init>

	//SCK
	gpio.GPIO_PinConfig.GPIO_PinNo = GPIO_PINNO_10;
 8000c9e:	230a      	movs	r3, #10
 8000ca0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&gpio);
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fbe7 	bl	8000478 <GPIO_Init>

	//MISO
	gpio.GPIO_PinConfig.GPIO_PinNo = GPIO_PINNO_14;
 8000caa:	230e      	movs	r3, #14
 8000cac:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&gpio);
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fbe1 	bl	8000478 <GPIO_Init>

	//MOSI
	gpio.GPIO_PinConfig.GPIO_PinNo = GPIO_PINNO_15;
 8000cb6:	230f      	movs	r3, #15
 8000cb8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&gpio);
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fbdb 	bl	8000478 <GPIO_Init>

	//Configure
	GPIO_Init(&gpio);
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fbd7 	bl	8000478 <GPIO_Init>
}
 8000cca:	bf00      	nop
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40020c00 	.word	0x40020c00
 8000cd8:	40020400 	.word	0x40020400

08000cdc <SPI_Config>:

void SPI_Config()
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
	SPIx_Handle_t spi;

	SPI_PCLK_Ctrl(SPI2, ENABLE);
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	480d      	ldr	r0, [pc, #52]	; (8000d1c <SPI_Config+0x40>)
 8000ce6:	f7ff fde3 	bl	80008b0 <SPI_PCLK_Ctrl>

	spi.pSPIx = SPI2;
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <SPI_Config+0x40>)
 8000cec:	607b      	str	r3, [r7, #4]
	spi.SPIx_PinConfig.SPI_DeviceConfig = MASTER;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	723b      	strb	r3, [r7, #8]
	spi.SPIx_PinConfig.SPI_BusConfig = BUSCONF_FULLDUP;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	727b      	strb	r3, [r7, #9]
	spi.SPIx_PinConfig.SPI_ClkSpeed = BRDIV8;				//2MHz
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	72bb      	strb	r3, [r7, #10]
	spi.SPIx_PinConfig.SPI_CPOL = ZERO_IDLE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	733b      	strb	r3, [r7, #12]
	spi.SPIx_PinConfig.SPI_CPHA = FIRSTCLK_CAP;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	737b      	strb	r3, [r7, #13]
	spi.SPIx_PinConfig.SPI_DFF = DFF8;
 8000d02:	2300      	movs	r3, #0
 8000d04:	72fb      	strb	r3, [r7, #11]
	spi.SPIx_PinConfig.SPI_SSM = SSM_DI;					//Hardware management
 8000d06:	2300      	movs	r3, #0
 8000d08:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&spi);
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fe2b 	bl	8000968 <SPI_Init>
}
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40003800 	.word	0x40003800

08000d20 <ButtonResp>:
 * 	@return					: void
 *
 * 	@notes					: The function deals with the button response
 */
void ButtonResp()
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	GPIO_OPinWrite(GPIOD, GPIO_PINNO_2, RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2102      	movs	r1, #2
 8000d28:	480e      	ldr	r0, [pc, #56]	; (8000d64 <ButtonResp+0x44>)
 8000d2a:	f7ff fd45 	bl	80007b8 <GPIO_OPinWrite>
	while(!(GPIO_IPinRead(GPIOD, GPIO_PINNO_0)))
 8000d2e:	e004      	b.n	8000d3a <ButtonResp+0x1a>
		GPIO_OPinWrite(GPIOD, GPIO_PINNO_2, RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2102      	movs	r1, #2
 8000d34:	480b      	ldr	r0, [pc, #44]	; (8000d64 <ButtonResp+0x44>)
 8000d36:	f7ff fd3f 	bl	80007b8 <GPIO_OPinWrite>
	while(!(GPIO_IPinRead(GPIOD, GPIO_PINNO_0)))
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4809      	ldr	r0, [pc, #36]	; (8000d64 <ButtonResp+0x44>)
 8000d3e:	f7ff fd25 	bl	800078c <GPIO_IPinRead>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d0f3      	beq.n	8000d30 <ButtonResp+0x10>
	GPIO_OPinWrite(GPIOD, GPIO_PINNO_2, SET);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	2102      	movs	r1, #2
 8000d4c:	4805      	ldr	r0, [pc, #20]	; (8000d64 <ButtonResp+0x44>)
 8000d4e:	f7ff fd33 	bl	80007b8 <GPIO_OPinWrite>
	delay();
 8000d52:	f7ff ff55 	bl	8000c00 <delay>
	GPIO_OPinWrite(GPIOD, GPIO_PINNO_2, RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2102      	movs	r1, #2
 8000d5a:	4802      	ldr	r0, [pc, #8]	; (8000d64 <ButtonResp+0x44>)
 8000d5c:	f7ff fd2c 	bl	80007b8 <GPIO_OPinWrite>
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40020c00 	.word	0x40020c00

08000d68 <AckVerify>:

bool AckVerify(uint8_t ACK_BYTE)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
	if(ACK_BYTE==245)
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	2bf5      	cmp	r3, #245	; 0xf5
 8000d76:	d101      	bne.n	8000d7c <AckVerify+0x14>
		return true;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e000      	b.n	8000d7e <AckVerify+0x16>
	return false;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <SPI_Comm>:

void SPI_Comm()
{
 8000d8c:	b5b0      	push	{r4, r5, r7, lr}
 8000d8e:	b08e      	sub	sp, #56	; 0x38
 8000d90:	af00      	add	r7, sp, #0
	int i=0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_SSOEConfig(SPI2, ENABLE);		//SSOE : LOW
 8000d96:	2101      	movs	r1, #1
 8000d98:	48ca      	ldr	r0, [pc, #808]	; (80010c4 <SPI_Comm+0x338>)
 8000d9a:	f7ff fefd 	bl	8000b98 <SPI_SSOEConfig>

	for(i=0;i<5;i++)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	637b      	str	r3, [r7, #52]	; 0x34
 8000da2:	e1c5      	b.n	8001130 <SPI_Comm+0x3a4>
	{
		uint8_t CMD_CODE;			//To store the command code
		uint8_t ACK_BYTE;			//To store the receieved acknowledgement
		uint8_t DummyByte = 0xFF;	//Dummy byte to initialize SPI Slave Transfer
 8000da4:	23ff      	movs	r3, #255	; 0xff
 8000da6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		uint8_t DummyRead;
		uint8_t args[2];

		ButtonResp();
 8000daa:	f7ff ffb9 	bl	8000d20 <ButtonResp>

		//SPI Tx/Rx Configurations
		SPI_EN(SPI2, ENABLE);
 8000dae:	2101      	movs	r1, #1
 8000db0:	48c4      	ldr	r0, [pc, #784]	; (80010c4 <SPI_Comm+0x338>)
 8000db2:	f7ff fed6 	bl	8000b62 <SPI_EN>

		if(i==0)
 8000db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d138      	bne.n	8000e2e <SPI_Comm+0xa2>
		{
			args[0] = DPin;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			args[1] = value;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

			CMD_CODE = CMD_LED_CTRL;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			SPI_TxDataB(SPI2,&CMD_CODE,1);					//CMD_LED_CTRL
 8000dce:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	48bb      	ldr	r0, [pc, #748]	; (80010c4 <SPI_Comm+0x338>)
 8000dd8:	f7ff fe5b 	bl	8000a92 <SPI_TxDataB>
			//Dummy Read to clear RXNE: Clear Rx Buffer
			SPI_RxDataB(SPI2,&DummyRead,1);
 8000ddc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de0:	2201      	movs	r2, #1
 8000de2:	4619      	mov	r1, r3
 8000de4:	48b7      	ldr	r0, [pc, #732]	; (80010c4 <SPI_Comm+0x338>)
 8000de6:	f7ff fe88 	bl	8000afa <SPI_RxDataB>
			//SPI Slave doesn't initiate Tx, thereby send dummy byte to shift from SR of Slave to SR of Master
			//Sending 8Bit Dummy value, cause SPI is configured with DFF = 8 bits
			SPI_TxDataB(SPI2, &DummyByte,1);
 8000dea:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000dee:	2201      	movs	r2, #1
 8000df0:	4619      	mov	r1, r3
 8000df2:	48b4      	ldr	r0, [pc, #720]	; (80010c4 <SPI_Comm+0x338>)
 8000df4:	f7ff fe4d 	bl	8000a92 <SPI_TxDataB>
			SPI_RxDataB(SPI2,&ACK_BYTE,1);
 8000df8:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	4619      	mov	r1, r3
 8000e00:	48b0      	ldr	r0, [pc, #704]	; (80010c4 <SPI_Comm+0x338>)
 8000e02:	f7ff fe7a 	bl	8000afa <SPI_RxDataB>
			if(!(AckVerify(ACK_BYTE)))	//enter if-block, if AckVerify returns false
 8000e06:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff ffac 	bl	8000d68 <AckVerify>
 8000e10:	4603      	mov	r3, r0
 8000e12:	f083 0301 	eor.w	r3, r3, #1
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	f040 818e 	bne.w	800113a <SPI_Comm+0x3ae>
				break;

			//Functionality Definition
			SPI_TxDataB(SPI2,args,2);				//Digital Pin
 8000e1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e22:	2202      	movs	r2, #2
 8000e24:	4619      	mov	r1, r3
 8000e26:	48a7      	ldr	r0, [pc, #668]	; (80010c4 <SPI_Comm+0x338>)
 8000e28:	f7ff fe33 	bl	8000a92 <SPI_TxDataB>
 8000e2c:	e171      	b.n	8001112 <SPI_Comm+0x386>
		}

		else if(i==1)
 8000e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d15c      	bne.n	8000eee <SPI_Comm+0x162>
		{
			uint8_t analogRead;

			CMD_CODE = CMD_SENSOR_READ;
 8000e34:	2302      	movs	r3, #2
 8000e36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			SPI_TxDataB(SPI2,&CMD_CODE,1);
 8000e3a:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000e3e:	2201      	movs	r2, #1
 8000e40:	4619      	mov	r1, r3
 8000e42:	48a0      	ldr	r0, [pc, #640]	; (80010c4 <SPI_Comm+0x338>)
 8000e44:	f7ff fe25 	bl	8000a92 <SPI_TxDataB>

			SPI_RxDataB(SPI2,&DummyRead,1);
 8000e48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	4619      	mov	r1, r3
 8000e50:	489c      	ldr	r0, [pc, #624]	; (80010c4 <SPI_Comm+0x338>)
 8000e52:	f7ff fe52 	bl	8000afa <SPI_RxDataB>
			SPI_TxDataB(SPI2,&DummyByte,1);
 8000e56:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4899      	ldr	r0, [pc, #612]	; (80010c4 <SPI_Comm+0x338>)
 8000e60:	f7ff fe17 	bl	8000a92 <SPI_TxDataB>
			SPI_RxDataB(SPI2,&ACK_BYTE,1);
 8000e64:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000e68:	2201      	movs	r2, #1
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4895      	ldr	r0, [pc, #596]	; (80010c4 <SPI_Comm+0x338>)
 8000e6e:	f7ff fe44 	bl	8000afa <SPI_RxDataB>
			if(!(AckVerify(ACK_BYTE)))			//enter if-block, if AckVerify returns false
 8000e72:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ff76 	bl	8000d68 <AckVerify>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	f083 0301 	eor.w	r3, r3, #1
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <SPI_Comm+0x100>
				break;
 8000e88:	bf00      	nop
				break;
 8000e8a:	e156      	b.n	800113a <SPI_Comm+0x3ae>

			//Functionality Definition
			args[0] = ANALOG_PIN0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			SPI_TxDataB(SPI2,args,1);
 8000e92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e96:	2201      	movs	r2, #1
 8000e98:	4619      	mov	r1, r3
 8000e9a:	488a      	ldr	r0, [pc, #552]	; (80010c4 <SPI_Comm+0x338>)
 8000e9c:	f7ff fdf9 	bl	8000a92 <SPI_TxDataB>
			SPI_RxDataB(SPI2,&DummyRead,1);		//Clear RXNE bit
 8000ea0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4886      	ldr	r0, [pc, #536]	; (80010c4 <SPI_Comm+0x338>)
 8000eaa:	f7ff fe26 	bl	8000afa <SPI_RxDataB>
			delay();
 8000eae:	f7ff fea7 	bl	8000c00 <delay>
			SPI_TxDataB(SPI2,&DummyByte,1);
 8000eb2:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4882      	ldr	r0, [pc, #520]	; (80010c4 <SPI_Comm+0x338>)
 8000ebc:	f7ff fde9 	bl	8000a92 <SPI_TxDataB>
			SPI_RxDataB(SPI2,&analogRead,1);
 8000ec0:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	487e      	ldr	r0, [pc, #504]	; (80010c4 <SPI_Comm+0x338>)
 8000eca:	f7ff fe16 	bl	8000afa <SPI_RxDataB>
			printf("Analog Value: %d\n",analogRead);
 8000ece:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	487c      	ldr	r0, [pc, #496]	; (80010c8 <SPI_Comm+0x33c>)
 8000ed6:	f000 fa6b 	bl	80013b0 <iprintf>
			GPIO_OPinWrite(GPIOD, GPIO_PINNO_2, SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	2102      	movs	r1, #2
 8000ede:	487b      	ldr	r0, [pc, #492]	; (80010cc <SPI_Comm+0x340>)
 8000ee0:	f7ff fc6a 	bl	80007b8 <GPIO_OPinWrite>
			delay();
 8000ee4:	f7ff fe8c 	bl	8000c00 <delay>
			delay();
 8000ee8:	f7ff fe8a 	bl	8000c00 <delay>
 8000eec:	e111      	b.n	8001112 <SPI_Comm+0x386>
		}

		else if(i==2)
 8000eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d15c      	bne.n	8000fae <SPI_Comm+0x222>
		{
			uint8_t ledRead;

			CMD_CODE = CMD_LED_READ;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			SPI_TxDataB(SPI2,&CMD_CODE,1);
 8000efa:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000efe:	2201      	movs	r2, #1
 8000f00:	4619      	mov	r1, r3
 8000f02:	4870      	ldr	r0, [pc, #448]	; (80010c4 <SPI_Comm+0x338>)
 8000f04:	f7ff fdc5 	bl	8000a92 <SPI_TxDataB>

			SPI_RxDataB(SPI2,&DummyRead,1);
 8000f08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	4619      	mov	r1, r3
 8000f10:	486c      	ldr	r0, [pc, #432]	; (80010c4 <SPI_Comm+0x338>)
 8000f12:	f7ff fdf2 	bl	8000afa <SPI_RxDataB>
			SPI_TxDataB(SPI2,&DummyByte,1);
 8000f16:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4869      	ldr	r0, [pc, #420]	; (80010c4 <SPI_Comm+0x338>)
 8000f20:	f7ff fdb7 	bl	8000a92 <SPI_TxDataB>
			SPI_RxDataB(SPI2,&ACK_BYTE,1);
 8000f24:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000f28:	2201      	movs	r2, #1
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4865      	ldr	r0, [pc, #404]	; (80010c4 <SPI_Comm+0x338>)
 8000f2e:	f7ff fde4 	bl	8000afa <SPI_RxDataB>
			if(!(AckVerify(ACK_BYTE)))			//enter if-block, if AckVerify returns false
 8000f32:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff ff16 	bl	8000d68 <AckVerify>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	f083 0301 	eor.w	r3, r3, #1
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <SPI_Comm+0x1c0>
				break;
 8000f48:	bf00      	nop
				break;
 8000f4a:	e0f6      	b.n	800113a <SPI_Comm+0x3ae>

			//Functionality Definition
			args[0] = ANALOG_PIN0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			SPI_TxDataB(SPI2,args,1);
 8000f52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f56:	2201      	movs	r2, #1
 8000f58:	4619      	mov	r1, r3
 8000f5a:	485a      	ldr	r0, [pc, #360]	; (80010c4 <SPI_Comm+0x338>)
 8000f5c:	f7ff fd99 	bl	8000a92 <SPI_TxDataB>
			SPI_RxDataB(SPI2,&DummyRead,1);		//Clear RXNE bit
 8000f60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f64:	2201      	movs	r2, #1
 8000f66:	4619      	mov	r1, r3
 8000f68:	4856      	ldr	r0, [pc, #344]	; (80010c4 <SPI_Comm+0x338>)
 8000f6a:	f7ff fdc6 	bl	8000afa <SPI_RxDataB>
			delay();
 8000f6e:	f7ff fe47 	bl	8000c00 <delay>
			SPI_TxDataB(SPI2,&DummyByte,1);
 8000f72:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000f76:	2201      	movs	r2, #1
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4852      	ldr	r0, [pc, #328]	; (80010c4 <SPI_Comm+0x338>)
 8000f7c:	f7ff fd89 	bl	8000a92 <SPI_TxDataB>
			SPI_RxDataB(SPI2,&ledRead,1);
 8000f80:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8000f84:	2201      	movs	r2, #1
 8000f86:	4619      	mov	r1, r3
 8000f88:	484e      	ldr	r0, [pc, #312]	; (80010c4 <SPI_Comm+0x338>)
 8000f8a:	f7ff fdb6 	bl	8000afa <SPI_RxDataB>
			printf("LED Status: %d\n",ledRead);
 8000f8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f92:	4619      	mov	r1, r3
 8000f94:	484e      	ldr	r0, [pc, #312]	; (80010d0 <SPI_Comm+0x344>)
 8000f96:	f000 fa0b 	bl	80013b0 <iprintf>
			GPIO_OPinWrite(GPIOD, GPIO_PINNO_2, SET);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	484b      	ldr	r0, [pc, #300]	; (80010cc <SPI_Comm+0x340>)
 8000fa0:	f7ff fc0a 	bl	80007b8 <GPIO_OPinWrite>
			delay();
 8000fa4:	f7ff fe2c 	bl	8000c00 <delay>
			delay();
 8000fa8:	f7ff fe2a 	bl	8000c00 <delay>
 8000fac:	e0b1      	b.n	8001112 <SPI_Comm+0x386>
		}

		else if(i==3)
 8000fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fb0:	2b03      	cmp	r3, #3
 8000fb2:	d154      	bne.n	800105e <SPI_Comm+0x2d2>
		{
			char data[] = "Testing CMD_Print Command";
 8000fb4:	4b47      	ldr	r3, [pc, #284]	; (80010d4 <SPI_Comm+0x348>)
 8000fb6:	f107 040c 	add.w	r4, r7, #12
 8000fba:	461d      	mov	r5, r3
 8000fbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fc4:	c403      	stmia	r4!, {r0, r1}
 8000fc6:	8022      	strh	r2, [r4, #0]
			uint8_t len = strlen(data);
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff f90f 	bl	80001f0 <strlen>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	72fb      	strb	r3, [r7, #11]

			CMD_CODE = CMD_PRINT;
 8000fd8:	2304      	movs	r3, #4
 8000fda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			SPI_TxDataB(SPI2,&CMD_CODE,1);
 8000fde:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4837      	ldr	r0, [pc, #220]	; (80010c4 <SPI_Comm+0x338>)
 8000fe8:	f7ff fd53 	bl	8000a92 <SPI_TxDataB>

			SPI_RxDataB(SPI2,&DummyRead,1);
 8000fec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4833      	ldr	r0, [pc, #204]	; (80010c4 <SPI_Comm+0x338>)
 8000ff6:	f7ff fd80 	bl	8000afa <SPI_RxDataB>
			SPI_TxDataB(SPI2,&DummyByte,1);
 8000ffa:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000ffe:	2201      	movs	r2, #1
 8001000:	4619      	mov	r1, r3
 8001002:	4830      	ldr	r0, [pc, #192]	; (80010c4 <SPI_Comm+0x338>)
 8001004:	f7ff fd45 	bl	8000a92 <SPI_TxDataB>
			SPI_RxDataB(SPI2,&ACK_BYTE,1);
 8001008:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800100c:	2201      	movs	r2, #1
 800100e:	4619      	mov	r1, r3
 8001010:	482c      	ldr	r0, [pc, #176]	; (80010c4 <SPI_Comm+0x338>)
 8001012:	f7ff fd72 	bl	8000afa <SPI_RxDataB>
			if(!(AckVerify(ACK_BYTE)))			//enter if-block, if AckVerify returns false
 8001016:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fea4 	bl	8000d68 <AckVerify>
 8001020:	4603      	mov	r3, r0
 8001022:	f083 0301 	eor.w	r3, r3, #1
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SPI_Comm+0x2a4>
				break;
 800102c:	bf00      	nop
				break;
 800102e:	e084      	b.n	800113a <SPI_Comm+0x3ae>

			//Functionality Definition
			SPI_TxDataB(SPI2,&len,1);
 8001030:	f107 030b 	add.w	r3, r7, #11
 8001034:	2201      	movs	r2, #1
 8001036:	4619      	mov	r1, r3
 8001038:	4822      	ldr	r0, [pc, #136]	; (80010c4 <SPI_Comm+0x338>)
 800103a:	f7ff fd2a 	bl	8000a92 <SPI_TxDataB>
			SPI_TxDataB(SPI2,(uint8_t*)data,len);
 800103e:	7afb      	ldrb	r3, [r7, #11]
 8001040:	461a      	mov	r2, r3
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	4619      	mov	r1, r3
 8001048:	481e      	ldr	r0, [pc, #120]	; (80010c4 <SPI_Comm+0x338>)
 800104a:	f7ff fd22 	bl	8000a92 <SPI_TxDataB>
			SPI_RxDataB(SPI2,&DummyRead,1);
 800104e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001052:	2201      	movs	r2, #1
 8001054:	4619      	mov	r1, r3
 8001056:	481b      	ldr	r0, [pc, #108]	; (80010c4 <SPI_Comm+0x338>)
 8001058:	f7ff fd4f 	bl	8000afa <SPI_RxDataB>
 800105c:	e059      	b.n	8001112 <SPI_Comm+0x386>
		}

		else if(i==4)
 800105e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001060:	2b04      	cmp	r3, #4
 8001062:	d156      	bne.n	8001112 <SPI_Comm+0x386>
		{
			uint8_t SlaveID[11];

			CMD_CODE = CMD_ID_READ;
 8001064:	2305      	movs	r3, #5
 8001066:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			SPI_TxDataB(SPI2,&CMD_CODE,1);
 800106a:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800106e:	2201      	movs	r2, #1
 8001070:	4619      	mov	r1, r3
 8001072:	4814      	ldr	r0, [pc, #80]	; (80010c4 <SPI_Comm+0x338>)
 8001074:	f7ff fd0d 	bl	8000a92 <SPI_TxDataB>

			SPI_RxDataB(SPI2,&DummyRead,1);
 8001078:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800107c:	2201      	movs	r2, #1
 800107e:	4619      	mov	r1, r3
 8001080:	4810      	ldr	r0, [pc, #64]	; (80010c4 <SPI_Comm+0x338>)
 8001082:	f7ff fd3a 	bl	8000afa <SPI_RxDataB>
			SPI_TxDataB(SPI2,&DummyByte,1);
 8001086:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800108a:	2201      	movs	r2, #1
 800108c:	4619      	mov	r1, r3
 800108e:	480d      	ldr	r0, [pc, #52]	; (80010c4 <SPI_Comm+0x338>)
 8001090:	f7ff fcff 	bl	8000a92 <SPI_TxDataB>
			SPI_RxDataB(SPI2,&ACK_BYTE,1);
 8001094:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001098:	2201      	movs	r2, #1
 800109a:	4619      	mov	r1, r3
 800109c:	4809      	ldr	r0, [pc, #36]	; (80010c4 <SPI_Comm+0x338>)
 800109e:	f7ff fd2c 	bl	8000afa <SPI_RxDataB>
			if(!(AckVerify(ACK_BYTE)))			//enter if-block, if AckVerify returns false
 80010a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fe5e 	bl	8000d68 <AckVerify>
 80010ac:	4603      	mov	r3, r0
 80010ae:	f083 0301 	eor.w	r3, r3, #1
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <SPI_Comm+0x330>
				break;
 80010b8:	bf00      	nop
				break;
 80010ba:	e03e      	b.n	800113a <SPI_Comm+0x3ae>

			//printf("Acknowledged\n");
			//Functionality Description
			for(int i=0;i<10;i++)
 80010bc:	2300      	movs	r3, #0
 80010be:	633b      	str	r3, [r7, #48]	; 0x30
 80010c0:	e01c      	b.n	80010fc <SPI_Comm+0x370>
 80010c2:	bf00      	nop
 80010c4:	40003800 	.word	0x40003800
 80010c8:	080023d0 	.word	0x080023d0
 80010cc:	40020c00 	.word	0x40020c00
 80010d0:	080023e4 	.word	0x080023e4
 80010d4:	080023f4 	.word	0x080023f4
			{
				SPI_TxDataB(SPI2,&DummyByte,1);
 80010d8:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 80010dc:	2201      	movs	r2, #1
 80010de:	4619      	mov	r1, r3
 80010e0:	4818      	ldr	r0, [pc, #96]	; (8001144 <SPI_Comm+0x3b8>)
 80010e2:	f7ff fcd6 	bl	8000a92 <SPI_TxDataB>
				SPI_RxDataB(SPI2,(SlaveID+i),1);
 80010e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010e8:	463a      	mov	r2, r7
 80010ea:	4413      	add	r3, r2
 80010ec:	2201      	movs	r2, #1
 80010ee:	4619      	mov	r1, r3
 80010f0:	4814      	ldr	r0, [pc, #80]	; (8001144 <SPI_Comm+0x3b8>)
 80010f2:	f7ff fd02 	bl	8000afa <SPI_RxDataB>
			for(int i=0;i<10;i++)
 80010f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010f8:	3301      	adds	r3, #1
 80010fa:	633b      	str	r3, [r7, #48]	; 0x30
 80010fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010fe:	2b09      	cmp	r3, #9
 8001100:	ddea      	ble.n	80010d8 <SPI_Comm+0x34c>
				//printf("%d\n",i);
			}
			delay();
 8001102:	f7ff fd7d 	bl	8000c00 <delay>
			SlaveID[10] = '\0';
 8001106:	2300      	movs	r3, #0
 8001108:	72bb      	strb	r3, [r7, #10]
			printf("%s\n",SlaveID);
 800110a:	463b      	mov	r3, r7
 800110c:	4618      	mov	r0, r3
 800110e:	f000 f9d5 	bl	80014bc <puts>
			/*if(strcmp(SlaveID,"SlaveID_1")==0)
				GPIO_OPinWrite(GPIOD, GPIO_PINNO_2, SET);*/
		}

		while(FlagStatus(SPI2, SPI_SR_BSYM));
 8001112:	bf00      	nop
 8001114:	2180      	movs	r1, #128	; 0x80
 8001116:	480b      	ldr	r0, [pc, #44]	; (8001144 <SPI_Comm+0x3b8>)
 8001118:	f7ff fd5d 	bl	8000bd6 <FlagStatus>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1f8      	bne.n	8001114 <SPI_Comm+0x388>
		SPI_EN(SPI2, DISABLE);
 8001122:	2100      	movs	r1, #0
 8001124:	4807      	ldr	r0, [pc, #28]	; (8001144 <SPI_Comm+0x3b8>)
 8001126:	f7ff fd1c 	bl	8000b62 <SPI_EN>
	for(i=0;i<5;i++)
 800112a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800112c:	3301      	adds	r3, #1
 800112e:	637b      	str	r3, [r7, #52]	; 0x34
 8001130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001132:	2b04      	cmp	r3, #4
 8001134:	f77f ae36 	ble.w	8000da4 <SPI_Comm+0x18>
	}
}
 8001138:	e000      	b.n	800113c <SPI_Comm+0x3b0>
				break;
 800113a:	bf00      	nop
}
 800113c:	bf00      	nop
 800113e:	3738      	adds	r7, #56	; 0x38
 8001140:	46bd      	mov	sp, r7
 8001142:	bdb0      	pop	{r4, r5, r7, pc}
 8001144:	40003800 	.word	0x40003800

08001148 <main>:

int main(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	//Configure SPI and GPIO
	GPIO_Config();
 800114c:	f7ff fd6e 	bl	8000c2c <GPIO_Config>
	SPI_Config();
 8001150:	f7ff fdc4 	bl	8000cdc <SPI_Config>

	SPI_Comm();
 8001154:	f7ff fe1a 	bl	8000d8c <SPI_Comm>

	return 0;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <ITM_SendChar+0x48>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a0e      	ldr	r2, [pc, #56]	; (80011a8 <ITM_SendChar+0x48>)
 8001170:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001174:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001176:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <ITM_SendChar+0x4c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a0c      	ldr	r2, [pc, #48]	; (80011ac <ITM_SendChar+0x4c>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001182:	bf00      	nop
 8001184:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f8      	beq.n	8001184 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001192:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	6013      	str	r3, [r2, #0]
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000edfc 	.word	0xe000edfc
 80011ac:	e0000e00 	.word	0xe0000e00

080011b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
 80011c0:	e00a      	b.n	80011d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011c2:	f3af 8000 	nop.w
 80011c6:	4601      	mov	r1, r0
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	60ba      	str	r2, [r7, #8]
 80011ce:	b2ca      	uxtb	r2, r1
 80011d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	3301      	adds	r3, #1
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	429a      	cmp	r2, r3
 80011de:	dbf0      	blt.n	80011c2 <_read+0x12>
	}

return len;
 80011e0:	687b      	ldr	r3, [r7, #4]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b086      	sub	sp, #24
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	60f8      	str	r0, [r7, #12]
 80011f2:	60b9      	str	r1, [r7, #8]
 80011f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	e009      	b.n	8001210 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	1c5a      	adds	r2, r3, #1
 8001200:	60ba      	str	r2, [r7, #8]
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ffab 	bl	8001160 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	3301      	adds	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	429a      	cmp	r2, r3
 8001216:	dbf1      	blt.n	80011fc <_write+0x12>
	}
	return len;
 8001218:	687b      	ldr	r3, [r7, #4]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <_close>:

int _close(int file)
{
 8001222:	b480      	push	{r7}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
	return -1;
 800122a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800124a:	605a      	str	r2, [r3, #4]
	return 0;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <_isatty>:

int _isatty(int file)
{
 800125a:	b480      	push	{r7}
 800125c:	b083      	sub	sp, #12
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
	return 1;
 8001262:	2301      	movs	r3, #1
}
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
	return 0;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
	...

0800128c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001294:	4a14      	ldr	r2, [pc, #80]	; (80012e8 <_sbrk+0x5c>)
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <_sbrk+0x60>)
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a0:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <_sbrk+0x64>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d102      	bne.n	80012ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <_sbrk+0x64>)
 80012aa:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <_sbrk+0x68>)
 80012ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <_sbrk+0x64>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d207      	bcs.n	80012cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012bc:	f000 f846 	bl	800134c <__errno>
 80012c0:	4603      	mov	r3, r0
 80012c2:	220c      	movs	r2, #12
 80012c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	e009      	b.n	80012e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <_sbrk+0x64>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <_sbrk+0x64>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <_sbrk+0x64>)
 80012dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012de:	68fb      	ldr	r3, [r7, #12]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20020000 	.word	0x20020000
 80012ec:	00000400 	.word	0x00000400
 80012f0:	20000080 	.word	0x20000080
 80012f4:	20000098 	.word	0x20000098

080012f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012f8:	480d      	ldr	r0, [pc, #52]	; (8001330 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001300:	480c      	ldr	r0, [pc, #48]	; (8001334 <LoopForever+0x6>)
  ldr r1, =_edata
 8001302:	490d      	ldr	r1, [pc, #52]	; (8001338 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001304:	4a0d      	ldr	r2, [pc, #52]	; (800133c <LoopForever+0xe>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001308:	e002      	b.n	8001310 <LoopCopyDataInit>

0800130a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800130c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130e:	3304      	adds	r3, #4

08001310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001314:	d3f9      	bcc.n	800130a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001318:	4c0a      	ldr	r4, [pc, #40]	; (8001344 <LoopForever+0x16>)
  movs r3, #0
 800131a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800131c:	e001      	b.n	8001322 <LoopFillZerobss>

0800131e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001320:	3204      	adds	r2, #4

08001322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001324:	d3fb      	bcc.n	800131e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001326:	f000 f817 	bl	8001358 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800132a:	f7ff ff0d 	bl	8001148 <main>

0800132e <LoopForever>:

LoopForever:
    b LoopForever
 800132e:	e7fe      	b.n	800132e <LoopForever>
  ldr   r0, =_estack
 8001330:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001338:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800133c:	080024b0 	.word	0x080024b0
  ldr r2, =_sbss
 8001340:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001344:	20000094 	.word	0x20000094

08001348 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001348:	e7fe      	b.n	8001348 <ADC_IRQHandler>
	...

0800134c <__errno>:
 800134c:	4b01      	ldr	r3, [pc, #4]	; (8001354 <__errno+0x8>)
 800134e:	6818      	ldr	r0, [r3, #0]
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	20000000 	.word	0x20000000

08001358 <__libc_init_array>:
 8001358:	b570      	push	{r4, r5, r6, lr}
 800135a:	4d0d      	ldr	r5, [pc, #52]	; (8001390 <__libc_init_array+0x38>)
 800135c:	4c0d      	ldr	r4, [pc, #52]	; (8001394 <__libc_init_array+0x3c>)
 800135e:	1b64      	subs	r4, r4, r5
 8001360:	10a4      	asrs	r4, r4, #2
 8001362:	2600      	movs	r6, #0
 8001364:	42a6      	cmp	r6, r4
 8001366:	d109      	bne.n	800137c <__libc_init_array+0x24>
 8001368:	4d0b      	ldr	r5, [pc, #44]	; (8001398 <__libc_init_array+0x40>)
 800136a:	4c0c      	ldr	r4, [pc, #48]	; (800139c <__libc_init_array+0x44>)
 800136c:	f001 f824 	bl	80023b8 <_init>
 8001370:	1b64      	subs	r4, r4, r5
 8001372:	10a4      	asrs	r4, r4, #2
 8001374:	2600      	movs	r6, #0
 8001376:	42a6      	cmp	r6, r4
 8001378:	d105      	bne.n	8001386 <__libc_init_array+0x2e>
 800137a:	bd70      	pop	{r4, r5, r6, pc}
 800137c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001380:	4798      	blx	r3
 8001382:	3601      	adds	r6, #1
 8001384:	e7ee      	b.n	8001364 <__libc_init_array+0xc>
 8001386:	f855 3b04 	ldr.w	r3, [r5], #4
 800138a:	4798      	blx	r3
 800138c:	3601      	adds	r6, #1
 800138e:	e7f2      	b.n	8001376 <__libc_init_array+0x1e>
 8001390:	080024a8 	.word	0x080024a8
 8001394:	080024a8 	.word	0x080024a8
 8001398:	080024a8 	.word	0x080024a8
 800139c:	080024ac 	.word	0x080024ac

080013a0 <memset>:
 80013a0:	4402      	add	r2, r0
 80013a2:	4603      	mov	r3, r0
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d100      	bne.n	80013aa <memset+0xa>
 80013a8:	4770      	bx	lr
 80013aa:	f803 1b01 	strb.w	r1, [r3], #1
 80013ae:	e7f9      	b.n	80013a4 <memset+0x4>

080013b0 <iprintf>:
 80013b0:	b40f      	push	{r0, r1, r2, r3}
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <iprintf+0x2c>)
 80013b4:	b513      	push	{r0, r1, r4, lr}
 80013b6:	681c      	ldr	r4, [r3, #0]
 80013b8:	b124      	cbz	r4, 80013c4 <iprintf+0x14>
 80013ba:	69a3      	ldr	r3, [r4, #24]
 80013bc:	b913      	cbnz	r3, 80013c4 <iprintf+0x14>
 80013be:	4620      	mov	r0, r4
 80013c0:	f000 fa5e 	bl	8001880 <__sinit>
 80013c4:	ab05      	add	r3, sp, #20
 80013c6:	9a04      	ldr	r2, [sp, #16]
 80013c8:	68a1      	ldr	r1, [r4, #8]
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	4620      	mov	r0, r4
 80013ce:	f000 fc67 	bl	8001ca0 <_vfiprintf_r>
 80013d2:	b002      	add	sp, #8
 80013d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013d8:	b004      	add	sp, #16
 80013da:	4770      	bx	lr
 80013dc:	20000000 	.word	0x20000000

080013e0 <_puts_r>:
 80013e0:	b570      	push	{r4, r5, r6, lr}
 80013e2:	460e      	mov	r6, r1
 80013e4:	4605      	mov	r5, r0
 80013e6:	b118      	cbz	r0, 80013f0 <_puts_r+0x10>
 80013e8:	6983      	ldr	r3, [r0, #24]
 80013ea:	b90b      	cbnz	r3, 80013f0 <_puts_r+0x10>
 80013ec:	f000 fa48 	bl	8001880 <__sinit>
 80013f0:	69ab      	ldr	r3, [r5, #24]
 80013f2:	68ac      	ldr	r4, [r5, #8]
 80013f4:	b913      	cbnz	r3, 80013fc <_puts_r+0x1c>
 80013f6:	4628      	mov	r0, r5
 80013f8:	f000 fa42 	bl	8001880 <__sinit>
 80013fc:	4b2c      	ldr	r3, [pc, #176]	; (80014b0 <_puts_r+0xd0>)
 80013fe:	429c      	cmp	r4, r3
 8001400:	d120      	bne.n	8001444 <_puts_r+0x64>
 8001402:	686c      	ldr	r4, [r5, #4]
 8001404:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001406:	07db      	lsls	r3, r3, #31
 8001408:	d405      	bmi.n	8001416 <_puts_r+0x36>
 800140a:	89a3      	ldrh	r3, [r4, #12]
 800140c:	0598      	lsls	r0, r3, #22
 800140e:	d402      	bmi.n	8001416 <_puts_r+0x36>
 8001410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001412:	f000 fad3 	bl	80019bc <__retarget_lock_acquire_recursive>
 8001416:	89a3      	ldrh	r3, [r4, #12]
 8001418:	0719      	lsls	r1, r3, #28
 800141a:	d51d      	bpl.n	8001458 <_puts_r+0x78>
 800141c:	6923      	ldr	r3, [r4, #16]
 800141e:	b1db      	cbz	r3, 8001458 <_puts_r+0x78>
 8001420:	3e01      	subs	r6, #1
 8001422:	68a3      	ldr	r3, [r4, #8]
 8001424:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001428:	3b01      	subs	r3, #1
 800142a:	60a3      	str	r3, [r4, #8]
 800142c:	bb39      	cbnz	r1, 800147e <_puts_r+0x9e>
 800142e:	2b00      	cmp	r3, #0
 8001430:	da38      	bge.n	80014a4 <_puts_r+0xc4>
 8001432:	4622      	mov	r2, r4
 8001434:	210a      	movs	r1, #10
 8001436:	4628      	mov	r0, r5
 8001438:	f000 f848 	bl	80014cc <__swbuf_r>
 800143c:	3001      	adds	r0, #1
 800143e:	d011      	beq.n	8001464 <_puts_r+0x84>
 8001440:	250a      	movs	r5, #10
 8001442:	e011      	b.n	8001468 <_puts_r+0x88>
 8001444:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <_puts_r+0xd4>)
 8001446:	429c      	cmp	r4, r3
 8001448:	d101      	bne.n	800144e <_puts_r+0x6e>
 800144a:	68ac      	ldr	r4, [r5, #8]
 800144c:	e7da      	b.n	8001404 <_puts_r+0x24>
 800144e:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <_puts_r+0xd8>)
 8001450:	429c      	cmp	r4, r3
 8001452:	bf08      	it	eq
 8001454:	68ec      	ldreq	r4, [r5, #12]
 8001456:	e7d5      	b.n	8001404 <_puts_r+0x24>
 8001458:	4621      	mov	r1, r4
 800145a:	4628      	mov	r0, r5
 800145c:	f000 f888 	bl	8001570 <__swsetup_r>
 8001460:	2800      	cmp	r0, #0
 8001462:	d0dd      	beq.n	8001420 <_puts_r+0x40>
 8001464:	f04f 35ff 	mov.w	r5, #4294967295
 8001468:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800146a:	07da      	lsls	r2, r3, #31
 800146c:	d405      	bmi.n	800147a <_puts_r+0x9a>
 800146e:	89a3      	ldrh	r3, [r4, #12]
 8001470:	059b      	lsls	r3, r3, #22
 8001472:	d402      	bmi.n	800147a <_puts_r+0x9a>
 8001474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001476:	f000 faa2 	bl	80019be <__retarget_lock_release_recursive>
 800147a:	4628      	mov	r0, r5
 800147c:	bd70      	pop	{r4, r5, r6, pc}
 800147e:	2b00      	cmp	r3, #0
 8001480:	da04      	bge.n	800148c <_puts_r+0xac>
 8001482:	69a2      	ldr	r2, [r4, #24]
 8001484:	429a      	cmp	r2, r3
 8001486:	dc06      	bgt.n	8001496 <_puts_r+0xb6>
 8001488:	290a      	cmp	r1, #10
 800148a:	d004      	beq.n	8001496 <_puts_r+0xb6>
 800148c:	6823      	ldr	r3, [r4, #0]
 800148e:	1c5a      	adds	r2, r3, #1
 8001490:	6022      	str	r2, [r4, #0]
 8001492:	7019      	strb	r1, [r3, #0]
 8001494:	e7c5      	b.n	8001422 <_puts_r+0x42>
 8001496:	4622      	mov	r2, r4
 8001498:	4628      	mov	r0, r5
 800149a:	f000 f817 	bl	80014cc <__swbuf_r>
 800149e:	3001      	adds	r0, #1
 80014a0:	d1bf      	bne.n	8001422 <_puts_r+0x42>
 80014a2:	e7df      	b.n	8001464 <_puts_r+0x84>
 80014a4:	6823      	ldr	r3, [r4, #0]
 80014a6:	250a      	movs	r5, #10
 80014a8:	1c5a      	adds	r2, r3, #1
 80014aa:	6022      	str	r2, [r4, #0]
 80014ac:	701d      	strb	r5, [r3, #0]
 80014ae:	e7db      	b.n	8001468 <_puts_r+0x88>
 80014b0:	08002434 	.word	0x08002434
 80014b4:	08002454 	.word	0x08002454
 80014b8:	08002414 	.word	0x08002414

080014bc <puts>:
 80014bc:	4b02      	ldr	r3, [pc, #8]	; (80014c8 <puts+0xc>)
 80014be:	4601      	mov	r1, r0
 80014c0:	6818      	ldr	r0, [r3, #0]
 80014c2:	f7ff bf8d 	b.w	80013e0 <_puts_r>
 80014c6:	bf00      	nop
 80014c8:	20000000 	.word	0x20000000

080014cc <__swbuf_r>:
 80014cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ce:	460e      	mov	r6, r1
 80014d0:	4614      	mov	r4, r2
 80014d2:	4605      	mov	r5, r0
 80014d4:	b118      	cbz	r0, 80014de <__swbuf_r+0x12>
 80014d6:	6983      	ldr	r3, [r0, #24]
 80014d8:	b90b      	cbnz	r3, 80014de <__swbuf_r+0x12>
 80014da:	f000 f9d1 	bl	8001880 <__sinit>
 80014de:	4b21      	ldr	r3, [pc, #132]	; (8001564 <__swbuf_r+0x98>)
 80014e0:	429c      	cmp	r4, r3
 80014e2:	d12b      	bne.n	800153c <__swbuf_r+0x70>
 80014e4:	686c      	ldr	r4, [r5, #4]
 80014e6:	69a3      	ldr	r3, [r4, #24]
 80014e8:	60a3      	str	r3, [r4, #8]
 80014ea:	89a3      	ldrh	r3, [r4, #12]
 80014ec:	071a      	lsls	r2, r3, #28
 80014ee:	d52f      	bpl.n	8001550 <__swbuf_r+0x84>
 80014f0:	6923      	ldr	r3, [r4, #16]
 80014f2:	b36b      	cbz	r3, 8001550 <__swbuf_r+0x84>
 80014f4:	6923      	ldr	r3, [r4, #16]
 80014f6:	6820      	ldr	r0, [r4, #0]
 80014f8:	1ac0      	subs	r0, r0, r3
 80014fa:	6963      	ldr	r3, [r4, #20]
 80014fc:	b2f6      	uxtb	r6, r6
 80014fe:	4283      	cmp	r3, r0
 8001500:	4637      	mov	r7, r6
 8001502:	dc04      	bgt.n	800150e <__swbuf_r+0x42>
 8001504:	4621      	mov	r1, r4
 8001506:	4628      	mov	r0, r5
 8001508:	f000 f926 	bl	8001758 <_fflush_r>
 800150c:	bb30      	cbnz	r0, 800155c <__swbuf_r+0x90>
 800150e:	68a3      	ldr	r3, [r4, #8]
 8001510:	3b01      	subs	r3, #1
 8001512:	60a3      	str	r3, [r4, #8]
 8001514:	6823      	ldr	r3, [r4, #0]
 8001516:	1c5a      	adds	r2, r3, #1
 8001518:	6022      	str	r2, [r4, #0]
 800151a:	701e      	strb	r6, [r3, #0]
 800151c:	6963      	ldr	r3, [r4, #20]
 800151e:	3001      	adds	r0, #1
 8001520:	4283      	cmp	r3, r0
 8001522:	d004      	beq.n	800152e <__swbuf_r+0x62>
 8001524:	89a3      	ldrh	r3, [r4, #12]
 8001526:	07db      	lsls	r3, r3, #31
 8001528:	d506      	bpl.n	8001538 <__swbuf_r+0x6c>
 800152a:	2e0a      	cmp	r6, #10
 800152c:	d104      	bne.n	8001538 <__swbuf_r+0x6c>
 800152e:	4621      	mov	r1, r4
 8001530:	4628      	mov	r0, r5
 8001532:	f000 f911 	bl	8001758 <_fflush_r>
 8001536:	b988      	cbnz	r0, 800155c <__swbuf_r+0x90>
 8001538:	4638      	mov	r0, r7
 800153a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800153c:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <__swbuf_r+0x9c>)
 800153e:	429c      	cmp	r4, r3
 8001540:	d101      	bne.n	8001546 <__swbuf_r+0x7a>
 8001542:	68ac      	ldr	r4, [r5, #8]
 8001544:	e7cf      	b.n	80014e6 <__swbuf_r+0x1a>
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <__swbuf_r+0xa0>)
 8001548:	429c      	cmp	r4, r3
 800154a:	bf08      	it	eq
 800154c:	68ec      	ldreq	r4, [r5, #12]
 800154e:	e7ca      	b.n	80014e6 <__swbuf_r+0x1a>
 8001550:	4621      	mov	r1, r4
 8001552:	4628      	mov	r0, r5
 8001554:	f000 f80c 	bl	8001570 <__swsetup_r>
 8001558:	2800      	cmp	r0, #0
 800155a:	d0cb      	beq.n	80014f4 <__swbuf_r+0x28>
 800155c:	f04f 37ff 	mov.w	r7, #4294967295
 8001560:	e7ea      	b.n	8001538 <__swbuf_r+0x6c>
 8001562:	bf00      	nop
 8001564:	08002434 	.word	0x08002434
 8001568:	08002454 	.word	0x08002454
 800156c:	08002414 	.word	0x08002414

08001570 <__swsetup_r>:
 8001570:	4b32      	ldr	r3, [pc, #200]	; (800163c <__swsetup_r+0xcc>)
 8001572:	b570      	push	{r4, r5, r6, lr}
 8001574:	681d      	ldr	r5, [r3, #0]
 8001576:	4606      	mov	r6, r0
 8001578:	460c      	mov	r4, r1
 800157a:	b125      	cbz	r5, 8001586 <__swsetup_r+0x16>
 800157c:	69ab      	ldr	r3, [r5, #24]
 800157e:	b913      	cbnz	r3, 8001586 <__swsetup_r+0x16>
 8001580:	4628      	mov	r0, r5
 8001582:	f000 f97d 	bl	8001880 <__sinit>
 8001586:	4b2e      	ldr	r3, [pc, #184]	; (8001640 <__swsetup_r+0xd0>)
 8001588:	429c      	cmp	r4, r3
 800158a:	d10f      	bne.n	80015ac <__swsetup_r+0x3c>
 800158c:	686c      	ldr	r4, [r5, #4]
 800158e:	89a3      	ldrh	r3, [r4, #12]
 8001590:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001594:	0719      	lsls	r1, r3, #28
 8001596:	d42c      	bmi.n	80015f2 <__swsetup_r+0x82>
 8001598:	06dd      	lsls	r5, r3, #27
 800159a:	d411      	bmi.n	80015c0 <__swsetup_r+0x50>
 800159c:	2309      	movs	r3, #9
 800159e:	6033      	str	r3, [r6, #0]
 80015a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80015a4:	81a3      	strh	r3, [r4, #12]
 80015a6:	f04f 30ff 	mov.w	r0, #4294967295
 80015aa:	e03e      	b.n	800162a <__swsetup_r+0xba>
 80015ac:	4b25      	ldr	r3, [pc, #148]	; (8001644 <__swsetup_r+0xd4>)
 80015ae:	429c      	cmp	r4, r3
 80015b0:	d101      	bne.n	80015b6 <__swsetup_r+0x46>
 80015b2:	68ac      	ldr	r4, [r5, #8]
 80015b4:	e7eb      	b.n	800158e <__swsetup_r+0x1e>
 80015b6:	4b24      	ldr	r3, [pc, #144]	; (8001648 <__swsetup_r+0xd8>)
 80015b8:	429c      	cmp	r4, r3
 80015ba:	bf08      	it	eq
 80015bc:	68ec      	ldreq	r4, [r5, #12]
 80015be:	e7e6      	b.n	800158e <__swsetup_r+0x1e>
 80015c0:	0758      	lsls	r0, r3, #29
 80015c2:	d512      	bpl.n	80015ea <__swsetup_r+0x7a>
 80015c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80015c6:	b141      	cbz	r1, 80015da <__swsetup_r+0x6a>
 80015c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80015cc:	4299      	cmp	r1, r3
 80015ce:	d002      	beq.n	80015d6 <__swsetup_r+0x66>
 80015d0:	4630      	mov	r0, r6
 80015d2:	f000 fa5b 	bl	8001a8c <_free_r>
 80015d6:	2300      	movs	r3, #0
 80015d8:	6363      	str	r3, [r4, #52]	; 0x34
 80015da:	89a3      	ldrh	r3, [r4, #12]
 80015dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80015e0:	81a3      	strh	r3, [r4, #12]
 80015e2:	2300      	movs	r3, #0
 80015e4:	6063      	str	r3, [r4, #4]
 80015e6:	6923      	ldr	r3, [r4, #16]
 80015e8:	6023      	str	r3, [r4, #0]
 80015ea:	89a3      	ldrh	r3, [r4, #12]
 80015ec:	f043 0308 	orr.w	r3, r3, #8
 80015f0:	81a3      	strh	r3, [r4, #12]
 80015f2:	6923      	ldr	r3, [r4, #16]
 80015f4:	b94b      	cbnz	r3, 800160a <__swsetup_r+0x9a>
 80015f6:	89a3      	ldrh	r3, [r4, #12]
 80015f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80015fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001600:	d003      	beq.n	800160a <__swsetup_r+0x9a>
 8001602:	4621      	mov	r1, r4
 8001604:	4630      	mov	r0, r6
 8001606:	f000 fa01 	bl	8001a0c <__smakebuf_r>
 800160a:	89a0      	ldrh	r0, [r4, #12]
 800160c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001610:	f010 0301 	ands.w	r3, r0, #1
 8001614:	d00a      	beq.n	800162c <__swsetup_r+0xbc>
 8001616:	2300      	movs	r3, #0
 8001618:	60a3      	str	r3, [r4, #8]
 800161a:	6963      	ldr	r3, [r4, #20]
 800161c:	425b      	negs	r3, r3
 800161e:	61a3      	str	r3, [r4, #24]
 8001620:	6923      	ldr	r3, [r4, #16]
 8001622:	b943      	cbnz	r3, 8001636 <__swsetup_r+0xc6>
 8001624:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001628:	d1ba      	bne.n	80015a0 <__swsetup_r+0x30>
 800162a:	bd70      	pop	{r4, r5, r6, pc}
 800162c:	0781      	lsls	r1, r0, #30
 800162e:	bf58      	it	pl
 8001630:	6963      	ldrpl	r3, [r4, #20]
 8001632:	60a3      	str	r3, [r4, #8]
 8001634:	e7f4      	b.n	8001620 <__swsetup_r+0xb0>
 8001636:	2000      	movs	r0, #0
 8001638:	e7f7      	b.n	800162a <__swsetup_r+0xba>
 800163a:	bf00      	nop
 800163c:	20000000 	.word	0x20000000
 8001640:	08002434 	.word	0x08002434
 8001644:	08002454 	.word	0x08002454
 8001648:	08002414 	.word	0x08002414

0800164c <__sflush_r>:
 800164c:	898a      	ldrh	r2, [r1, #12]
 800164e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001652:	4605      	mov	r5, r0
 8001654:	0710      	lsls	r0, r2, #28
 8001656:	460c      	mov	r4, r1
 8001658:	d458      	bmi.n	800170c <__sflush_r+0xc0>
 800165a:	684b      	ldr	r3, [r1, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	dc05      	bgt.n	800166c <__sflush_r+0x20>
 8001660:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001662:	2b00      	cmp	r3, #0
 8001664:	dc02      	bgt.n	800166c <__sflush_r+0x20>
 8001666:	2000      	movs	r0, #0
 8001668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800166c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800166e:	2e00      	cmp	r6, #0
 8001670:	d0f9      	beq.n	8001666 <__sflush_r+0x1a>
 8001672:	2300      	movs	r3, #0
 8001674:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001678:	682f      	ldr	r7, [r5, #0]
 800167a:	602b      	str	r3, [r5, #0]
 800167c:	d032      	beq.n	80016e4 <__sflush_r+0x98>
 800167e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001680:	89a3      	ldrh	r3, [r4, #12]
 8001682:	075a      	lsls	r2, r3, #29
 8001684:	d505      	bpl.n	8001692 <__sflush_r+0x46>
 8001686:	6863      	ldr	r3, [r4, #4]
 8001688:	1ac0      	subs	r0, r0, r3
 800168a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800168c:	b10b      	cbz	r3, 8001692 <__sflush_r+0x46>
 800168e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001690:	1ac0      	subs	r0, r0, r3
 8001692:	2300      	movs	r3, #0
 8001694:	4602      	mov	r2, r0
 8001696:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001698:	6a21      	ldr	r1, [r4, #32]
 800169a:	4628      	mov	r0, r5
 800169c:	47b0      	blx	r6
 800169e:	1c43      	adds	r3, r0, #1
 80016a0:	89a3      	ldrh	r3, [r4, #12]
 80016a2:	d106      	bne.n	80016b2 <__sflush_r+0x66>
 80016a4:	6829      	ldr	r1, [r5, #0]
 80016a6:	291d      	cmp	r1, #29
 80016a8:	d82c      	bhi.n	8001704 <__sflush_r+0xb8>
 80016aa:	4a2a      	ldr	r2, [pc, #168]	; (8001754 <__sflush_r+0x108>)
 80016ac:	40ca      	lsrs	r2, r1
 80016ae:	07d6      	lsls	r6, r2, #31
 80016b0:	d528      	bpl.n	8001704 <__sflush_r+0xb8>
 80016b2:	2200      	movs	r2, #0
 80016b4:	6062      	str	r2, [r4, #4]
 80016b6:	04d9      	lsls	r1, r3, #19
 80016b8:	6922      	ldr	r2, [r4, #16]
 80016ba:	6022      	str	r2, [r4, #0]
 80016bc:	d504      	bpl.n	80016c8 <__sflush_r+0x7c>
 80016be:	1c42      	adds	r2, r0, #1
 80016c0:	d101      	bne.n	80016c6 <__sflush_r+0x7a>
 80016c2:	682b      	ldr	r3, [r5, #0]
 80016c4:	b903      	cbnz	r3, 80016c8 <__sflush_r+0x7c>
 80016c6:	6560      	str	r0, [r4, #84]	; 0x54
 80016c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80016ca:	602f      	str	r7, [r5, #0]
 80016cc:	2900      	cmp	r1, #0
 80016ce:	d0ca      	beq.n	8001666 <__sflush_r+0x1a>
 80016d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80016d4:	4299      	cmp	r1, r3
 80016d6:	d002      	beq.n	80016de <__sflush_r+0x92>
 80016d8:	4628      	mov	r0, r5
 80016da:	f000 f9d7 	bl	8001a8c <_free_r>
 80016de:	2000      	movs	r0, #0
 80016e0:	6360      	str	r0, [r4, #52]	; 0x34
 80016e2:	e7c1      	b.n	8001668 <__sflush_r+0x1c>
 80016e4:	6a21      	ldr	r1, [r4, #32]
 80016e6:	2301      	movs	r3, #1
 80016e8:	4628      	mov	r0, r5
 80016ea:	47b0      	blx	r6
 80016ec:	1c41      	adds	r1, r0, #1
 80016ee:	d1c7      	bne.n	8001680 <__sflush_r+0x34>
 80016f0:	682b      	ldr	r3, [r5, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0c4      	beq.n	8001680 <__sflush_r+0x34>
 80016f6:	2b1d      	cmp	r3, #29
 80016f8:	d001      	beq.n	80016fe <__sflush_r+0xb2>
 80016fa:	2b16      	cmp	r3, #22
 80016fc:	d101      	bne.n	8001702 <__sflush_r+0xb6>
 80016fe:	602f      	str	r7, [r5, #0]
 8001700:	e7b1      	b.n	8001666 <__sflush_r+0x1a>
 8001702:	89a3      	ldrh	r3, [r4, #12]
 8001704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001708:	81a3      	strh	r3, [r4, #12]
 800170a:	e7ad      	b.n	8001668 <__sflush_r+0x1c>
 800170c:	690f      	ldr	r7, [r1, #16]
 800170e:	2f00      	cmp	r7, #0
 8001710:	d0a9      	beq.n	8001666 <__sflush_r+0x1a>
 8001712:	0793      	lsls	r3, r2, #30
 8001714:	680e      	ldr	r6, [r1, #0]
 8001716:	bf08      	it	eq
 8001718:	694b      	ldreq	r3, [r1, #20]
 800171a:	600f      	str	r7, [r1, #0]
 800171c:	bf18      	it	ne
 800171e:	2300      	movne	r3, #0
 8001720:	eba6 0807 	sub.w	r8, r6, r7
 8001724:	608b      	str	r3, [r1, #8]
 8001726:	f1b8 0f00 	cmp.w	r8, #0
 800172a:	dd9c      	ble.n	8001666 <__sflush_r+0x1a>
 800172c:	6a21      	ldr	r1, [r4, #32]
 800172e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001730:	4643      	mov	r3, r8
 8001732:	463a      	mov	r2, r7
 8001734:	4628      	mov	r0, r5
 8001736:	47b0      	blx	r6
 8001738:	2800      	cmp	r0, #0
 800173a:	dc06      	bgt.n	800174a <__sflush_r+0xfe>
 800173c:	89a3      	ldrh	r3, [r4, #12]
 800173e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001742:	81a3      	strh	r3, [r4, #12]
 8001744:	f04f 30ff 	mov.w	r0, #4294967295
 8001748:	e78e      	b.n	8001668 <__sflush_r+0x1c>
 800174a:	4407      	add	r7, r0
 800174c:	eba8 0800 	sub.w	r8, r8, r0
 8001750:	e7e9      	b.n	8001726 <__sflush_r+0xda>
 8001752:	bf00      	nop
 8001754:	20400001 	.word	0x20400001

08001758 <_fflush_r>:
 8001758:	b538      	push	{r3, r4, r5, lr}
 800175a:	690b      	ldr	r3, [r1, #16]
 800175c:	4605      	mov	r5, r0
 800175e:	460c      	mov	r4, r1
 8001760:	b913      	cbnz	r3, 8001768 <_fflush_r+0x10>
 8001762:	2500      	movs	r5, #0
 8001764:	4628      	mov	r0, r5
 8001766:	bd38      	pop	{r3, r4, r5, pc}
 8001768:	b118      	cbz	r0, 8001772 <_fflush_r+0x1a>
 800176a:	6983      	ldr	r3, [r0, #24]
 800176c:	b90b      	cbnz	r3, 8001772 <_fflush_r+0x1a>
 800176e:	f000 f887 	bl	8001880 <__sinit>
 8001772:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <_fflush_r+0x6c>)
 8001774:	429c      	cmp	r4, r3
 8001776:	d11b      	bne.n	80017b0 <_fflush_r+0x58>
 8001778:	686c      	ldr	r4, [r5, #4]
 800177a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0ef      	beq.n	8001762 <_fflush_r+0xa>
 8001782:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001784:	07d0      	lsls	r0, r2, #31
 8001786:	d404      	bmi.n	8001792 <_fflush_r+0x3a>
 8001788:	0599      	lsls	r1, r3, #22
 800178a:	d402      	bmi.n	8001792 <_fflush_r+0x3a>
 800178c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800178e:	f000 f915 	bl	80019bc <__retarget_lock_acquire_recursive>
 8001792:	4628      	mov	r0, r5
 8001794:	4621      	mov	r1, r4
 8001796:	f7ff ff59 	bl	800164c <__sflush_r>
 800179a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800179c:	07da      	lsls	r2, r3, #31
 800179e:	4605      	mov	r5, r0
 80017a0:	d4e0      	bmi.n	8001764 <_fflush_r+0xc>
 80017a2:	89a3      	ldrh	r3, [r4, #12]
 80017a4:	059b      	lsls	r3, r3, #22
 80017a6:	d4dd      	bmi.n	8001764 <_fflush_r+0xc>
 80017a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017aa:	f000 f908 	bl	80019be <__retarget_lock_release_recursive>
 80017ae:	e7d9      	b.n	8001764 <_fflush_r+0xc>
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <_fflush_r+0x70>)
 80017b2:	429c      	cmp	r4, r3
 80017b4:	d101      	bne.n	80017ba <_fflush_r+0x62>
 80017b6:	68ac      	ldr	r4, [r5, #8]
 80017b8:	e7df      	b.n	800177a <_fflush_r+0x22>
 80017ba:	4b04      	ldr	r3, [pc, #16]	; (80017cc <_fflush_r+0x74>)
 80017bc:	429c      	cmp	r4, r3
 80017be:	bf08      	it	eq
 80017c0:	68ec      	ldreq	r4, [r5, #12]
 80017c2:	e7da      	b.n	800177a <_fflush_r+0x22>
 80017c4:	08002434 	.word	0x08002434
 80017c8:	08002454 	.word	0x08002454
 80017cc:	08002414 	.word	0x08002414

080017d0 <std>:
 80017d0:	2300      	movs	r3, #0
 80017d2:	b510      	push	{r4, lr}
 80017d4:	4604      	mov	r4, r0
 80017d6:	e9c0 3300 	strd	r3, r3, [r0]
 80017da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80017de:	6083      	str	r3, [r0, #8]
 80017e0:	8181      	strh	r1, [r0, #12]
 80017e2:	6643      	str	r3, [r0, #100]	; 0x64
 80017e4:	81c2      	strh	r2, [r0, #14]
 80017e6:	6183      	str	r3, [r0, #24]
 80017e8:	4619      	mov	r1, r3
 80017ea:	2208      	movs	r2, #8
 80017ec:	305c      	adds	r0, #92	; 0x5c
 80017ee:	f7ff fdd7 	bl	80013a0 <memset>
 80017f2:	4b05      	ldr	r3, [pc, #20]	; (8001808 <std+0x38>)
 80017f4:	6263      	str	r3, [r4, #36]	; 0x24
 80017f6:	4b05      	ldr	r3, [pc, #20]	; (800180c <std+0x3c>)
 80017f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80017fa:	4b05      	ldr	r3, [pc, #20]	; (8001810 <std+0x40>)
 80017fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80017fe:	4b05      	ldr	r3, [pc, #20]	; (8001814 <std+0x44>)
 8001800:	6224      	str	r4, [r4, #32]
 8001802:	6323      	str	r3, [r4, #48]	; 0x30
 8001804:	bd10      	pop	{r4, pc}
 8001806:	bf00      	nop
 8001808:	08002249 	.word	0x08002249
 800180c:	0800226b 	.word	0x0800226b
 8001810:	080022a3 	.word	0x080022a3
 8001814:	080022c7 	.word	0x080022c7

08001818 <_cleanup_r>:
 8001818:	4901      	ldr	r1, [pc, #4]	; (8001820 <_cleanup_r+0x8>)
 800181a:	f000 b8af 	b.w	800197c <_fwalk_reent>
 800181e:	bf00      	nop
 8001820:	08001759 	.word	0x08001759

08001824 <__sfmoreglue>:
 8001824:	b570      	push	{r4, r5, r6, lr}
 8001826:	2268      	movs	r2, #104	; 0x68
 8001828:	1e4d      	subs	r5, r1, #1
 800182a:	4355      	muls	r5, r2
 800182c:	460e      	mov	r6, r1
 800182e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001832:	f000 f997 	bl	8001b64 <_malloc_r>
 8001836:	4604      	mov	r4, r0
 8001838:	b140      	cbz	r0, 800184c <__sfmoreglue+0x28>
 800183a:	2100      	movs	r1, #0
 800183c:	e9c0 1600 	strd	r1, r6, [r0]
 8001840:	300c      	adds	r0, #12
 8001842:	60a0      	str	r0, [r4, #8]
 8001844:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001848:	f7ff fdaa 	bl	80013a0 <memset>
 800184c:	4620      	mov	r0, r4
 800184e:	bd70      	pop	{r4, r5, r6, pc}

08001850 <__sfp_lock_acquire>:
 8001850:	4801      	ldr	r0, [pc, #4]	; (8001858 <__sfp_lock_acquire+0x8>)
 8001852:	f000 b8b3 	b.w	80019bc <__retarget_lock_acquire_recursive>
 8001856:	bf00      	nop
 8001858:	20000085 	.word	0x20000085

0800185c <__sfp_lock_release>:
 800185c:	4801      	ldr	r0, [pc, #4]	; (8001864 <__sfp_lock_release+0x8>)
 800185e:	f000 b8ae 	b.w	80019be <__retarget_lock_release_recursive>
 8001862:	bf00      	nop
 8001864:	20000085 	.word	0x20000085

08001868 <__sinit_lock_acquire>:
 8001868:	4801      	ldr	r0, [pc, #4]	; (8001870 <__sinit_lock_acquire+0x8>)
 800186a:	f000 b8a7 	b.w	80019bc <__retarget_lock_acquire_recursive>
 800186e:	bf00      	nop
 8001870:	20000086 	.word	0x20000086

08001874 <__sinit_lock_release>:
 8001874:	4801      	ldr	r0, [pc, #4]	; (800187c <__sinit_lock_release+0x8>)
 8001876:	f000 b8a2 	b.w	80019be <__retarget_lock_release_recursive>
 800187a:	bf00      	nop
 800187c:	20000086 	.word	0x20000086

08001880 <__sinit>:
 8001880:	b510      	push	{r4, lr}
 8001882:	4604      	mov	r4, r0
 8001884:	f7ff fff0 	bl	8001868 <__sinit_lock_acquire>
 8001888:	69a3      	ldr	r3, [r4, #24]
 800188a:	b11b      	cbz	r3, 8001894 <__sinit+0x14>
 800188c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001890:	f7ff bff0 	b.w	8001874 <__sinit_lock_release>
 8001894:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001898:	6523      	str	r3, [r4, #80]	; 0x50
 800189a:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <__sinit+0x68>)
 800189c:	4a13      	ldr	r2, [pc, #76]	; (80018ec <__sinit+0x6c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80018a2:	42a3      	cmp	r3, r4
 80018a4:	bf04      	itt	eq
 80018a6:	2301      	moveq	r3, #1
 80018a8:	61a3      	streq	r3, [r4, #24]
 80018aa:	4620      	mov	r0, r4
 80018ac:	f000 f820 	bl	80018f0 <__sfp>
 80018b0:	6060      	str	r0, [r4, #4]
 80018b2:	4620      	mov	r0, r4
 80018b4:	f000 f81c 	bl	80018f0 <__sfp>
 80018b8:	60a0      	str	r0, [r4, #8]
 80018ba:	4620      	mov	r0, r4
 80018bc:	f000 f818 	bl	80018f0 <__sfp>
 80018c0:	2200      	movs	r2, #0
 80018c2:	60e0      	str	r0, [r4, #12]
 80018c4:	2104      	movs	r1, #4
 80018c6:	6860      	ldr	r0, [r4, #4]
 80018c8:	f7ff ff82 	bl	80017d0 <std>
 80018cc:	68a0      	ldr	r0, [r4, #8]
 80018ce:	2201      	movs	r2, #1
 80018d0:	2109      	movs	r1, #9
 80018d2:	f7ff ff7d 	bl	80017d0 <std>
 80018d6:	68e0      	ldr	r0, [r4, #12]
 80018d8:	2202      	movs	r2, #2
 80018da:	2112      	movs	r1, #18
 80018dc:	f7ff ff78 	bl	80017d0 <std>
 80018e0:	2301      	movs	r3, #1
 80018e2:	61a3      	str	r3, [r4, #24]
 80018e4:	e7d2      	b.n	800188c <__sinit+0xc>
 80018e6:	bf00      	nop
 80018e8:	08002410 	.word	0x08002410
 80018ec:	08001819 	.word	0x08001819

080018f0 <__sfp>:
 80018f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018f2:	4607      	mov	r7, r0
 80018f4:	f7ff ffac 	bl	8001850 <__sfp_lock_acquire>
 80018f8:	4b1e      	ldr	r3, [pc, #120]	; (8001974 <__sfp+0x84>)
 80018fa:	681e      	ldr	r6, [r3, #0]
 80018fc:	69b3      	ldr	r3, [r6, #24]
 80018fe:	b913      	cbnz	r3, 8001906 <__sfp+0x16>
 8001900:	4630      	mov	r0, r6
 8001902:	f7ff ffbd 	bl	8001880 <__sinit>
 8001906:	3648      	adds	r6, #72	; 0x48
 8001908:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800190c:	3b01      	subs	r3, #1
 800190e:	d503      	bpl.n	8001918 <__sfp+0x28>
 8001910:	6833      	ldr	r3, [r6, #0]
 8001912:	b30b      	cbz	r3, 8001958 <__sfp+0x68>
 8001914:	6836      	ldr	r6, [r6, #0]
 8001916:	e7f7      	b.n	8001908 <__sfp+0x18>
 8001918:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800191c:	b9d5      	cbnz	r5, 8001954 <__sfp+0x64>
 800191e:	4b16      	ldr	r3, [pc, #88]	; (8001978 <__sfp+0x88>)
 8001920:	60e3      	str	r3, [r4, #12]
 8001922:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001926:	6665      	str	r5, [r4, #100]	; 0x64
 8001928:	f000 f847 	bl	80019ba <__retarget_lock_init_recursive>
 800192c:	f7ff ff96 	bl	800185c <__sfp_lock_release>
 8001930:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001934:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001938:	6025      	str	r5, [r4, #0]
 800193a:	61a5      	str	r5, [r4, #24]
 800193c:	2208      	movs	r2, #8
 800193e:	4629      	mov	r1, r5
 8001940:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001944:	f7ff fd2c 	bl	80013a0 <memset>
 8001948:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800194c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001950:	4620      	mov	r0, r4
 8001952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001954:	3468      	adds	r4, #104	; 0x68
 8001956:	e7d9      	b.n	800190c <__sfp+0x1c>
 8001958:	2104      	movs	r1, #4
 800195a:	4638      	mov	r0, r7
 800195c:	f7ff ff62 	bl	8001824 <__sfmoreglue>
 8001960:	4604      	mov	r4, r0
 8001962:	6030      	str	r0, [r6, #0]
 8001964:	2800      	cmp	r0, #0
 8001966:	d1d5      	bne.n	8001914 <__sfp+0x24>
 8001968:	f7ff ff78 	bl	800185c <__sfp_lock_release>
 800196c:	230c      	movs	r3, #12
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	e7ee      	b.n	8001950 <__sfp+0x60>
 8001972:	bf00      	nop
 8001974:	08002410 	.word	0x08002410
 8001978:	ffff0001 	.word	0xffff0001

0800197c <_fwalk_reent>:
 800197c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001980:	4606      	mov	r6, r0
 8001982:	4688      	mov	r8, r1
 8001984:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001988:	2700      	movs	r7, #0
 800198a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800198e:	f1b9 0901 	subs.w	r9, r9, #1
 8001992:	d505      	bpl.n	80019a0 <_fwalk_reent+0x24>
 8001994:	6824      	ldr	r4, [r4, #0]
 8001996:	2c00      	cmp	r4, #0
 8001998:	d1f7      	bne.n	800198a <_fwalk_reent+0xe>
 800199a:	4638      	mov	r0, r7
 800199c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80019a0:	89ab      	ldrh	r3, [r5, #12]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d907      	bls.n	80019b6 <_fwalk_reent+0x3a>
 80019a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80019aa:	3301      	adds	r3, #1
 80019ac:	d003      	beq.n	80019b6 <_fwalk_reent+0x3a>
 80019ae:	4629      	mov	r1, r5
 80019b0:	4630      	mov	r0, r6
 80019b2:	47c0      	blx	r8
 80019b4:	4307      	orrs	r7, r0
 80019b6:	3568      	adds	r5, #104	; 0x68
 80019b8:	e7e9      	b.n	800198e <_fwalk_reent+0x12>

080019ba <__retarget_lock_init_recursive>:
 80019ba:	4770      	bx	lr

080019bc <__retarget_lock_acquire_recursive>:
 80019bc:	4770      	bx	lr

080019be <__retarget_lock_release_recursive>:
 80019be:	4770      	bx	lr

080019c0 <__swhatbuf_r>:
 80019c0:	b570      	push	{r4, r5, r6, lr}
 80019c2:	460e      	mov	r6, r1
 80019c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019c8:	2900      	cmp	r1, #0
 80019ca:	b096      	sub	sp, #88	; 0x58
 80019cc:	4614      	mov	r4, r2
 80019ce:	461d      	mov	r5, r3
 80019d0:	da08      	bge.n	80019e4 <__swhatbuf_r+0x24>
 80019d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	602a      	str	r2, [r5, #0]
 80019da:	061a      	lsls	r2, r3, #24
 80019dc:	d410      	bmi.n	8001a00 <__swhatbuf_r+0x40>
 80019de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019e2:	e00e      	b.n	8001a02 <__swhatbuf_r+0x42>
 80019e4:	466a      	mov	r2, sp
 80019e6:	f000 fc95 	bl	8002314 <_fstat_r>
 80019ea:	2800      	cmp	r0, #0
 80019ec:	dbf1      	blt.n	80019d2 <__swhatbuf_r+0x12>
 80019ee:	9a01      	ldr	r2, [sp, #4]
 80019f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80019f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80019f8:	425a      	negs	r2, r3
 80019fa:	415a      	adcs	r2, r3
 80019fc:	602a      	str	r2, [r5, #0]
 80019fe:	e7ee      	b.n	80019de <__swhatbuf_r+0x1e>
 8001a00:	2340      	movs	r3, #64	; 0x40
 8001a02:	2000      	movs	r0, #0
 8001a04:	6023      	str	r3, [r4, #0]
 8001a06:	b016      	add	sp, #88	; 0x58
 8001a08:	bd70      	pop	{r4, r5, r6, pc}
	...

08001a0c <__smakebuf_r>:
 8001a0c:	898b      	ldrh	r3, [r1, #12]
 8001a0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a10:	079d      	lsls	r5, r3, #30
 8001a12:	4606      	mov	r6, r0
 8001a14:	460c      	mov	r4, r1
 8001a16:	d507      	bpl.n	8001a28 <__smakebuf_r+0x1c>
 8001a18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001a1c:	6023      	str	r3, [r4, #0]
 8001a1e:	6123      	str	r3, [r4, #16]
 8001a20:	2301      	movs	r3, #1
 8001a22:	6163      	str	r3, [r4, #20]
 8001a24:	b002      	add	sp, #8
 8001a26:	bd70      	pop	{r4, r5, r6, pc}
 8001a28:	ab01      	add	r3, sp, #4
 8001a2a:	466a      	mov	r2, sp
 8001a2c:	f7ff ffc8 	bl	80019c0 <__swhatbuf_r>
 8001a30:	9900      	ldr	r1, [sp, #0]
 8001a32:	4605      	mov	r5, r0
 8001a34:	4630      	mov	r0, r6
 8001a36:	f000 f895 	bl	8001b64 <_malloc_r>
 8001a3a:	b948      	cbnz	r0, 8001a50 <__smakebuf_r+0x44>
 8001a3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a40:	059a      	lsls	r2, r3, #22
 8001a42:	d4ef      	bmi.n	8001a24 <__smakebuf_r+0x18>
 8001a44:	f023 0303 	bic.w	r3, r3, #3
 8001a48:	f043 0302 	orr.w	r3, r3, #2
 8001a4c:	81a3      	strh	r3, [r4, #12]
 8001a4e:	e7e3      	b.n	8001a18 <__smakebuf_r+0xc>
 8001a50:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <__smakebuf_r+0x7c>)
 8001a52:	62b3      	str	r3, [r6, #40]	; 0x28
 8001a54:	89a3      	ldrh	r3, [r4, #12]
 8001a56:	6020      	str	r0, [r4, #0]
 8001a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a5c:	81a3      	strh	r3, [r4, #12]
 8001a5e:	9b00      	ldr	r3, [sp, #0]
 8001a60:	6163      	str	r3, [r4, #20]
 8001a62:	9b01      	ldr	r3, [sp, #4]
 8001a64:	6120      	str	r0, [r4, #16]
 8001a66:	b15b      	cbz	r3, 8001a80 <__smakebuf_r+0x74>
 8001a68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a6c:	4630      	mov	r0, r6
 8001a6e:	f000 fc63 	bl	8002338 <_isatty_r>
 8001a72:	b128      	cbz	r0, 8001a80 <__smakebuf_r+0x74>
 8001a74:	89a3      	ldrh	r3, [r4, #12]
 8001a76:	f023 0303 	bic.w	r3, r3, #3
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	81a3      	strh	r3, [r4, #12]
 8001a80:	89a0      	ldrh	r0, [r4, #12]
 8001a82:	4305      	orrs	r5, r0
 8001a84:	81a5      	strh	r5, [r4, #12]
 8001a86:	e7cd      	b.n	8001a24 <__smakebuf_r+0x18>
 8001a88:	08001819 	.word	0x08001819

08001a8c <_free_r>:
 8001a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001a8e:	2900      	cmp	r1, #0
 8001a90:	d044      	beq.n	8001b1c <_free_r+0x90>
 8001a92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a96:	9001      	str	r0, [sp, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f1a1 0404 	sub.w	r4, r1, #4
 8001a9e:	bfb8      	it	lt
 8001aa0:	18e4      	addlt	r4, r4, r3
 8001aa2:	f000 fc6b 	bl	800237c <__malloc_lock>
 8001aa6:	4a1e      	ldr	r2, [pc, #120]	; (8001b20 <_free_r+0x94>)
 8001aa8:	9801      	ldr	r0, [sp, #4]
 8001aaa:	6813      	ldr	r3, [r2, #0]
 8001aac:	b933      	cbnz	r3, 8001abc <_free_r+0x30>
 8001aae:	6063      	str	r3, [r4, #4]
 8001ab0:	6014      	str	r4, [r2, #0]
 8001ab2:	b003      	add	sp, #12
 8001ab4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001ab8:	f000 bc66 	b.w	8002388 <__malloc_unlock>
 8001abc:	42a3      	cmp	r3, r4
 8001abe:	d908      	bls.n	8001ad2 <_free_r+0x46>
 8001ac0:	6825      	ldr	r5, [r4, #0]
 8001ac2:	1961      	adds	r1, r4, r5
 8001ac4:	428b      	cmp	r3, r1
 8001ac6:	bf01      	itttt	eq
 8001ac8:	6819      	ldreq	r1, [r3, #0]
 8001aca:	685b      	ldreq	r3, [r3, #4]
 8001acc:	1949      	addeq	r1, r1, r5
 8001ace:	6021      	streq	r1, [r4, #0]
 8001ad0:	e7ed      	b.n	8001aae <_free_r+0x22>
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	b10b      	cbz	r3, 8001adc <_free_r+0x50>
 8001ad8:	42a3      	cmp	r3, r4
 8001ada:	d9fa      	bls.n	8001ad2 <_free_r+0x46>
 8001adc:	6811      	ldr	r1, [r2, #0]
 8001ade:	1855      	adds	r5, r2, r1
 8001ae0:	42a5      	cmp	r5, r4
 8001ae2:	d10b      	bne.n	8001afc <_free_r+0x70>
 8001ae4:	6824      	ldr	r4, [r4, #0]
 8001ae6:	4421      	add	r1, r4
 8001ae8:	1854      	adds	r4, r2, r1
 8001aea:	42a3      	cmp	r3, r4
 8001aec:	6011      	str	r1, [r2, #0]
 8001aee:	d1e0      	bne.n	8001ab2 <_free_r+0x26>
 8001af0:	681c      	ldr	r4, [r3, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	6053      	str	r3, [r2, #4]
 8001af6:	4421      	add	r1, r4
 8001af8:	6011      	str	r1, [r2, #0]
 8001afa:	e7da      	b.n	8001ab2 <_free_r+0x26>
 8001afc:	d902      	bls.n	8001b04 <_free_r+0x78>
 8001afe:	230c      	movs	r3, #12
 8001b00:	6003      	str	r3, [r0, #0]
 8001b02:	e7d6      	b.n	8001ab2 <_free_r+0x26>
 8001b04:	6825      	ldr	r5, [r4, #0]
 8001b06:	1961      	adds	r1, r4, r5
 8001b08:	428b      	cmp	r3, r1
 8001b0a:	bf04      	itt	eq
 8001b0c:	6819      	ldreq	r1, [r3, #0]
 8001b0e:	685b      	ldreq	r3, [r3, #4]
 8001b10:	6063      	str	r3, [r4, #4]
 8001b12:	bf04      	itt	eq
 8001b14:	1949      	addeq	r1, r1, r5
 8001b16:	6021      	streq	r1, [r4, #0]
 8001b18:	6054      	str	r4, [r2, #4]
 8001b1a:	e7ca      	b.n	8001ab2 <_free_r+0x26>
 8001b1c:	b003      	add	sp, #12
 8001b1e:	bd30      	pop	{r4, r5, pc}
 8001b20:	20000088 	.word	0x20000088

08001b24 <sbrk_aligned>:
 8001b24:	b570      	push	{r4, r5, r6, lr}
 8001b26:	4e0e      	ldr	r6, [pc, #56]	; (8001b60 <sbrk_aligned+0x3c>)
 8001b28:	460c      	mov	r4, r1
 8001b2a:	6831      	ldr	r1, [r6, #0]
 8001b2c:	4605      	mov	r5, r0
 8001b2e:	b911      	cbnz	r1, 8001b36 <sbrk_aligned+0x12>
 8001b30:	f000 fb7a 	bl	8002228 <_sbrk_r>
 8001b34:	6030      	str	r0, [r6, #0]
 8001b36:	4621      	mov	r1, r4
 8001b38:	4628      	mov	r0, r5
 8001b3a:	f000 fb75 	bl	8002228 <_sbrk_r>
 8001b3e:	1c43      	adds	r3, r0, #1
 8001b40:	d00a      	beq.n	8001b58 <sbrk_aligned+0x34>
 8001b42:	1cc4      	adds	r4, r0, #3
 8001b44:	f024 0403 	bic.w	r4, r4, #3
 8001b48:	42a0      	cmp	r0, r4
 8001b4a:	d007      	beq.n	8001b5c <sbrk_aligned+0x38>
 8001b4c:	1a21      	subs	r1, r4, r0
 8001b4e:	4628      	mov	r0, r5
 8001b50:	f000 fb6a 	bl	8002228 <_sbrk_r>
 8001b54:	3001      	adds	r0, #1
 8001b56:	d101      	bne.n	8001b5c <sbrk_aligned+0x38>
 8001b58:	f04f 34ff 	mov.w	r4, #4294967295
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	bd70      	pop	{r4, r5, r6, pc}
 8001b60:	2000008c 	.word	0x2000008c

08001b64 <_malloc_r>:
 8001b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b68:	1ccd      	adds	r5, r1, #3
 8001b6a:	f025 0503 	bic.w	r5, r5, #3
 8001b6e:	3508      	adds	r5, #8
 8001b70:	2d0c      	cmp	r5, #12
 8001b72:	bf38      	it	cc
 8001b74:	250c      	movcc	r5, #12
 8001b76:	2d00      	cmp	r5, #0
 8001b78:	4607      	mov	r7, r0
 8001b7a:	db01      	blt.n	8001b80 <_malloc_r+0x1c>
 8001b7c:	42a9      	cmp	r1, r5
 8001b7e:	d905      	bls.n	8001b8c <_malloc_r+0x28>
 8001b80:	230c      	movs	r3, #12
 8001b82:	603b      	str	r3, [r7, #0]
 8001b84:	2600      	movs	r6, #0
 8001b86:	4630      	mov	r0, r6
 8001b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b8c:	4e2e      	ldr	r6, [pc, #184]	; (8001c48 <_malloc_r+0xe4>)
 8001b8e:	f000 fbf5 	bl	800237c <__malloc_lock>
 8001b92:	6833      	ldr	r3, [r6, #0]
 8001b94:	461c      	mov	r4, r3
 8001b96:	bb34      	cbnz	r4, 8001be6 <_malloc_r+0x82>
 8001b98:	4629      	mov	r1, r5
 8001b9a:	4638      	mov	r0, r7
 8001b9c:	f7ff ffc2 	bl	8001b24 <sbrk_aligned>
 8001ba0:	1c43      	adds	r3, r0, #1
 8001ba2:	4604      	mov	r4, r0
 8001ba4:	d14d      	bne.n	8001c42 <_malloc_r+0xde>
 8001ba6:	6834      	ldr	r4, [r6, #0]
 8001ba8:	4626      	mov	r6, r4
 8001baa:	2e00      	cmp	r6, #0
 8001bac:	d140      	bne.n	8001c30 <_malloc_r+0xcc>
 8001bae:	6823      	ldr	r3, [r4, #0]
 8001bb0:	4631      	mov	r1, r6
 8001bb2:	4638      	mov	r0, r7
 8001bb4:	eb04 0803 	add.w	r8, r4, r3
 8001bb8:	f000 fb36 	bl	8002228 <_sbrk_r>
 8001bbc:	4580      	cmp	r8, r0
 8001bbe:	d13a      	bne.n	8001c36 <_malloc_r+0xd2>
 8001bc0:	6821      	ldr	r1, [r4, #0]
 8001bc2:	3503      	adds	r5, #3
 8001bc4:	1a6d      	subs	r5, r5, r1
 8001bc6:	f025 0503 	bic.w	r5, r5, #3
 8001bca:	3508      	adds	r5, #8
 8001bcc:	2d0c      	cmp	r5, #12
 8001bce:	bf38      	it	cc
 8001bd0:	250c      	movcc	r5, #12
 8001bd2:	4629      	mov	r1, r5
 8001bd4:	4638      	mov	r0, r7
 8001bd6:	f7ff ffa5 	bl	8001b24 <sbrk_aligned>
 8001bda:	3001      	adds	r0, #1
 8001bdc:	d02b      	beq.n	8001c36 <_malloc_r+0xd2>
 8001bde:	6823      	ldr	r3, [r4, #0]
 8001be0:	442b      	add	r3, r5
 8001be2:	6023      	str	r3, [r4, #0]
 8001be4:	e00e      	b.n	8001c04 <_malloc_r+0xa0>
 8001be6:	6822      	ldr	r2, [r4, #0]
 8001be8:	1b52      	subs	r2, r2, r5
 8001bea:	d41e      	bmi.n	8001c2a <_malloc_r+0xc6>
 8001bec:	2a0b      	cmp	r2, #11
 8001bee:	d916      	bls.n	8001c1e <_malloc_r+0xba>
 8001bf0:	1961      	adds	r1, r4, r5
 8001bf2:	42a3      	cmp	r3, r4
 8001bf4:	6025      	str	r5, [r4, #0]
 8001bf6:	bf18      	it	ne
 8001bf8:	6059      	strne	r1, [r3, #4]
 8001bfa:	6863      	ldr	r3, [r4, #4]
 8001bfc:	bf08      	it	eq
 8001bfe:	6031      	streq	r1, [r6, #0]
 8001c00:	5162      	str	r2, [r4, r5]
 8001c02:	604b      	str	r3, [r1, #4]
 8001c04:	4638      	mov	r0, r7
 8001c06:	f104 060b 	add.w	r6, r4, #11
 8001c0a:	f000 fbbd 	bl	8002388 <__malloc_unlock>
 8001c0e:	f026 0607 	bic.w	r6, r6, #7
 8001c12:	1d23      	adds	r3, r4, #4
 8001c14:	1af2      	subs	r2, r6, r3
 8001c16:	d0b6      	beq.n	8001b86 <_malloc_r+0x22>
 8001c18:	1b9b      	subs	r3, r3, r6
 8001c1a:	50a3      	str	r3, [r4, r2]
 8001c1c:	e7b3      	b.n	8001b86 <_malloc_r+0x22>
 8001c1e:	6862      	ldr	r2, [r4, #4]
 8001c20:	42a3      	cmp	r3, r4
 8001c22:	bf0c      	ite	eq
 8001c24:	6032      	streq	r2, [r6, #0]
 8001c26:	605a      	strne	r2, [r3, #4]
 8001c28:	e7ec      	b.n	8001c04 <_malloc_r+0xa0>
 8001c2a:	4623      	mov	r3, r4
 8001c2c:	6864      	ldr	r4, [r4, #4]
 8001c2e:	e7b2      	b.n	8001b96 <_malloc_r+0x32>
 8001c30:	4634      	mov	r4, r6
 8001c32:	6876      	ldr	r6, [r6, #4]
 8001c34:	e7b9      	b.n	8001baa <_malloc_r+0x46>
 8001c36:	230c      	movs	r3, #12
 8001c38:	603b      	str	r3, [r7, #0]
 8001c3a:	4638      	mov	r0, r7
 8001c3c:	f000 fba4 	bl	8002388 <__malloc_unlock>
 8001c40:	e7a1      	b.n	8001b86 <_malloc_r+0x22>
 8001c42:	6025      	str	r5, [r4, #0]
 8001c44:	e7de      	b.n	8001c04 <_malloc_r+0xa0>
 8001c46:	bf00      	nop
 8001c48:	20000088 	.word	0x20000088

08001c4c <__sfputc_r>:
 8001c4c:	6893      	ldr	r3, [r2, #8]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	b410      	push	{r4}
 8001c54:	6093      	str	r3, [r2, #8]
 8001c56:	da08      	bge.n	8001c6a <__sfputc_r+0x1e>
 8001c58:	6994      	ldr	r4, [r2, #24]
 8001c5a:	42a3      	cmp	r3, r4
 8001c5c:	db01      	blt.n	8001c62 <__sfputc_r+0x16>
 8001c5e:	290a      	cmp	r1, #10
 8001c60:	d103      	bne.n	8001c6a <__sfputc_r+0x1e>
 8001c62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c66:	f7ff bc31 	b.w	80014cc <__swbuf_r>
 8001c6a:	6813      	ldr	r3, [r2, #0]
 8001c6c:	1c58      	adds	r0, r3, #1
 8001c6e:	6010      	str	r0, [r2, #0]
 8001c70:	7019      	strb	r1, [r3, #0]
 8001c72:	4608      	mov	r0, r1
 8001c74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <__sfputs_r>:
 8001c7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c7c:	4606      	mov	r6, r0
 8001c7e:	460f      	mov	r7, r1
 8001c80:	4614      	mov	r4, r2
 8001c82:	18d5      	adds	r5, r2, r3
 8001c84:	42ac      	cmp	r4, r5
 8001c86:	d101      	bne.n	8001c8c <__sfputs_r+0x12>
 8001c88:	2000      	movs	r0, #0
 8001c8a:	e007      	b.n	8001c9c <__sfputs_r+0x22>
 8001c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c90:	463a      	mov	r2, r7
 8001c92:	4630      	mov	r0, r6
 8001c94:	f7ff ffda 	bl	8001c4c <__sfputc_r>
 8001c98:	1c43      	adds	r3, r0, #1
 8001c9a:	d1f3      	bne.n	8001c84 <__sfputs_r+0xa>
 8001c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001ca0 <_vfiprintf_r>:
 8001ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ca4:	460d      	mov	r5, r1
 8001ca6:	b09d      	sub	sp, #116	; 0x74
 8001ca8:	4614      	mov	r4, r2
 8001caa:	4698      	mov	r8, r3
 8001cac:	4606      	mov	r6, r0
 8001cae:	b118      	cbz	r0, 8001cb8 <_vfiprintf_r+0x18>
 8001cb0:	6983      	ldr	r3, [r0, #24]
 8001cb2:	b90b      	cbnz	r3, 8001cb8 <_vfiprintf_r+0x18>
 8001cb4:	f7ff fde4 	bl	8001880 <__sinit>
 8001cb8:	4b89      	ldr	r3, [pc, #548]	; (8001ee0 <_vfiprintf_r+0x240>)
 8001cba:	429d      	cmp	r5, r3
 8001cbc:	d11b      	bne.n	8001cf6 <_vfiprintf_r+0x56>
 8001cbe:	6875      	ldr	r5, [r6, #4]
 8001cc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001cc2:	07d9      	lsls	r1, r3, #31
 8001cc4:	d405      	bmi.n	8001cd2 <_vfiprintf_r+0x32>
 8001cc6:	89ab      	ldrh	r3, [r5, #12]
 8001cc8:	059a      	lsls	r2, r3, #22
 8001cca:	d402      	bmi.n	8001cd2 <_vfiprintf_r+0x32>
 8001ccc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001cce:	f7ff fe75 	bl	80019bc <__retarget_lock_acquire_recursive>
 8001cd2:	89ab      	ldrh	r3, [r5, #12]
 8001cd4:	071b      	lsls	r3, r3, #28
 8001cd6:	d501      	bpl.n	8001cdc <_vfiprintf_r+0x3c>
 8001cd8:	692b      	ldr	r3, [r5, #16]
 8001cda:	b9eb      	cbnz	r3, 8001d18 <_vfiprintf_r+0x78>
 8001cdc:	4629      	mov	r1, r5
 8001cde:	4630      	mov	r0, r6
 8001ce0:	f7ff fc46 	bl	8001570 <__swsetup_r>
 8001ce4:	b1c0      	cbz	r0, 8001d18 <_vfiprintf_r+0x78>
 8001ce6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001ce8:	07dc      	lsls	r4, r3, #31
 8001cea:	d50e      	bpl.n	8001d0a <_vfiprintf_r+0x6a>
 8001cec:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf0:	b01d      	add	sp, #116	; 0x74
 8001cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cf6:	4b7b      	ldr	r3, [pc, #492]	; (8001ee4 <_vfiprintf_r+0x244>)
 8001cf8:	429d      	cmp	r5, r3
 8001cfa:	d101      	bne.n	8001d00 <_vfiprintf_r+0x60>
 8001cfc:	68b5      	ldr	r5, [r6, #8]
 8001cfe:	e7df      	b.n	8001cc0 <_vfiprintf_r+0x20>
 8001d00:	4b79      	ldr	r3, [pc, #484]	; (8001ee8 <_vfiprintf_r+0x248>)
 8001d02:	429d      	cmp	r5, r3
 8001d04:	bf08      	it	eq
 8001d06:	68f5      	ldreq	r5, [r6, #12]
 8001d08:	e7da      	b.n	8001cc0 <_vfiprintf_r+0x20>
 8001d0a:	89ab      	ldrh	r3, [r5, #12]
 8001d0c:	0598      	lsls	r0, r3, #22
 8001d0e:	d4ed      	bmi.n	8001cec <_vfiprintf_r+0x4c>
 8001d10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001d12:	f7ff fe54 	bl	80019be <__retarget_lock_release_recursive>
 8001d16:	e7e9      	b.n	8001cec <_vfiprintf_r+0x4c>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8001d1c:	2320      	movs	r3, #32
 8001d1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001d22:	f8cd 800c 	str.w	r8, [sp, #12]
 8001d26:	2330      	movs	r3, #48	; 0x30
 8001d28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001eec <_vfiprintf_r+0x24c>
 8001d2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001d30:	f04f 0901 	mov.w	r9, #1
 8001d34:	4623      	mov	r3, r4
 8001d36:	469a      	mov	sl, r3
 8001d38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d3c:	b10a      	cbz	r2, 8001d42 <_vfiprintf_r+0xa2>
 8001d3e:	2a25      	cmp	r2, #37	; 0x25
 8001d40:	d1f9      	bne.n	8001d36 <_vfiprintf_r+0x96>
 8001d42:	ebba 0b04 	subs.w	fp, sl, r4
 8001d46:	d00b      	beq.n	8001d60 <_vfiprintf_r+0xc0>
 8001d48:	465b      	mov	r3, fp
 8001d4a:	4622      	mov	r2, r4
 8001d4c:	4629      	mov	r1, r5
 8001d4e:	4630      	mov	r0, r6
 8001d50:	f7ff ff93 	bl	8001c7a <__sfputs_r>
 8001d54:	3001      	adds	r0, #1
 8001d56:	f000 80aa 	beq.w	8001eae <_vfiprintf_r+0x20e>
 8001d5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001d5c:	445a      	add	r2, fp
 8001d5e:	9209      	str	r2, [sp, #36]	; 0x24
 8001d60:	f89a 3000 	ldrb.w	r3, [sl]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80a2 	beq.w	8001eae <_vfiprintf_r+0x20e>
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d74:	f10a 0a01 	add.w	sl, sl, #1
 8001d78:	9304      	str	r3, [sp, #16]
 8001d7a:	9307      	str	r3, [sp, #28]
 8001d7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001d80:	931a      	str	r3, [sp, #104]	; 0x68
 8001d82:	4654      	mov	r4, sl
 8001d84:	2205      	movs	r2, #5
 8001d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d8a:	4858      	ldr	r0, [pc, #352]	; (8001eec <_vfiprintf_r+0x24c>)
 8001d8c:	f7fe fa38 	bl	8000200 <memchr>
 8001d90:	9a04      	ldr	r2, [sp, #16]
 8001d92:	b9d8      	cbnz	r0, 8001dcc <_vfiprintf_r+0x12c>
 8001d94:	06d1      	lsls	r1, r2, #27
 8001d96:	bf44      	itt	mi
 8001d98:	2320      	movmi	r3, #32
 8001d9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d9e:	0713      	lsls	r3, r2, #28
 8001da0:	bf44      	itt	mi
 8001da2:	232b      	movmi	r3, #43	; 0x2b
 8001da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001da8:	f89a 3000 	ldrb.w	r3, [sl]
 8001dac:	2b2a      	cmp	r3, #42	; 0x2a
 8001dae:	d015      	beq.n	8001ddc <_vfiprintf_r+0x13c>
 8001db0:	9a07      	ldr	r2, [sp, #28]
 8001db2:	4654      	mov	r4, sl
 8001db4:	2000      	movs	r0, #0
 8001db6:	f04f 0c0a 	mov.w	ip, #10
 8001dba:	4621      	mov	r1, r4
 8001dbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001dc0:	3b30      	subs	r3, #48	; 0x30
 8001dc2:	2b09      	cmp	r3, #9
 8001dc4:	d94e      	bls.n	8001e64 <_vfiprintf_r+0x1c4>
 8001dc6:	b1b0      	cbz	r0, 8001df6 <_vfiprintf_r+0x156>
 8001dc8:	9207      	str	r2, [sp, #28]
 8001dca:	e014      	b.n	8001df6 <_vfiprintf_r+0x156>
 8001dcc:	eba0 0308 	sub.w	r3, r0, r8
 8001dd0:	fa09 f303 	lsl.w	r3, r9, r3
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	9304      	str	r3, [sp, #16]
 8001dd8:	46a2      	mov	sl, r4
 8001dda:	e7d2      	b.n	8001d82 <_vfiprintf_r+0xe2>
 8001ddc:	9b03      	ldr	r3, [sp, #12]
 8001dde:	1d19      	adds	r1, r3, #4
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	9103      	str	r1, [sp, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bfbb      	ittet	lt
 8001de8:	425b      	neglt	r3, r3
 8001dea:	f042 0202 	orrlt.w	r2, r2, #2
 8001dee:	9307      	strge	r3, [sp, #28]
 8001df0:	9307      	strlt	r3, [sp, #28]
 8001df2:	bfb8      	it	lt
 8001df4:	9204      	strlt	r2, [sp, #16]
 8001df6:	7823      	ldrb	r3, [r4, #0]
 8001df8:	2b2e      	cmp	r3, #46	; 0x2e
 8001dfa:	d10c      	bne.n	8001e16 <_vfiprintf_r+0x176>
 8001dfc:	7863      	ldrb	r3, [r4, #1]
 8001dfe:	2b2a      	cmp	r3, #42	; 0x2a
 8001e00:	d135      	bne.n	8001e6e <_vfiprintf_r+0x1ce>
 8001e02:	9b03      	ldr	r3, [sp, #12]
 8001e04:	1d1a      	adds	r2, r3, #4
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	9203      	str	r2, [sp, #12]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	bfb8      	it	lt
 8001e0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8001e12:	3402      	adds	r4, #2
 8001e14:	9305      	str	r3, [sp, #20]
 8001e16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001efc <_vfiprintf_r+0x25c>
 8001e1a:	7821      	ldrb	r1, [r4, #0]
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	4650      	mov	r0, sl
 8001e20:	f7fe f9ee 	bl	8000200 <memchr>
 8001e24:	b140      	cbz	r0, 8001e38 <_vfiprintf_r+0x198>
 8001e26:	2340      	movs	r3, #64	; 0x40
 8001e28:	eba0 000a 	sub.w	r0, r0, sl
 8001e2c:	fa03 f000 	lsl.w	r0, r3, r0
 8001e30:	9b04      	ldr	r3, [sp, #16]
 8001e32:	4303      	orrs	r3, r0
 8001e34:	3401      	adds	r4, #1
 8001e36:	9304      	str	r3, [sp, #16]
 8001e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e3c:	482c      	ldr	r0, [pc, #176]	; (8001ef0 <_vfiprintf_r+0x250>)
 8001e3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001e42:	2206      	movs	r2, #6
 8001e44:	f7fe f9dc 	bl	8000200 <memchr>
 8001e48:	2800      	cmp	r0, #0
 8001e4a:	d03f      	beq.n	8001ecc <_vfiprintf_r+0x22c>
 8001e4c:	4b29      	ldr	r3, [pc, #164]	; (8001ef4 <_vfiprintf_r+0x254>)
 8001e4e:	bb1b      	cbnz	r3, 8001e98 <_vfiprintf_r+0x1f8>
 8001e50:	9b03      	ldr	r3, [sp, #12]
 8001e52:	3307      	adds	r3, #7
 8001e54:	f023 0307 	bic.w	r3, r3, #7
 8001e58:	3308      	adds	r3, #8
 8001e5a:	9303      	str	r3, [sp, #12]
 8001e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e5e:	443b      	add	r3, r7
 8001e60:	9309      	str	r3, [sp, #36]	; 0x24
 8001e62:	e767      	b.n	8001d34 <_vfiprintf_r+0x94>
 8001e64:	fb0c 3202 	mla	r2, ip, r2, r3
 8001e68:	460c      	mov	r4, r1
 8001e6a:	2001      	movs	r0, #1
 8001e6c:	e7a5      	b.n	8001dba <_vfiprintf_r+0x11a>
 8001e6e:	2300      	movs	r3, #0
 8001e70:	3401      	adds	r4, #1
 8001e72:	9305      	str	r3, [sp, #20]
 8001e74:	4619      	mov	r1, r3
 8001e76:	f04f 0c0a 	mov.w	ip, #10
 8001e7a:	4620      	mov	r0, r4
 8001e7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e80:	3a30      	subs	r2, #48	; 0x30
 8001e82:	2a09      	cmp	r2, #9
 8001e84:	d903      	bls.n	8001e8e <_vfiprintf_r+0x1ee>
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0c5      	beq.n	8001e16 <_vfiprintf_r+0x176>
 8001e8a:	9105      	str	r1, [sp, #20]
 8001e8c:	e7c3      	b.n	8001e16 <_vfiprintf_r+0x176>
 8001e8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001e92:	4604      	mov	r4, r0
 8001e94:	2301      	movs	r3, #1
 8001e96:	e7f0      	b.n	8001e7a <_vfiprintf_r+0x1da>
 8001e98:	ab03      	add	r3, sp, #12
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	462a      	mov	r2, r5
 8001e9e:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <_vfiprintf_r+0x258>)
 8001ea0:	a904      	add	r1, sp, #16
 8001ea2:	4630      	mov	r0, r6
 8001ea4:	f3af 8000 	nop.w
 8001ea8:	4607      	mov	r7, r0
 8001eaa:	1c78      	adds	r0, r7, #1
 8001eac:	d1d6      	bne.n	8001e5c <_vfiprintf_r+0x1bc>
 8001eae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001eb0:	07d9      	lsls	r1, r3, #31
 8001eb2:	d405      	bmi.n	8001ec0 <_vfiprintf_r+0x220>
 8001eb4:	89ab      	ldrh	r3, [r5, #12]
 8001eb6:	059a      	lsls	r2, r3, #22
 8001eb8:	d402      	bmi.n	8001ec0 <_vfiprintf_r+0x220>
 8001eba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001ebc:	f7ff fd7f 	bl	80019be <__retarget_lock_release_recursive>
 8001ec0:	89ab      	ldrh	r3, [r5, #12]
 8001ec2:	065b      	lsls	r3, r3, #25
 8001ec4:	f53f af12 	bmi.w	8001cec <_vfiprintf_r+0x4c>
 8001ec8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001eca:	e711      	b.n	8001cf0 <_vfiprintf_r+0x50>
 8001ecc:	ab03      	add	r3, sp, #12
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	462a      	mov	r2, r5
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <_vfiprintf_r+0x258>)
 8001ed4:	a904      	add	r1, sp, #16
 8001ed6:	4630      	mov	r0, r6
 8001ed8:	f000 f880 	bl	8001fdc <_printf_i>
 8001edc:	e7e4      	b.n	8001ea8 <_vfiprintf_r+0x208>
 8001ede:	bf00      	nop
 8001ee0:	08002434 	.word	0x08002434
 8001ee4:	08002454 	.word	0x08002454
 8001ee8:	08002414 	.word	0x08002414
 8001eec:	08002474 	.word	0x08002474
 8001ef0:	0800247e 	.word	0x0800247e
 8001ef4:	00000000 	.word	0x00000000
 8001ef8:	08001c7b 	.word	0x08001c7b
 8001efc:	0800247a 	.word	0x0800247a

08001f00 <_printf_common>:
 8001f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f04:	4616      	mov	r6, r2
 8001f06:	4699      	mov	r9, r3
 8001f08:	688a      	ldr	r2, [r1, #8]
 8001f0a:	690b      	ldr	r3, [r1, #16]
 8001f0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001f10:	4293      	cmp	r3, r2
 8001f12:	bfb8      	it	lt
 8001f14:	4613      	movlt	r3, r2
 8001f16:	6033      	str	r3, [r6, #0]
 8001f18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001f1c:	4607      	mov	r7, r0
 8001f1e:	460c      	mov	r4, r1
 8001f20:	b10a      	cbz	r2, 8001f26 <_printf_common+0x26>
 8001f22:	3301      	adds	r3, #1
 8001f24:	6033      	str	r3, [r6, #0]
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	0699      	lsls	r1, r3, #26
 8001f2a:	bf42      	ittt	mi
 8001f2c:	6833      	ldrmi	r3, [r6, #0]
 8001f2e:	3302      	addmi	r3, #2
 8001f30:	6033      	strmi	r3, [r6, #0]
 8001f32:	6825      	ldr	r5, [r4, #0]
 8001f34:	f015 0506 	ands.w	r5, r5, #6
 8001f38:	d106      	bne.n	8001f48 <_printf_common+0x48>
 8001f3a:	f104 0a19 	add.w	sl, r4, #25
 8001f3e:	68e3      	ldr	r3, [r4, #12]
 8001f40:	6832      	ldr	r2, [r6, #0]
 8001f42:	1a9b      	subs	r3, r3, r2
 8001f44:	42ab      	cmp	r3, r5
 8001f46:	dc26      	bgt.n	8001f96 <_printf_common+0x96>
 8001f48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001f4c:	1e13      	subs	r3, r2, #0
 8001f4e:	6822      	ldr	r2, [r4, #0]
 8001f50:	bf18      	it	ne
 8001f52:	2301      	movne	r3, #1
 8001f54:	0692      	lsls	r2, r2, #26
 8001f56:	d42b      	bmi.n	8001fb0 <_printf_common+0xb0>
 8001f58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f5c:	4649      	mov	r1, r9
 8001f5e:	4638      	mov	r0, r7
 8001f60:	47c0      	blx	r8
 8001f62:	3001      	adds	r0, #1
 8001f64:	d01e      	beq.n	8001fa4 <_printf_common+0xa4>
 8001f66:	6823      	ldr	r3, [r4, #0]
 8001f68:	68e5      	ldr	r5, [r4, #12]
 8001f6a:	6832      	ldr	r2, [r6, #0]
 8001f6c:	f003 0306 	and.w	r3, r3, #6
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	bf08      	it	eq
 8001f74:	1aad      	subeq	r5, r5, r2
 8001f76:	68a3      	ldr	r3, [r4, #8]
 8001f78:	6922      	ldr	r2, [r4, #16]
 8001f7a:	bf0c      	ite	eq
 8001f7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f80:	2500      	movne	r5, #0
 8001f82:	4293      	cmp	r3, r2
 8001f84:	bfc4      	itt	gt
 8001f86:	1a9b      	subgt	r3, r3, r2
 8001f88:	18ed      	addgt	r5, r5, r3
 8001f8a:	2600      	movs	r6, #0
 8001f8c:	341a      	adds	r4, #26
 8001f8e:	42b5      	cmp	r5, r6
 8001f90:	d11a      	bne.n	8001fc8 <_printf_common+0xc8>
 8001f92:	2000      	movs	r0, #0
 8001f94:	e008      	b.n	8001fa8 <_printf_common+0xa8>
 8001f96:	2301      	movs	r3, #1
 8001f98:	4652      	mov	r2, sl
 8001f9a:	4649      	mov	r1, r9
 8001f9c:	4638      	mov	r0, r7
 8001f9e:	47c0      	blx	r8
 8001fa0:	3001      	adds	r0, #1
 8001fa2:	d103      	bne.n	8001fac <_printf_common+0xac>
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fac:	3501      	adds	r5, #1
 8001fae:	e7c6      	b.n	8001f3e <_printf_common+0x3e>
 8001fb0:	18e1      	adds	r1, r4, r3
 8001fb2:	1c5a      	adds	r2, r3, #1
 8001fb4:	2030      	movs	r0, #48	; 0x30
 8001fb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001fba:	4422      	add	r2, r4
 8001fbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001fc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	e7c7      	b.n	8001f58 <_printf_common+0x58>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	4622      	mov	r2, r4
 8001fcc:	4649      	mov	r1, r9
 8001fce:	4638      	mov	r0, r7
 8001fd0:	47c0      	blx	r8
 8001fd2:	3001      	adds	r0, #1
 8001fd4:	d0e6      	beq.n	8001fa4 <_printf_common+0xa4>
 8001fd6:	3601      	adds	r6, #1
 8001fd8:	e7d9      	b.n	8001f8e <_printf_common+0x8e>
	...

08001fdc <_printf_i>:
 8001fdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001fe0:	7e0f      	ldrb	r7, [r1, #24]
 8001fe2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001fe4:	2f78      	cmp	r7, #120	; 0x78
 8001fe6:	4691      	mov	r9, r2
 8001fe8:	4680      	mov	r8, r0
 8001fea:	460c      	mov	r4, r1
 8001fec:	469a      	mov	sl, r3
 8001fee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001ff2:	d807      	bhi.n	8002004 <_printf_i+0x28>
 8001ff4:	2f62      	cmp	r7, #98	; 0x62
 8001ff6:	d80a      	bhi.n	800200e <_printf_i+0x32>
 8001ff8:	2f00      	cmp	r7, #0
 8001ffa:	f000 80d8 	beq.w	80021ae <_printf_i+0x1d2>
 8001ffe:	2f58      	cmp	r7, #88	; 0x58
 8002000:	f000 80a3 	beq.w	800214a <_printf_i+0x16e>
 8002004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002008:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800200c:	e03a      	b.n	8002084 <_printf_i+0xa8>
 800200e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002012:	2b15      	cmp	r3, #21
 8002014:	d8f6      	bhi.n	8002004 <_printf_i+0x28>
 8002016:	a101      	add	r1, pc, #4	; (adr r1, 800201c <_printf_i+0x40>)
 8002018:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800201c:	08002075 	.word	0x08002075
 8002020:	08002089 	.word	0x08002089
 8002024:	08002005 	.word	0x08002005
 8002028:	08002005 	.word	0x08002005
 800202c:	08002005 	.word	0x08002005
 8002030:	08002005 	.word	0x08002005
 8002034:	08002089 	.word	0x08002089
 8002038:	08002005 	.word	0x08002005
 800203c:	08002005 	.word	0x08002005
 8002040:	08002005 	.word	0x08002005
 8002044:	08002005 	.word	0x08002005
 8002048:	08002195 	.word	0x08002195
 800204c:	080020b9 	.word	0x080020b9
 8002050:	08002177 	.word	0x08002177
 8002054:	08002005 	.word	0x08002005
 8002058:	08002005 	.word	0x08002005
 800205c:	080021b7 	.word	0x080021b7
 8002060:	08002005 	.word	0x08002005
 8002064:	080020b9 	.word	0x080020b9
 8002068:	08002005 	.word	0x08002005
 800206c:	08002005 	.word	0x08002005
 8002070:	0800217f 	.word	0x0800217f
 8002074:	682b      	ldr	r3, [r5, #0]
 8002076:	1d1a      	adds	r2, r3, #4
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	602a      	str	r2, [r5, #0]
 800207c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002080:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002084:	2301      	movs	r3, #1
 8002086:	e0a3      	b.n	80021d0 <_printf_i+0x1f4>
 8002088:	6820      	ldr	r0, [r4, #0]
 800208a:	6829      	ldr	r1, [r5, #0]
 800208c:	0606      	lsls	r6, r0, #24
 800208e:	f101 0304 	add.w	r3, r1, #4
 8002092:	d50a      	bpl.n	80020aa <_printf_i+0xce>
 8002094:	680e      	ldr	r6, [r1, #0]
 8002096:	602b      	str	r3, [r5, #0]
 8002098:	2e00      	cmp	r6, #0
 800209a:	da03      	bge.n	80020a4 <_printf_i+0xc8>
 800209c:	232d      	movs	r3, #45	; 0x2d
 800209e:	4276      	negs	r6, r6
 80020a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020a4:	485e      	ldr	r0, [pc, #376]	; (8002220 <_printf_i+0x244>)
 80020a6:	230a      	movs	r3, #10
 80020a8:	e019      	b.n	80020de <_printf_i+0x102>
 80020aa:	680e      	ldr	r6, [r1, #0]
 80020ac:	602b      	str	r3, [r5, #0]
 80020ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80020b2:	bf18      	it	ne
 80020b4:	b236      	sxthne	r6, r6
 80020b6:	e7ef      	b.n	8002098 <_printf_i+0xbc>
 80020b8:	682b      	ldr	r3, [r5, #0]
 80020ba:	6820      	ldr	r0, [r4, #0]
 80020bc:	1d19      	adds	r1, r3, #4
 80020be:	6029      	str	r1, [r5, #0]
 80020c0:	0601      	lsls	r1, r0, #24
 80020c2:	d501      	bpl.n	80020c8 <_printf_i+0xec>
 80020c4:	681e      	ldr	r6, [r3, #0]
 80020c6:	e002      	b.n	80020ce <_printf_i+0xf2>
 80020c8:	0646      	lsls	r6, r0, #25
 80020ca:	d5fb      	bpl.n	80020c4 <_printf_i+0xe8>
 80020cc:	881e      	ldrh	r6, [r3, #0]
 80020ce:	4854      	ldr	r0, [pc, #336]	; (8002220 <_printf_i+0x244>)
 80020d0:	2f6f      	cmp	r7, #111	; 0x6f
 80020d2:	bf0c      	ite	eq
 80020d4:	2308      	moveq	r3, #8
 80020d6:	230a      	movne	r3, #10
 80020d8:	2100      	movs	r1, #0
 80020da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80020de:	6865      	ldr	r5, [r4, #4]
 80020e0:	60a5      	str	r5, [r4, #8]
 80020e2:	2d00      	cmp	r5, #0
 80020e4:	bfa2      	ittt	ge
 80020e6:	6821      	ldrge	r1, [r4, #0]
 80020e8:	f021 0104 	bicge.w	r1, r1, #4
 80020ec:	6021      	strge	r1, [r4, #0]
 80020ee:	b90e      	cbnz	r6, 80020f4 <_printf_i+0x118>
 80020f0:	2d00      	cmp	r5, #0
 80020f2:	d04d      	beq.n	8002190 <_printf_i+0x1b4>
 80020f4:	4615      	mov	r5, r2
 80020f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80020fa:	fb03 6711 	mls	r7, r3, r1, r6
 80020fe:	5dc7      	ldrb	r7, [r0, r7]
 8002100:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002104:	4637      	mov	r7, r6
 8002106:	42bb      	cmp	r3, r7
 8002108:	460e      	mov	r6, r1
 800210a:	d9f4      	bls.n	80020f6 <_printf_i+0x11a>
 800210c:	2b08      	cmp	r3, #8
 800210e:	d10b      	bne.n	8002128 <_printf_i+0x14c>
 8002110:	6823      	ldr	r3, [r4, #0]
 8002112:	07de      	lsls	r6, r3, #31
 8002114:	d508      	bpl.n	8002128 <_printf_i+0x14c>
 8002116:	6923      	ldr	r3, [r4, #16]
 8002118:	6861      	ldr	r1, [r4, #4]
 800211a:	4299      	cmp	r1, r3
 800211c:	bfde      	ittt	le
 800211e:	2330      	movle	r3, #48	; 0x30
 8002120:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002124:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002128:	1b52      	subs	r2, r2, r5
 800212a:	6122      	str	r2, [r4, #16]
 800212c:	f8cd a000 	str.w	sl, [sp]
 8002130:	464b      	mov	r3, r9
 8002132:	aa03      	add	r2, sp, #12
 8002134:	4621      	mov	r1, r4
 8002136:	4640      	mov	r0, r8
 8002138:	f7ff fee2 	bl	8001f00 <_printf_common>
 800213c:	3001      	adds	r0, #1
 800213e:	d14c      	bne.n	80021da <_printf_i+0x1fe>
 8002140:	f04f 30ff 	mov.w	r0, #4294967295
 8002144:	b004      	add	sp, #16
 8002146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800214a:	4835      	ldr	r0, [pc, #212]	; (8002220 <_printf_i+0x244>)
 800214c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002150:	6829      	ldr	r1, [r5, #0]
 8002152:	6823      	ldr	r3, [r4, #0]
 8002154:	f851 6b04 	ldr.w	r6, [r1], #4
 8002158:	6029      	str	r1, [r5, #0]
 800215a:	061d      	lsls	r5, r3, #24
 800215c:	d514      	bpl.n	8002188 <_printf_i+0x1ac>
 800215e:	07df      	lsls	r7, r3, #31
 8002160:	bf44      	itt	mi
 8002162:	f043 0320 	orrmi.w	r3, r3, #32
 8002166:	6023      	strmi	r3, [r4, #0]
 8002168:	b91e      	cbnz	r6, 8002172 <_printf_i+0x196>
 800216a:	6823      	ldr	r3, [r4, #0]
 800216c:	f023 0320 	bic.w	r3, r3, #32
 8002170:	6023      	str	r3, [r4, #0]
 8002172:	2310      	movs	r3, #16
 8002174:	e7b0      	b.n	80020d8 <_printf_i+0xfc>
 8002176:	6823      	ldr	r3, [r4, #0]
 8002178:	f043 0320 	orr.w	r3, r3, #32
 800217c:	6023      	str	r3, [r4, #0]
 800217e:	2378      	movs	r3, #120	; 0x78
 8002180:	4828      	ldr	r0, [pc, #160]	; (8002224 <_printf_i+0x248>)
 8002182:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002186:	e7e3      	b.n	8002150 <_printf_i+0x174>
 8002188:	0659      	lsls	r1, r3, #25
 800218a:	bf48      	it	mi
 800218c:	b2b6      	uxthmi	r6, r6
 800218e:	e7e6      	b.n	800215e <_printf_i+0x182>
 8002190:	4615      	mov	r5, r2
 8002192:	e7bb      	b.n	800210c <_printf_i+0x130>
 8002194:	682b      	ldr	r3, [r5, #0]
 8002196:	6826      	ldr	r6, [r4, #0]
 8002198:	6961      	ldr	r1, [r4, #20]
 800219a:	1d18      	adds	r0, r3, #4
 800219c:	6028      	str	r0, [r5, #0]
 800219e:	0635      	lsls	r5, r6, #24
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	d501      	bpl.n	80021a8 <_printf_i+0x1cc>
 80021a4:	6019      	str	r1, [r3, #0]
 80021a6:	e002      	b.n	80021ae <_printf_i+0x1d2>
 80021a8:	0670      	lsls	r0, r6, #25
 80021aa:	d5fb      	bpl.n	80021a4 <_printf_i+0x1c8>
 80021ac:	8019      	strh	r1, [r3, #0]
 80021ae:	2300      	movs	r3, #0
 80021b0:	6123      	str	r3, [r4, #16]
 80021b2:	4615      	mov	r5, r2
 80021b4:	e7ba      	b.n	800212c <_printf_i+0x150>
 80021b6:	682b      	ldr	r3, [r5, #0]
 80021b8:	1d1a      	adds	r2, r3, #4
 80021ba:	602a      	str	r2, [r5, #0]
 80021bc:	681d      	ldr	r5, [r3, #0]
 80021be:	6862      	ldr	r2, [r4, #4]
 80021c0:	2100      	movs	r1, #0
 80021c2:	4628      	mov	r0, r5
 80021c4:	f7fe f81c 	bl	8000200 <memchr>
 80021c8:	b108      	cbz	r0, 80021ce <_printf_i+0x1f2>
 80021ca:	1b40      	subs	r0, r0, r5
 80021cc:	6060      	str	r0, [r4, #4]
 80021ce:	6863      	ldr	r3, [r4, #4]
 80021d0:	6123      	str	r3, [r4, #16]
 80021d2:	2300      	movs	r3, #0
 80021d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80021d8:	e7a8      	b.n	800212c <_printf_i+0x150>
 80021da:	6923      	ldr	r3, [r4, #16]
 80021dc:	462a      	mov	r2, r5
 80021de:	4649      	mov	r1, r9
 80021e0:	4640      	mov	r0, r8
 80021e2:	47d0      	blx	sl
 80021e4:	3001      	adds	r0, #1
 80021e6:	d0ab      	beq.n	8002140 <_printf_i+0x164>
 80021e8:	6823      	ldr	r3, [r4, #0]
 80021ea:	079b      	lsls	r3, r3, #30
 80021ec:	d413      	bmi.n	8002216 <_printf_i+0x23a>
 80021ee:	68e0      	ldr	r0, [r4, #12]
 80021f0:	9b03      	ldr	r3, [sp, #12]
 80021f2:	4298      	cmp	r0, r3
 80021f4:	bfb8      	it	lt
 80021f6:	4618      	movlt	r0, r3
 80021f8:	e7a4      	b.n	8002144 <_printf_i+0x168>
 80021fa:	2301      	movs	r3, #1
 80021fc:	4632      	mov	r2, r6
 80021fe:	4649      	mov	r1, r9
 8002200:	4640      	mov	r0, r8
 8002202:	47d0      	blx	sl
 8002204:	3001      	adds	r0, #1
 8002206:	d09b      	beq.n	8002140 <_printf_i+0x164>
 8002208:	3501      	adds	r5, #1
 800220a:	68e3      	ldr	r3, [r4, #12]
 800220c:	9903      	ldr	r1, [sp, #12]
 800220e:	1a5b      	subs	r3, r3, r1
 8002210:	42ab      	cmp	r3, r5
 8002212:	dcf2      	bgt.n	80021fa <_printf_i+0x21e>
 8002214:	e7eb      	b.n	80021ee <_printf_i+0x212>
 8002216:	2500      	movs	r5, #0
 8002218:	f104 0619 	add.w	r6, r4, #25
 800221c:	e7f5      	b.n	800220a <_printf_i+0x22e>
 800221e:	bf00      	nop
 8002220:	08002485 	.word	0x08002485
 8002224:	08002496 	.word	0x08002496

08002228 <_sbrk_r>:
 8002228:	b538      	push	{r3, r4, r5, lr}
 800222a:	4d06      	ldr	r5, [pc, #24]	; (8002244 <_sbrk_r+0x1c>)
 800222c:	2300      	movs	r3, #0
 800222e:	4604      	mov	r4, r0
 8002230:	4608      	mov	r0, r1
 8002232:	602b      	str	r3, [r5, #0]
 8002234:	f7ff f82a 	bl	800128c <_sbrk>
 8002238:	1c43      	adds	r3, r0, #1
 800223a:	d102      	bne.n	8002242 <_sbrk_r+0x1a>
 800223c:	682b      	ldr	r3, [r5, #0]
 800223e:	b103      	cbz	r3, 8002242 <_sbrk_r+0x1a>
 8002240:	6023      	str	r3, [r4, #0]
 8002242:	bd38      	pop	{r3, r4, r5, pc}
 8002244:	20000090 	.word	0x20000090

08002248 <__sread>:
 8002248:	b510      	push	{r4, lr}
 800224a:	460c      	mov	r4, r1
 800224c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002250:	f000 f8a0 	bl	8002394 <_read_r>
 8002254:	2800      	cmp	r0, #0
 8002256:	bfab      	itete	ge
 8002258:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800225a:	89a3      	ldrhlt	r3, [r4, #12]
 800225c:	181b      	addge	r3, r3, r0
 800225e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002262:	bfac      	ite	ge
 8002264:	6563      	strge	r3, [r4, #84]	; 0x54
 8002266:	81a3      	strhlt	r3, [r4, #12]
 8002268:	bd10      	pop	{r4, pc}

0800226a <__swrite>:
 800226a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800226e:	461f      	mov	r7, r3
 8002270:	898b      	ldrh	r3, [r1, #12]
 8002272:	05db      	lsls	r3, r3, #23
 8002274:	4605      	mov	r5, r0
 8002276:	460c      	mov	r4, r1
 8002278:	4616      	mov	r6, r2
 800227a:	d505      	bpl.n	8002288 <__swrite+0x1e>
 800227c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002280:	2302      	movs	r3, #2
 8002282:	2200      	movs	r2, #0
 8002284:	f000 f868 	bl	8002358 <_lseek_r>
 8002288:	89a3      	ldrh	r3, [r4, #12]
 800228a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800228e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002292:	81a3      	strh	r3, [r4, #12]
 8002294:	4632      	mov	r2, r6
 8002296:	463b      	mov	r3, r7
 8002298:	4628      	mov	r0, r5
 800229a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800229e:	f000 b817 	b.w	80022d0 <_write_r>

080022a2 <__sseek>:
 80022a2:	b510      	push	{r4, lr}
 80022a4:	460c      	mov	r4, r1
 80022a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022aa:	f000 f855 	bl	8002358 <_lseek_r>
 80022ae:	1c43      	adds	r3, r0, #1
 80022b0:	89a3      	ldrh	r3, [r4, #12]
 80022b2:	bf15      	itete	ne
 80022b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80022b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80022ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80022be:	81a3      	strheq	r3, [r4, #12]
 80022c0:	bf18      	it	ne
 80022c2:	81a3      	strhne	r3, [r4, #12]
 80022c4:	bd10      	pop	{r4, pc}

080022c6 <__sclose>:
 80022c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022ca:	f000 b813 	b.w	80022f4 <_close_r>
	...

080022d0 <_write_r>:
 80022d0:	b538      	push	{r3, r4, r5, lr}
 80022d2:	4d07      	ldr	r5, [pc, #28]	; (80022f0 <_write_r+0x20>)
 80022d4:	4604      	mov	r4, r0
 80022d6:	4608      	mov	r0, r1
 80022d8:	4611      	mov	r1, r2
 80022da:	2200      	movs	r2, #0
 80022dc:	602a      	str	r2, [r5, #0]
 80022de:	461a      	mov	r2, r3
 80022e0:	f7fe ff83 	bl	80011ea <_write>
 80022e4:	1c43      	adds	r3, r0, #1
 80022e6:	d102      	bne.n	80022ee <_write_r+0x1e>
 80022e8:	682b      	ldr	r3, [r5, #0]
 80022ea:	b103      	cbz	r3, 80022ee <_write_r+0x1e>
 80022ec:	6023      	str	r3, [r4, #0]
 80022ee:	bd38      	pop	{r3, r4, r5, pc}
 80022f0:	20000090 	.word	0x20000090

080022f4 <_close_r>:
 80022f4:	b538      	push	{r3, r4, r5, lr}
 80022f6:	4d06      	ldr	r5, [pc, #24]	; (8002310 <_close_r+0x1c>)
 80022f8:	2300      	movs	r3, #0
 80022fa:	4604      	mov	r4, r0
 80022fc:	4608      	mov	r0, r1
 80022fe:	602b      	str	r3, [r5, #0]
 8002300:	f7fe ff8f 	bl	8001222 <_close>
 8002304:	1c43      	adds	r3, r0, #1
 8002306:	d102      	bne.n	800230e <_close_r+0x1a>
 8002308:	682b      	ldr	r3, [r5, #0]
 800230a:	b103      	cbz	r3, 800230e <_close_r+0x1a>
 800230c:	6023      	str	r3, [r4, #0]
 800230e:	bd38      	pop	{r3, r4, r5, pc}
 8002310:	20000090 	.word	0x20000090

08002314 <_fstat_r>:
 8002314:	b538      	push	{r3, r4, r5, lr}
 8002316:	4d07      	ldr	r5, [pc, #28]	; (8002334 <_fstat_r+0x20>)
 8002318:	2300      	movs	r3, #0
 800231a:	4604      	mov	r4, r0
 800231c:	4608      	mov	r0, r1
 800231e:	4611      	mov	r1, r2
 8002320:	602b      	str	r3, [r5, #0]
 8002322:	f7fe ff8a 	bl	800123a <_fstat>
 8002326:	1c43      	adds	r3, r0, #1
 8002328:	d102      	bne.n	8002330 <_fstat_r+0x1c>
 800232a:	682b      	ldr	r3, [r5, #0]
 800232c:	b103      	cbz	r3, 8002330 <_fstat_r+0x1c>
 800232e:	6023      	str	r3, [r4, #0]
 8002330:	bd38      	pop	{r3, r4, r5, pc}
 8002332:	bf00      	nop
 8002334:	20000090 	.word	0x20000090

08002338 <_isatty_r>:
 8002338:	b538      	push	{r3, r4, r5, lr}
 800233a:	4d06      	ldr	r5, [pc, #24]	; (8002354 <_isatty_r+0x1c>)
 800233c:	2300      	movs	r3, #0
 800233e:	4604      	mov	r4, r0
 8002340:	4608      	mov	r0, r1
 8002342:	602b      	str	r3, [r5, #0]
 8002344:	f7fe ff89 	bl	800125a <_isatty>
 8002348:	1c43      	adds	r3, r0, #1
 800234a:	d102      	bne.n	8002352 <_isatty_r+0x1a>
 800234c:	682b      	ldr	r3, [r5, #0]
 800234e:	b103      	cbz	r3, 8002352 <_isatty_r+0x1a>
 8002350:	6023      	str	r3, [r4, #0]
 8002352:	bd38      	pop	{r3, r4, r5, pc}
 8002354:	20000090 	.word	0x20000090

08002358 <_lseek_r>:
 8002358:	b538      	push	{r3, r4, r5, lr}
 800235a:	4d07      	ldr	r5, [pc, #28]	; (8002378 <_lseek_r+0x20>)
 800235c:	4604      	mov	r4, r0
 800235e:	4608      	mov	r0, r1
 8002360:	4611      	mov	r1, r2
 8002362:	2200      	movs	r2, #0
 8002364:	602a      	str	r2, [r5, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	f7fe ff82 	bl	8001270 <_lseek>
 800236c:	1c43      	adds	r3, r0, #1
 800236e:	d102      	bne.n	8002376 <_lseek_r+0x1e>
 8002370:	682b      	ldr	r3, [r5, #0]
 8002372:	b103      	cbz	r3, 8002376 <_lseek_r+0x1e>
 8002374:	6023      	str	r3, [r4, #0]
 8002376:	bd38      	pop	{r3, r4, r5, pc}
 8002378:	20000090 	.word	0x20000090

0800237c <__malloc_lock>:
 800237c:	4801      	ldr	r0, [pc, #4]	; (8002384 <__malloc_lock+0x8>)
 800237e:	f7ff bb1d 	b.w	80019bc <__retarget_lock_acquire_recursive>
 8002382:	bf00      	nop
 8002384:	20000084 	.word	0x20000084

08002388 <__malloc_unlock>:
 8002388:	4801      	ldr	r0, [pc, #4]	; (8002390 <__malloc_unlock+0x8>)
 800238a:	f7ff bb18 	b.w	80019be <__retarget_lock_release_recursive>
 800238e:	bf00      	nop
 8002390:	20000084 	.word	0x20000084

08002394 <_read_r>:
 8002394:	b538      	push	{r3, r4, r5, lr}
 8002396:	4d07      	ldr	r5, [pc, #28]	; (80023b4 <_read_r+0x20>)
 8002398:	4604      	mov	r4, r0
 800239a:	4608      	mov	r0, r1
 800239c:	4611      	mov	r1, r2
 800239e:	2200      	movs	r2, #0
 80023a0:	602a      	str	r2, [r5, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	f7fe ff04 	bl	80011b0 <_read>
 80023a8:	1c43      	adds	r3, r0, #1
 80023aa:	d102      	bne.n	80023b2 <_read_r+0x1e>
 80023ac:	682b      	ldr	r3, [r5, #0]
 80023ae:	b103      	cbz	r3, 80023b2 <_read_r+0x1e>
 80023b0:	6023      	str	r3, [r4, #0]
 80023b2:	bd38      	pop	{r3, r4, r5, pc}
 80023b4:	20000090 	.word	0x20000090

080023b8 <_init>:
 80023b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ba:	bf00      	nop
 80023bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023be:	bc08      	pop	{r3}
 80023c0:	469e      	mov	lr, r3
 80023c2:	4770      	bx	lr

080023c4 <_fini>:
 80023c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023c6:	bf00      	nop
 80023c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ca:	bc08      	pop	{r3}
 80023cc:	469e      	mov	lr, r3
 80023ce:	4770      	bx	lr
