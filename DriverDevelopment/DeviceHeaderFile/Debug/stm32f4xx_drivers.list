
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002170  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08002320  08002320  00012320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002404  08002404  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002404  08002404  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002404  08002404  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002404  08002404  00012404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002408  08002408  00012408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800240c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000030  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000094  20000094  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001c1b  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000721  00000000  00000000  00021caf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000218  00000000  00000000  000223d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000238  00000000  00000000  000225e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000033c8  00000000  00000000  00022820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002f67  00000000  00000000  00025be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b355  00000000  00000000  00028b4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00033ea4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000f90  00000000  00000000  00033ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002308 	.word	0x08002308

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08002308 	.word	0x08002308

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <GPIO_PCLK_Ctrl>:
 *
 * 	@notes					: API for enabling and disabling the clock
 */

void GPIO_PCLK_Ctrl(GPIO_RegDef_t *pGPIOx, uint8_t EN_DI)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	460b      	mov	r3, r1
 80002ca:	70fb      	strb	r3, [r7, #3]
	if(EN_DI==ENABLE)
 80002cc:	78fb      	ldrb	r3, [r7, #3]
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	d162      	bne.n	8000398 <GPIO_PCLK_Ctrl+0xd8>
	{
		if(pGPIOx==GPIOA)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4a66      	ldr	r2, [pc, #408]	; (8000470 <GPIO_PCLK_Ctrl+0x1b0>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d106      	bne.n	80002e8 <GPIO_PCLK_Ctrl+0x28>
			GPIOA_PCLK_EN();
 80002da:	4b66      	ldr	r3, [pc, #408]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 80002dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002de:	4a65      	ldr	r2, [pc, #404]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 80002e0:	f043 0301 	orr.w	r3, r3, #1
 80002e4:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx==GPIOH)
			GPIOH_PCLK_DI();
		else if(pGPIOx==GPIOI)
			GPIOI_PCLK_DI();
	}
}
 80002e6:	e0bc      	b.n	8000462 <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOB)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	4a63      	ldr	r2, [pc, #396]	; (8000478 <GPIO_PCLK_Ctrl+0x1b8>)
 80002ec:	4293      	cmp	r3, r2
 80002ee:	d106      	bne.n	80002fe <GPIO_PCLK_Ctrl+0x3e>
			GPIOB_PCLK_EN();
 80002f0:	4b60      	ldr	r3, [pc, #384]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 80002f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f4:	4a5f      	ldr	r2, [pc, #380]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 80002f6:	f043 0302 	orr.w	r3, r3, #2
 80002fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002fc:	e0b1      	b.n	8000462 <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOC)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4a5e      	ldr	r2, [pc, #376]	; (800047c <GPIO_PCLK_Ctrl+0x1bc>)
 8000302:	4293      	cmp	r3, r2
 8000304:	d106      	bne.n	8000314 <GPIO_PCLK_Ctrl+0x54>
			GPIOC_PCLK_EN();
 8000306:	4b5b      	ldr	r3, [pc, #364]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 8000308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030a:	4a5a      	ldr	r2, [pc, #360]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 800030c:	f043 0304 	orr.w	r3, r3, #4
 8000310:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000312:	e0a6      	b.n	8000462 <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOD)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	4a5a      	ldr	r2, [pc, #360]	; (8000480 <GPIO_PCLK_Ctrl+0x1c0>)
 8000318:	4293      	cmp	r3, r2
 800031a:	d106      	bne.n	800032a <GPIO_PCLK_Ctrl+0x6a>
			GPIOD_PCLK_EN();
 800031c:	4b55      	ldr	r3, [pc, #340]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 800031e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000320:	4a54      	ldr	r2, [pc, #336]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 8000322:	f043 0308 	orr.w	r3, r3, #8
 8000326:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000328:	e09b      	b.n	8000462 <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOE)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a55      	ldr	r2, [pc, #340]	; (8000484 <GPIO_PCLK_Ctrl+0x1c4>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d106      	bne.n	8000340 <GPIO_PCLK_Ctrl+0x80>
			GPIOE_PCLK_EN();
 8000332:	4b50      	ldr	r3, [pc, #320]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 8000334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000336:	4a4f      	ldr	r2, [pc, #316]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 8000338:	f043 0310 	orr.w	r3, r3, #16
 800033c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800033e:	e090      	b.n	8000462 <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOF)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	4a51      	ldr	r2, [pc, #324]	; (8000488 <GPIO_PCLK_Ctrl+0x1c8>)
 8000344:	4293      	cmp	r3, r2
 8000346:	d106      	bne.n	8000356 <GPIO_PCLK_Ctrl+0x96>
			GPIOF_PCLK_EN();
 8000348:	4b4a      	ldr	r3, [pc, #296]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 800034a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034c:	4a49      	ldr	r2, [pc, #292]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 800034e:	f043 0320 	orr.w	r3, r3, #32
 8000352:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000354:	e085      	b.n	8000462 <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOG)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4a4c      	ldr	r2, [pc, #304]	; (800048c <GPIO_PCLK_Ctrl+0x1cc>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d106      	bne.n	800036c <GPIO_PCLK_Ctrl+0xac>
			GPIOG_PCLK_EN();
 800035e:	4b45      	ldr	r3, [pc, #276]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 8000360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000362:	4a44      	ldr	r2, [pc, #272]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 8000364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000368:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036a:	e07a      	b.n	8000462 <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOH)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4a48      	ldr	r2, [pc, #288]	; (8000490 <GPIO_PCLK_Ctrl+0x1d0>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d106      	bne.n	8000382 <GPIO_PCLK_Ctrl+0xc2>
			GPIOH_PCLK_EN();
 8000374:	4b3f      	ldr	r3, [pc, #252]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 8000376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000378:	4a3e      	ldr	r2, [pc, #248]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 800037a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800037e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000380:	e06f      	b.n	8000462 <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOI)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4a43      	ldr	r2, [pc, #268]	; (8000494 <GPIO_PCLK_Ctrl+0x1d4>)
 8000386:	4293      	cmp	r3, r2
 8000388:	d16b      	bne.n	8000462 <GPIO_PCLK_Ctrl+0x1a2>
			GPIOI_PCLK_EN();
 800038a:	4b3a      	ldr	r3, [pc, #232]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 800038c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038e:	4a39      	ldr	r2, [pc, #228]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 8000390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000394:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000396:	e064      	b.n	8000462 <GPIO_PCLK_Ctrl+0x1a2>
	else if(EN_DI==DISABLE)
 8000398:	78fb      	ldrb	r3, [r7, #3]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d161      	bne.n	8000462 <GPIO_PCLK_Ctrl+0x1a2>
		if(pGPIOx==GPIOA)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4a33      	ldr	r2, [pc, #204]	; (8000470 <GPIO_PCLK_Ctrl+0x1b0>)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d106      	bne.n	80003b4 <GPIO_PCLK_Ctrl+0xf4>
			GPIOA_PCLK_DI();
 80003a6:	4b33      	ldr	r3, [pc, #204]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 80003a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003aa:	4a32      	ldr	r2, [pc, #200]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 80003ac:	f023 0301 	bic.w	r3, r3, #1
 80003b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b2:	e056      	b.n	8000462 <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOB)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4a30      	ldr	r2, [pc, #192]	; (8000478 <GPIO_PCLK_Ctrl+0x1b8>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d106      	bne.n	80003ca <GPIO_PCLK_Ctrl+0x10a>
			GPIOB_PCLK_DI();
 80003bc:	4b2d      	ldr	r3, [pc, #180]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 80003be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c0:	4a2c      	ldr	r2, [pc, #176]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 80003c2:	f023 0302 	bic.w	r3, r3, #2
 80003c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c8:	e04b      	b.n	8000462 <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOC)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4a2b      	ldr	r2, [pc, #172]	; (800047c <GPIO_PCLK_Ctrl+0x1bc>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d106      	bne.n	80003e0 <GPIO_PCLK_Ctrl+0x120>
			GPIOC_PCLK_DI();
 80003d2:	4b28      	ldr	r3, [pc, #160]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 80003d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d6:	4a27      	ldr	r2, [pc, #156]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 80003d8:	f023 0304 	bic.w	r3, r3, #4
 80003dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003de:	e040      	b.n	8000462 <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOD)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4a27      	ldr	r2, [pc, #156]	; (8000480 <GPIO_PCLK_Ctrl+0x1c0>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d106      	bne.n	80003f6 <GPIO_PCLK_Ctrl+0x136>
			GPIOD_PCLK_DI();
 80003e8:	4b22      	ldr	r3, [pc, #136]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 80003ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ec:	4a21      	ldr	r2, [pc, #132]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 80003ee:	f023 0308 	bic.w	r3, r3, #8
 80003f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f4:	e035      	b.n	8000462 <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOE)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4a22      	ldr	r2, [pc, #136]	; (8000484 <GPIO_PCLK_Ctrl+0x1c4>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d106      	bne.n	800040c <GPIO_PCLK_Ctrl+0x14c>
			GPIOE_PCLK_DI();
 80003fe:	4b1d      	ldr	r3, [pc, #116]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 8000400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000402:	4a1c      	ldr	r2, [pc, #112]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 8000404:	f023 0310 	bic.w	r3, r3, #16
 8000408:	6313      	str	r3, [r2, #48]	; 0x30
}
 800040a:	e02a      	b.n	8000462 <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOF)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4a1e      	ldr	r2, [pc, #120]	; (8000488 <GPIO_PCLK_Ctrl+0x1c8>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d106      	bne.n	8000422 <GPIO_PCLK_Ctrl+0x162>
			GPIOF_PCLK_DI();
 8000414:	4b17      	ldr	r3, [pc, #92]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 8000416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000418:	4a16      	ldr	r2, [pc, #88]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 800041a:	f023 0320 	bic.w	r3, r3, #32
 800041e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000420:	e01f      	b.n	8000462 <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOG)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4a19      	ldr	r2, [pc, #100]	; (800048c <GPIO_PCLK_Ctrl+0x1cc>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d106      	bne.n	8000438 <GPIO_PCLK_Ctrl+0x178>
			GPIOG_PCLK_DI();
 800042a:	4b12      	ldr	r3, [pc, #72]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 800042c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042e:	4a11      	ldr	r2, [pc, #68]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 8000430:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000434:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000436:	e014      	b.n	8000462 <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOH)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4a15      	ldr	r2, [pc, #84]	; (8000490 <GPIO_PCLK_Ctrl+0x1d0>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d106      	bne.n	800044e <GPIO_PCLK_Ctrl+0x18e>
			GPIOH_PCLK_DI();
 8000440:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 8000442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000444:	4a0b      	ldr	r2, [pc, #44]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 8000446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800044a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800044c:	e009      	b.n	8000462 <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOI)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a10      	ldr	r2, [pc, #64]	; (8000494 <GPIO_PCLK_Ctrl+0x1d4>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d105      	bne.n	8000462 <GPIO_PCLK_Ctrl+0x1a2>
			GPIOI_PCLK_DI();
 8000456:	4b07      	ldr	r3, [pc, #28]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 8000458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045a:	4a06      	ldr	r2, [pc, #24]	; (8000474 <GPIO_PCLK_Ctrl+0x1b4>)
 800045c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000460:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000462:	bf00      	nop
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	40020000 	.word	0x40020000
 8000474:	40023800 	.word	0x40023800
 8000478:	40020400 	.word	0x40020400
 800047c:	40020800 	.word	0x40020800
 8000480:	40020c00 	.word	0x40020c00
 8000484:	40021000 	.word	0x40021000
 8000488:	40021400 	.word	0x40021400
 800048c:	40021800 	.word	0x40021800
 8000490:	40021c00 	.word	0x40021c00
 8000494:	40022000 	.word	0x40022000

08000498 <GPIO_Init>:
 * 	@return					: void
 *
 * 	@notes					: API for initializing the GPIO pins
 */
void GPIO_Init(GPIOx_Handle_t *pGPIOx_Handle)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	uint32_t temp;

	//Pin mode configuration
	if(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinMode<=GPIO_MODE_AN)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	795b      	ldrb	r3, [r3, #5]
 80004a4:	2b03      	cmp	r3, #3
 80004a6:	d820      	bhi.n	80004ea <GPIO_Init+0x52>
	{
		//Non-Interrupt modes
		temp = (pGPIOx_Handle->GPIO_PinConfig.GPIO_PinMode)<<(2*(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	795b      	ldrb	r3, [r3, #5]
 80004ac:	461a      	mov	r2, r3
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	791b      	ldrb	r3, [r3, #4]
 80004b2:	005b      	lsls	r3, r3, #1
 80004b4:	fa02 f303 	lsl.w	r3, r2, r3
 80004b8:	60bb      	str	r3, [r7, #8]
		pGPIOx_Handle->pGPIOx->MODER &= ~((0x3)<<(2*(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo)));
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	681a      	ldr	r2, [r3, #0]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	791b      	ldrb	r3, [r3, #4]
 80004c4:	005b      	lsls	r3, r3, #1
 80004c6:	2103      	movs	r1, #3
 80004c8:	fa01 f303 	lsl.w	r3, r1, r3
 80004cc:	43db      	mvns	r3, r3
 80004ce:	4619      	mov	r1, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	400a      	ands	r2, r1
 80004d6:	601a      	str	r2, [r3, #0]
		pGPIOx_Handle->pGPIOx->MODER |= temp;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	6819      	ldr	r1, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	68ba      	ldr	r2, [r7, #8]
 80004e4:	430a      	orrs	r2, r1
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	e0c8      	b.n	800067c <GPIO_Init+0x1e4>
	{
		//Interrupt Mode

		/**EXTI Line Configuration**/
		//IT_RT -  Interrupt Rising Edge Trigger
		if(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RT)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	795b      	ldrb	r3, [r3, #5]
 80004ee:	2b04      	cmp	r3, #4
 80004f0:	d122      	bne.n	8000538 <GPIO_Init+0xa0>
		{
			//Configure RTSR
			EXTI->EXTI_RTSR &= ~(1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));
 80004f2:	4b5d      	ldr	r3, [pc, #372]	; (8000668 <GPIO_Init+0x1d0>)
 80004f4:	689b      	ldr	r3, [r3, #8]
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	7912      	ldrb	r2, [r2, #4]
 80004fa:	4611      	mov	r1, r2
 80004fc:	2201      	movs	r2, #1
 80004fe:	408a      	lsls	r2, r1
 8000500:	43d2      	mvns	r2, r2
 8000502:	4611      	mov	r1, r2
 8000504:	4a58      	ldr	r2, [pc, #352]	; (8000668 <GPIO_Init+0x1d0>)
 8000506:	400b      	ands	r3, r1
 8000508:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_RTSR |= 1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo);
 800050a:	4b57      	ldr	r3, [pc, #348]	; (8000668 <GPIO_Init+0x1d0>)
 800050c:	689b      	ldr	r3, [r3, #8]
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	7912      	ldrb	r2, [r2, #4]
 8000512:	4611      	mov	r1, r2
 8000514:	2201      	movs	r2, #1
 8000516:	408a      	lsls	r2, r1
 8000518:	4611      	mov	r1, r2
 800051a:	4a53      	ldr	r2, [pc, #332]	; (8000668 <GPIO_Init+0x1d0>)
 800051c:	430b      	orrs	r3, r1
 800051e:	6093      	str	r3, [r2, #8]
			//Clear FTSR
			EXTI->EXTI_FTSR &=  ~(1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));
 8000520:	4b51      	ldr	r3, [pc, #324]	; (8000668 <GPIO_Init+0x1d0>)
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	7912      	ldrb	r2, [r2, #4]
 8000528:	4611      	mov	r1, r2
 800052a:	2201      	movs	r2, #1
 800052c:	408a      	lsls	r2, r1
 800052e:	43d2      	mvns	r2, r2
 8000530:	4611      	mov	r1, r2
 8000532:	4a4d      	ldr	r2, [pc, #308]	; (8000668 <GPIO_Init+0x1d0>)
 8000534:	400b      	ands	r3, r1
 8000536:	60d3      	str	r3, [r2, #12]

		}
		//IT_FT -  Interrupt Falling Edge Trigger
		if(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_FT)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	795b      	ldrb	r3, [r3, #5]
 800053c:	2b05      	cmp	r3, #5
 800053e:	d122      	bne.n	8000586 <GPIO_Init+0xee>
		{
			//Configure FTSR
			EXTI->EXTI_FTSR &= ~(1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));
 8000540:	4b49      	ldr	r3, [pc, #292]	; (8000668 <GPIO_Init+0x1d0>)
 8000542:	68db      	ldr	r3, [r3, #12]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	7912      	ldrb	r2, [r2, #4]
 8000548:	4611      	mov	r1, r2
 800054a:	2201      	movs	r2, #1
 800054c:	408a      	lsls	r2, r1
 800054e:	43d2      	mvns	r2, r2
 8000550:	4611      	mov	r1, r2
 8000552:	4a45      	ldr	r2, [pc, #276]	; (8000668 <GPIO_Init+0x1d0>)
 8000554:	400b      	ands	r3, r1
 8000556:	60d3      	str	r3, [r2, #12]
			EXTI->EXTI_FTSR |= 1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo);
 8000558:	4b43      	ldr	r3, [pc, #268]	; (8000668 <GPIO_Init+0x1d0>)
 800055a:	68db      	ldr	r3, [r3, #12]
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	7912      	ldrb	r2, [r2, #4]
 8000560:	4611      	mov	r1, r2
 8000562:	2201      	movs	r2, #1
 8000564:	408a      	lsls	r2, r1
 8000566:	4611      	mov	r1, r2
 8000568:	4a3f      	ldr	r2, [pc, #252]	; (8000668 <GPIO_Init+0x1d0>)
 800056a:	430b      	orrs	r3, r1
 800056c:	60d3      	str	r3, [r2, #12]
			//Clear RTSR
			EXTI->EXTI_RTSR &=  ~(1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));
 800056e:	4b3e      	ldr	r3, [pc, #248]	; (8000668 <GPIO_Init+0x1d0>)
 8000570:	689b      	ldr	r3, [r3, #8]
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	7912      	ldrb	r2, [r2, #4]
 8000576:	4611      	mov	r1, r2
 8000578:	2201      	movs	r2, #1
 800057a:	408a      	lsls	r2, r1
 800057c:	43d2      	mvns	r2, r2
 800057e:	4611      	mov	r1, r2
 8000580:	4a39      	ldr	r2, [pc, #228]	; (8000668 <GPIO_Init+0x1d0>)
 8000582:	400b      	ands	r3, r1
 8000584:	6093      	str	r3, [r2, #8]
		}
		//IT_RFT -  Interrupt Rising/Falling Edge Trigger
		if(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RFT)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	795b      	ldrb	r3, [r3, #5]
 800058a:	2b06      	cmp	r3, #6
 800058c:	d12d      	bne.n	80005ea <GPIO_Init+0x152>
		{
			//Configure RTSR
			EXTI->EXTI_RTSR &= ~(1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));
 800058e:	4b36      	ldr	r3, [pc, #216]	; (8000668 <GPIO_Init+0x1d0>)
 8000590:	689b      	ldr	r3, [r3, #8]
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	7912      	ldrb	r2, [r2, #4]
 8000596:	4611      	mov	r1, r2
 8000598:	2201      	movs	r2, #1
 800059a:	408a      	lsls	r2, r1
 800059c:	43d2      	mvns	r2, r2
 800059e:	4611      	mov	r1, r2
 80005a0:	4a31      	ldr	r2, [pc, #196]	; (8000668 <GPIO_Init+0x1d0>)
 80005a2:	400b      	ands	r3, r1
 80005a4:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_RTSR |= 1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo);
 80005a6:	4b30      	ldr	r3, [pc, #192]	; (8000668 <GPIO_Init+0x1d0>)
 80005a8:	689b      	ldr	r3, [r3, #8]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	7912      	ldrb	r2, [r2, #4]
 80005ae:	4611      	mov	r1, r2
 80005b0:	2201      	movs	r2, #1
 80005b2:	408a      	lsls	r2, r1
 80005b4:	4611      	mov	r1, r2
 80005b6:	4a2c      	ldr	r2, [pc, #176]	; (8000668 <GPIO_Init+0x1d0>)
 80005b8:	430b      	orrs	r3, r1
 80005ba:	6093      	str	r3, [r2, #8]
			//Configure FTSR
			EXTI->EXTI_FTSR &= ~(1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));
 80005bc:	4b2a      	ldr	r3, [pc, #168]	; (8000668 <GPIO_Init+0x1d0>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	7912      	ldrb	r2, [r2, #4]
 80005c4:	4611      	mov	r1, r2
 80005c6:	2201      	movs	r2, #1
 80005c8:	408a      	lsls	r2, r1
 80005ca:	43d2      	mvns	r2, r2
 80005cc:	4611      	mov	r1, r2
 80005ce:	4a26      	ldr	r2, [pc, #152]	; (8000668 <GPIO_Init+0x1d0>)
 80005d0:	400b      	ands	r3, r1
 80005d2:	60d3      	str	r3, [r2, #12]
			EXTI->EXTI_FTSR |= 1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo);
 80005d4:	4b24      	ldr	r3, [pc, #144]	; (8000668 <GPIO_Init+0x1d0>)
 80005d6:	68db      	ldr	r3, [r3, #12]
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	7912      	ldrb	r2, [r2, #4]
 80005dc:	4611      	mov	r1, r2
 80005de:	2201      	movs	r2, #1
 80005e0:	408a      	lsls	r2, r1
 80005e2:	4611      	mov	r1, r2
 80005e4:	4a20      	ldr	r2, [pc, #128]	; (8000668 <GPIO_Init+0x1d0>)
 80005e6:	430b      	orrs	r3, r1
 80005e8:	60d3      	str	r3, [r2, #12]
		}
		/**EXTI Line Configuration**/

		//Configure GPIO Port selection Register in SYSCFG
		SYSCFG_CLK_EN();																				//Enable SYSCFG Clock
 80005ea:	4b20      	ldr	r3, [pc, #128]	; (800066c <GPIO_Init+0x1d4>)
 80005ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ee:	4a1f      	ldr	r2, [pc, #124]	; (800066c <GPIO_Init+0x1d4>)
 80005f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f4:	6453      	str	r3, [r2, #68]	; 0x44
		uint8_t SYSCFG_ARRAY_INDEX = ((pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo)/4);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	791b      	ldrb	r3, [r3, #4]
 80005fa:	089b      	lsrs	r3, r3, #2
 80005fc:	73fb      	strb	r3, [r7, #15]
		uint8_t SYSCFG_BIT_FIELD= ((pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo)%4)*4;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	791b      	ldrb	r3, [r3, #4]
 8000602:	f003 0303 	and.w	r3, r3, #3
 8000606:	b2db      	uxtb	r3, r3
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	73bb      	strb	r3, [r7, #14]
		SYSCFG->SYSCFG_EXTICR[SYSCFG_ARRAY_INDEX] &= ~(Port_ConfigCode(GPIOA))<<(SYSCFG_BIT_FIELD);		//Clear the Bitfield
 800060c:	4818      	ldr	r0, [pc, #96]	; (8000670 <GPIO_Init+0x1d8>)
 800060e:	f000 f90b 	bl	8000828 <Port_ConfigCode>
 8000612:	4603      	mov	r3, r0
 8000614:	43da      	mvns	r2, r3
 8000616:	7bbb      	ldrb	r3, [r7, #14]
 8000618:	fa02 f103 	lsl.w	r1, r2, r3
 800061c:	4a15      	ldr	r2, [pc, #84]	; (8000674 <GPIO_Init+0x1dc>)
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	3302      	adds	r3, #2
 8000622:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000626:	4608      	mov	r0, r1
 8000628:	4912      	ldr	r1, [pc, #72]	; (8000674 <GPIO_Init+0x1dc>)
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	4002      	ands	r2, r0
 800062e:	3302      	adds	r3, #2
 8000630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->SYSCFG_EXTICR[SYSCFG_ARRAY_INDEX] = Port_ConfigCode(GPIOD)<<(SYSCFG_BIT_FIELD);			//Assert the Port Config Code
 8000634:	4810      	ldr	r0, [pc, #64]	; (8000678 <GPIO_Init+0x1e0>)
 8000636:	f000 f8f7 	bl	8000828 <Port_ConfigCode>
 800063a:	4603      	mov	r3, r0
 800063c:	461a      	mov	r2, r3
 800063e:	7bbb      	ldrb	r3, [r7, #14]
 8000640:	fa02 f103 	lsl.w	r1, r2, r3
 8000644:	4a0b      	ldr	r2, [pc, #44]	; (8000674 <GPIO_Init+0x1dc>)
 8000646:	7bfb      	ldrb	r3, [r7, #15]
 8000648:	3302      	adds	r3, #2
 800064a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//Configure EXTI Interrupt delivery using IMR Register
		EXTI->EXTI_IMR |= 1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo);
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <GPIO_Init+0x1d0>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	7912      	ldrb	r2, [r2, #4]
 8000656:	4611      	mov	r1, r2
 8000658:	2201      	movs	r2, #1
 800065a:	408a      	lsls	r2, r1
 800065c:	4611      	mov	r1, r2
 800065e:	4a02      	ldr	r2, [pc, #8]	; (8000668 <GPIO_Init+0x1d0>)
 8000660:	430b      	orrs	r3, r1
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	e00a      	b.n	800067c <GPIO_Init+0x1e4>
 8000666:	bf00      	nop
 8000668:	40013c00 	.word	0x40013c00
 800066c:	40023800 	.word	0x40023800
 8000670:	40020000 	.word	0x40020000
 8000674:	40013800 	.word	0x40013800
 8000678:	40020c00 	.word	0x40020c00
	}

	//Speed configuration
	temp = (pGPIOx_Handle->GPIO_PinConfig.GPIO_PinSpeed)<<(2*pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	799b      	ldrb	r3, [r3, #6]
 8000680:	461a      	mov	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	791b      	ldrb	r3, [r3, #4]
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	fa02 f303 	lsl.w	r3, r2, r3
 800068c:	60bb      	str	r3, [r7, #8]
	pGPIOx_Handle->pGPIOx->OSPEEDR &= ~((0x3)<<(2*pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));	  //Clearing the required bits
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	689a      	ldr	r2, [r3, #8]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	791b      	ldrb	r3, [r3, #4]
 8000698:	005b      	lsls	r3, r3, #1
 800069a:	2103      	movs	r1, #3
 800069c:	fa01 f303 	lsl.w	r3, r1, r3
 80006a0:	43db      	mvns	r3, r3
 80006a2:	4619      	mov	r1, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	400a      	ands	r2, r1
 80006aa:	609a      	str	r2, [r3, #8]
	pGPIOx_Handle->pGPIOx->OSPEEDR |= temp;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	6899      	ldr	r1, [r3, #8]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	68ba      	ldr	r2, [r7, #8]
 80006b8:	430a      	orrs	r2, r1
 80006ba:	609a      	str	r2, [r3, #8]

	//Output type configuration
	temp = (pGPIOx_Handle->GPIO_PinConfig.GPIO_PinOPtype)<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	7a1b      	ldrb	r3, [r3, #8]
 80006c0:	461a      	mov	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	791b      	ldrb	r3, [r3, #4]
 80006c6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ca:	60bb      	str	r3, [r7, #8]
	pGPIOx_Handle->pGPIOx->OTYPER &= ~((0x1)<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));	 //Clearing the required bits
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	685a      	ldr	r2, [r3, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	791b      	ldrb	r3, [r3, #4]
 80006d6:	4619      	mov	r1, r3
 80006d8:	2301      	movs	r3, #1
 80006da:	408b      	lsls	r3, r1
 80006dc:	43db      	mvns	r3, r3
 80006de:	4619      	mov	r1, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	400a      	ands	r2, r1
 80006e6:	605a      	str	r2, [r3, #4]
	pGPIOx_Handle->pGPIOx->OTYPER |= temp;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	6859      	ldr	r1, [r3, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	68ba      	ldr	r2, [r7, #8]
 80006f4:	430a      	orrs	r2, r1
 80006f6:	605a      	str	r2, [r3, #4]

	//Pull-Up/Down configuration
	temp = (pGPIOx_Handle->GPIO_PinConfig.GPIO_PinPuPdCtrl)<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	79db      	ldrb	r3, [r3, #7]
 80006fc:	461a      	mov	r2, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	791b      	ldrb	r3, [r3, #4]
 8000702:	fa02 f303 	lsl.w	r3, r2, r3
 8000706:	60bb      	str	r3, [r7, #8]
	pGPIOx_Handle->pGPIOx->PUPDR &= ~((0x1)<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));		//Clearing the required bits
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	68da      	ldr	r2, [r3, #12]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	791b      	ldrb	r3, [r3, #4]
 8000712:	4619      	mov	r1, r3
 8000714:	2301      	movs	r3, #1
 8000716:	408b      	lsls	r3, r1
 8000718:	43db      	mvns	r3, r3
 800071a:	4619      	mov	r1, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	400a      	ands	r2, r1
 8000722:	60da      	str	r2, [r3, #12]
	pGPIOx_Handle->pGPIOx->PUPDR |= temp;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	68d9      	ldr	r1, [r3, #12]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	68ba      	ldr	r2, [r7, #8]
 8000730:	430a      	orrs	r2, r1
 8000732:	60da      	str	r2, [r3, #12]

	//Alternate functionality configuration
	temp = (pGPIOx_Handle->GPIO_PinConfig.GPIO_PinAltFunc)<<(4*(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo%8));
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	7a5b      	ldrb	r3, [r3, #9]
 8000738:	461a      	mov	r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	791b      	ldrb	r3, [r3, #4]
 800073e:	f003 0307 	and.w	r3, r3, #7
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	fa02 f303 	lsl.w	r3, r2, r3
 8000748:	60bb      	str	r3, [r7, #8]
	pGPIOx_Handle->pGPIOx->AF[pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo/8] &= ~((0xF)<<(4*(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo%8)));	//Clearing the required bits
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	7912      	ldrb	r2, [r2, #4]
 8000752:	08d2      	lsrs	r2, r2, #3
 8000754:	b2d0      	uxtb	r0, r2
 8000756:	4602      	mov	r2, r0
 8000758:	3208      	adds	r2, #8
 800075a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	791b      	ldrb	r3, [r3, #4]
 8000762:	f003 0307 	and.w	r3, r3, #7
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	210f      	movs	r1, #15
 800076a:	fa01 f303 	lsl.w	r3, r1, r3
 800076e:	43db      	mvns	r3, r3
 8000770:	4619      	mov	r1, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4011      	ands	r1, r2
 8000778:	f100 0208 	add.w	r2, r0, #8
 800077c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIOx_Handle->pGPIOx->AF[pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo/8] |= temp;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	7912      	ldrb	r2, [r2, #4]
 8000788:	08d2      	lsrs	r2, r2, #3
 800078a:	b2d0      	uxtb	r0, r2
 800078c:	4602      	mov	r2, r0
 800078e:	3208      	adds	r2, #8
 8000790:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	68ba      	ldr	r2, [r7, #8]
 800079a:	4311      	orrs	r1, r2
 800079c:	f100 0208 	add.w	r2, r0, #8
 80007a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80007a4:	bf00      	nop
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <GPIO_IPinRead>:
 *
 * 	@notes					: API for reading individual GPIO pins
 * 							  Type-cast cos these are 32-bit registers
 */
uint8_t GPIO_IPinRead(GPIO_RegDef_t *pGPIOx, uint8_t PinNo)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	460b      	mov	r3, r1
 80007b6:	70fb      	strb	r3, [r7, #3]
	uint8_t value = (uint8_t)(((pGPIOx->IDR)>>PinNo)&0x00000001);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	691a      	ldr	r2, [r3, #16]
 80007bc:	78fb      	ldrb	r3, [r7, #3]
 80007be:	fa22 f303 	lsr.w	r3, r2, r3
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	f003 0301 	and.w	r3, r3, #1
 80007c8:	73fb      	strb	r3, [r7, #15]
	return value;
 80007ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <GPIO_OPinWrite>:
 * 	@return					: void
 *
 * 	@notes					: API for writing to a GPIO pin
 */
void GPIO_OPinWrite(GPIO_RegDef_t *pGPIOx, uint8_t PinNo, uint8_t value)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	460b      	mov	r3, r1
 80007e2:	70fb      	strb	r3, [r7, #3]
 80007e4:	4613      	mov	r3, r2
 80007e6:	70bb      	strb	r3, [r7, #2]
	if(value==SET)
 80007e8:	78bb      	ldrb	r3, [r7, #2]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d109      	bne.n	8000802 <GPIO_OPinWrite+0x2a>
		pGPIOx->ODR |= (1<<PinNo);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	78fa      	ldrb	r2, [r7, #3]
 80007f4:	2101      	movs	r1, #1
 80007f6:	fa01 f202 	lsl.w	r2, r1, r2
 80007fa:	431a      	orrs	r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	615a      	str	r2, [r3, #20]
	else if(value==RESET)
		pGPIOx->ODR &= ~(1<<PinNo);
}
 8000800:	e00c      	b.n	800081c <GPIO_OPinWrite+0x44>
	else if(value==RESET)
 8000802:	78bb      	ldrb	r3, [r7, #2]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d109      	bne.n	800081c <GPIO_OPinWrite+0x44>
		pGPIOx->ODR &= ~(1<<PinNo);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	695b      	ldr	r3, [r3, #20]
 800080c:	78fa      	ldrb	r2, [r7, #3]
 800080e:	2101      	movs	r1, #1
 8000810:	fa01 f202 	lsl.w	r2, r1, r2
 8000814:	43d2      	mvns	r2, r2
 8000816:	401a      	ands	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	615a      	str	r2, [r3, #20]
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <Port_ConfigCode>:
		(EXTI->EXTI_PR) |= (1<<PinNo);
	}
}

uint8_t Port_ConfigCode(GPIO_RegDef_t* pGPIOx)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	return ((pGPIOx==GPIOA)?0:\
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a1e      	ldr	r2, [pc, #120]	; (80008ac <Port_ConfigCode+0x84>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d031      	beq.n	800089c <Port_ConfigCode+0x74>
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a1d      	ldr	r2, [pc, #116]	; (80008b0 <Port_ConfigCode+0x88>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d02b      	beq.n	8000898 <Port_ConfigCode+0x70>
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4a1c      	ldr	r2, [pc, #112]	; (80008b4 <Port_ConfigCode+0x8c>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d025      	beq.n	8000894 <Port_ConfigCode+0x6c>
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4a1b      	ldr	r2, [pc, #108]	; (80008b8 <Port_ConfigCode+0x90>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d01f      	beq.n	8000890 <Port_ConfigCode+0x68>
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4a1a      	ldr	r2, [pc, #104]	; (80008bc <Port_ConfigCode+0x94>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d019      	beq.n	800088c <Port_ConfigCode+0x64>
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4a19      	ldr	r2, [pc, #100]	; (80008c0 <Port_ConfigCode+0x98>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d013      	beq.n	8000888 <Port_ConfigCode+0x60>
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4a18      	ldr	r2, [pc, #96]	; (80008c4 <Port_ConfigCode+0x9c>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d00d      	beq.n	8000884 <Port_ConfigCode+0x5c>
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4a17      	ldr	r2, [pc, #92]	; (80008c8 <Port_ConfigCode+0xa0>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d007      	beq.n	8000880 <Port_ConfigCode+0x58>
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a16      	ldr	r2, [pc, #88]	; (80008cc <Port_ConfigCode+0xa4>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d101      	bne.n	800087c <Port_ConfigCode+0x54>
 8000878:	2308      	movs	r3, #8
 800087a:	e010      	b.n	800089e <Port_ConfigCode+0x76>
 800087c:	2300      	movs	r3, #0
 800087e:	e00e      	b.n	800089e <Port_ConfigCode+0x76>
 8000880:	2307      	movs	r3, #7
 8000882:	e00c      	b.n	800089e <Port_ConfigCode+0x76>
 8000884:	2306      	movs	r3, #6
 8000886:	e00a      	b.n	800089e <Port_ConfigCode+0x76>
 8000888:	2305      	movs	r3, #5
 800088a:	e008      	b.n	800089e <Port_ConfigCode+0x76>
 800088c:	2304      	movs	r3, #4
 800088e:	e006      	b.n	800089e <Port_ConfigCode+0x76>
 8000890:	2303      	movs	r3, #3
 8000892:	e004      	b.n	800089e <Port_ConfigCode+0x76>
 8000894:	2302      	movs	r3, #2
 8000896:	e002      	b.n	800089e <Port_ConfigCode+0x76>
 8000898:	2301      	movs	r3, #1
 800089a:	e000      	b.n	800089e <Port_ConfigCode+0x76>
 800089c:	2300      	movs	r3, #0
			(pGPIOx==GPIOE)?4:\
			(pGPIOx==GPIOF)?5:\
			(pGPIOx==GPIOG)?6:\
			(pGPIOx==GPIOH)?7:\
			(pGPIOx==GPIOI)?8:0);
}
 800089e:	4618      	mov	r0, r3
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40020000 	.word	0x40020000
 80008b0:	40020400 	.word	0x40020400
 80008b4:	40020800 	.word	0x40020800
 80008b8:	40020c00 	.word	0x40020c00
 80008bc:	40021000 	.word	0x40021000
 80008c0:	40021400 	.word	0x40021400
 80008c4:	40021800 	.word	0x40021800
 80008c8:	40021c00 	.word	0x40021c00
 80008cc:	40022000 	.word	0x40022000

080008d0 <SPI_PCLK_Ctrl>:
 *
 * 	@notes					: API for enabling and disabling the clock
 */

void SPI_PCLK_Ctrl(SPI_RegDef_t *pSPIx, uint8_t EN_DI)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	460b      	mov	r3, r1
 80008da:	70fb      	strb	r3, [r7, #3]
	if(EN_DI==ENABLE)
 80008dc:	78fb      	ldrb	r3, [r7, #3]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d120      	bne.n	8000924 <SPI_PCLK_Ctrl+0x54>
	{
		if(pSPIx==SPI1)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4a24      	ldr	r2, [pc, #144]	; (8000978 <SPI_PCLK_Ctrl+0xa8>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d106      	bne.n	80008f8 <SPI_PCLK_Ctrl+0x28>
			SPI1_PCLK_EN();
 80008ea:	4b24      	ldr	r3, [pc, #144]	; (800097c <SPI_PCLK_Ctrl+0xac>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	4a23      	ldr	r2, [pc, #140]	; (800097c <SPI_PCLK_Ctrl+0xac>)
 80008f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008f4:	6453      	str	r3, [r2, #68]	; 0x44
		else if(pSPIx==SPI2)
			SPI2_PCLK_DI();
		else if(pSPIx==SPI3)
			SPI3_PCLK_DI();
	}
}
 80008f6:	e038      	b.n	800096a <SPI_PCLK_Ctrl+0x9a>
		else if(pSPIx==SPI2)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4a21      	ldr	r2, [pc, #132]	; (8000980 <SPI_PCLK_Ctrl+0xb0>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d106      	bne.n	800090e <SPI_PCLK_Ctrl+0x3e>
			SPI2_PCLK_EN();
 8000900:	4b1e      	ldr	r3, [pc, #120]	; (800097c <SPI_PCLK_Ctrl+0xac>)
 8000902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000904:	4a1d      	ldr	r2, [pc, #116]	; (800097c <SPI_PCLK_Ctrl+0xac>)
 8000906:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800090a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800090c:	e02d      	b.n	800096a <SPI_PCLK_Ctrl+0x9a>
		else if(pSPIx==SPI3)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a1c      	ldr	r2, [pc, #112]	; (8000984 <SPI_PCLK_Ctrl+0xb4>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d129      	bne.n	800096a <SPI_PCLK_Ctrl+0x9a>
			SPI3_PCLK_EN();
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <SPI_PCLK_Ctrl+0xac>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	4a18      	ldr	r2, [pc, #96]	; (800097c <SPI_PCLK_Ctrl+0xac>)
 800091c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000920:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000922:	e022      	b.n	800096a <SPI_PCLK_Ctrl+0x9a>
	else if(EN_DI==DISABLE)
 8000924:	78fb      	ldrb	r3, [r7, #3]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d11f      	bne.n	800096a <SPI_PCLK_Ctrl+0x9a>
		if(pSPIx==SPI1)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4a12      	ldr	r2, [pc, #72]	; (8000978 <SPI_PCLK_Ctrl+0xa8>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d106      	bne.n	8000940 <SPI_PCLK_Ctrl+0x70>
			SPI1_PCLK_DI();
 8000932:	4b12      	ldr	r3, [pc, #72]	; (800097c <SPI_PCLK_Ctrl+0xac>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	4a11      	ldr	r2, [pc, #68]	; (800097c <SPI_PCLK_Ctrl+0xac>)
 8000938:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800093c:	6453      	str	r3, [r2, #68]	; 0x44
}
 800093e:	e014      	b.n	800096a <SPI_PCLK_Ctrl+0x9a>
		else if(pSPIx==SPI2)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4a0f      	ldr	r2, [pc, #60]	; (8000980 <SPI_PCLK_Ctrl+0xb0>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d106      	bne.n	8000956 <SPI_PCLK_Ctrl+0x86>
			SPI2_PCLK_DI();
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <SPI_PCLK_Ctrl+0xac>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094c:	4a0b      	ldr	r2, [pc, #44]	; (800097c <SPI_PCLK_Ctrl+0xac>)
 800094e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000952:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000954:	e009      	b.n	800096a <SPI_PCLK_Ctrl+0x9a>
		else if(pSPIx==SPI3)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <SPI_PCLK_Ctrl+0xb4>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d105      	bne.n	800096a <SPI_PCLK_Ctrl+0x9a>
			SPI3_PCLK_DI();
 800095e:	4b07      	ldr	r3, [pc, #28]	; (800097c <SPI_PCLK_Ctrl+0xac>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	4a06      	ldr	r2, [pc, #24]	; (800097c <SPI_PCLK_Ctrl+0xac>)
 8000964:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000968:	6413      	str	r3, [r2, #64]	; 0x40
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	40013000 	.word	0x40013000
 800097c:	40023800 	.word	0x40023800
 8000980:	40003800 	.word	0x40003800
 8000984:	40003c00 	.word	0x40003c00

08000988 <SPI_Init>:
 *
 * 	@notes					: API for enabling and disabling the clock
 */

void SPI_Init(SPIx_Handle_t *pSPIx_Handle)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]

	//SPI Device Mode
	temp |= (pSPIx_Handle->SPIx_PinConfig.SPI_DeviceConfig)<<SPI_CR1_MSTR;  //MSTR Bit of SPI_CR1
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	791b      	ldrb	r3, [r3, #4]
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	461a      	mov	r2, r3
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	4313      	orrs	r3, r2
 80009a0:	60fb      	str	r3, [r7, #12]
	/*
		BIDIMODE		Full-Duplex-0											Half-Duplex-1(Master and Slave work reciprocally)
		RXONLY			0(Full-Duplex) - Simplex Tx(Disconnect MISO),			BIDIOE:	0(Receive)
						1(Rx Only) - Simplex RX											1(Transmit)
	*/
	uint8_t BusConfig = pSPIx_Handle->SPIx_PinConfig.SPI_BusConfig;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	795b      	ldrb	r3, [r3, #5]
 80009a6:	72fb      	strb	r3, [r7, #11]
	if(BusConfig == BUSCONF_FULLDUP)
 80009a8:	7afb      	ldrb	r3, [r7, #11]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d104      	bne.n	80009b8 <SPI_Init+0x30>
		temp &= ~(1<<SPI_CR1_BIDIMODE);
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	e01a      	b.n	80009ee <SPI_Init+0x66>
	else if(BusConfig == BUSCONF_HALFDUP)
 80009b8:	7afb      	ldrb	r3, [r7, #11]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d104      	bne.n	80009c8 <SPI_Init+0x40>
		temp |= (1<<SPI_CR1_BIDIMODE);
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	e012      	b.n	80009ee <SPI_Init+0x66>
	else if(BusConfig == BUSCONF_SIMPRX)
 80009c8:	7afb      	ldrb	r3, [r7, #11]
 80009ca:	2b02      	cmp	r3, #2
 80009cc:	d108      	bne.n	80009e0 <SPI_Init+0x58>
	{
		temp &= ~(1<<SPI_CR1_BIDIMODE);
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009d4:	60fb      	str	r3, [r7, #12]
		temp |= (1<<SPI_CR1_RXONLY);
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	e006      	b.n	80009ee <SPI_Init+0x66>
	}
	else if(BusConfig == BUSCONF_SIMPTX)	//Disconnect the MISO line
 80009e0:	7afb      	ldrb	r3, [r7, #11]
 80009e2:	2b03      	cmp	r3, #3
 80009e4:	d103      	bne.n	80009ee <SPI_Init+0x66>
		temp &= ~(1<<SPI_CR1_BIDIMODE);
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009ec:	60fb      	str	r3, [r7, #12]

	//SPI Clock Speed
	temp |= (pSPIx_Handle->SPIx_PinConfig.SPI_ClkSpeed)<<SPI_CR1_BR;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	799b      	ldrb	r3, [r3, #6]
 80009f2:	00db      	lsls	r3, r3, #3
 80009f4:	461a      	mov	r2, r3
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	60fb      	str	r3, [r7, #12]

	//SPI Data Frame Format
	if(pSPIx_Handle->SPIx_PinConfig.SPI_DFF == DFF8)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	79db      	ldrb	r3, [r3, #7]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d104      	bne.n	8000a0e <SPI_Init+0x86>
		temp &= ~(1<<SPI_CR1_DFF);
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	e007      	b.n	8000a1e <SPI_Init+0x96>
	else if(pSPIx_Handle->SPIx_PinConfig.SPI_DFF == DFF16)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	79db      	ldrb	r3, [r3, #7]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d103      	bne.n	8000a1e <SPI_Init+0x96>
		temp |= (1<<SPI_CR1_DFF);
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a1c:	60fb      	str	r3, [r7, #12]

	//SPI CPOL
	if(pSPIx_Handle->SPIx_PinConfig.SPI_CPOL == ZERO_IDLE)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	7a1b      	ldrb	r3, [r3, #8]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d104      	bne.n	8000a30 <SPI_Init+0xa8>
		temp &= ~(1<<SPI_CR1_CPOL);
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	f023 0302 	bic.w	r3, r3, #2
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	e007      	b.n	8000a40 <SPI_Init+0xb8>
	else if(pSPIx_Handle->SPIx_PinConfig.SPI_CPOL == HIGH_IDLE)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	7a1b      	ldrb	r3, [r3, #8]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d103      	bne.n	8000a40 <SPI_Init+0xb8>
		temp |= (1<<SPI_CR1_CPOL);
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	f043 0302 	orr.w	r3, r3, #2
 8000a3e:	60fb      	str	r3, [r7, #12]

	//SPI CPHA
	if(pSPIx_Handle->SPIx_PinConfig.SPI_CPHA == FIRSTCLK_CAP)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	7a5b      	ldrb	r3, [r3, #9]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d104      	bne.n	8000a52 <SPI_Init+0xca>
		temp &= ~(1<<SPI_CR1_CPHA);
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f023 0301 	bic.w	r3, r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	e007      	b.n	8000a62 <SPI_Init+0xda>
	else if(pSPIx_Handle->SPIx_PinConfig.SPI_CPHA == SECONDCLK_CAP)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	7a5b      	ldrb	r3, [r3, #9]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d103      	bne.n	8000a62 <SPI_Init+0xda>
		temp |= (1<<SPI_CR1_CPHA);
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	60fb      	str	r3, [r7, #12]

	//Software Slave Management(SSM)
	if(pSPIx_Handle->SPIx_PinConfig.SPI_SSM == SSM_DI)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	7a9b      	ldrb	r3, [r3, #10]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d104      	bne.n	8000a74 <SPI_Init+0xec>
		temp &= ~(1<<SPI_CR1_SSM);
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	e007      	b.n	8000a84 <SPI_Init+0xfc>
	else if(pSPIx_Handle->SPIx_PinConfig.SPI_SSM == SSM_EN)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	7a9b      	ldrb	r3, [r3, #10]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d103      	bne.n	8000a84 <SPI_Init+0xfc>
		temp |= (1<<SPI_CR1_SSM);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a82:	60fb      	str	r3, [r7, #12]

	pSPIx_Handle->pSPIx->SPI_CR1 &= ~(temp);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	6819      	ldr	r1, [r3, #0]
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	43da      	mvns	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	400a      	ands	r2, r1
 8000a94:	601a      	str	r2, [r3, #0]
	pSPIx_Handle->pSPIx->SPI_CR1 |= temp;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	6819      	ldr	r1, [r3, #0]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	68fa      	ldr	r2, [r7, #12]
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	601a      	str	r2, [r3, #0]
}
 8000aa6:	bf00      	nop
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <SPI_TxDataB>:
 * 							  				len decremented by 1, loop back to *
 * 							  		DFF_16: 2 bytes of data is written to the data register
 * 							  				len decremented by 2, loop back to *
 */
void SPI_TxDataB(SPI_RegDef_t *pSPIx, uint8_t *pTxBuff, uint32_t len)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b084      	sub	sp, #16
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	60f8      	str	r0, [r7, #12]
 8000aba:	60b9      	str	r1, [r7, #8]
 8000abc:	607a      	str	r2, [r7, #4]
	//Tx Data Blocking Call API: Blocks Program execution, till all the data is transmitted

	while(len>0)
 8000abe:	e024      	b.n	8000b0a <SPI_TxDataB+0x58>
	{
		while(!(FlagStatus(pSPIx, SPI_SR_TXEM)));	//wait until TXE bit is SET
 8000ac0:	bf00      	nop
 8000ac2:	2102      	movs	r1, #2
 8000ac4:	68f8      	ldr	r0, [r7, #12]
 8000ac6:	f000 f896 	bl	8000bf6 <FlagStatus>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d0f8      	beq.n	8000ac2 <SPI_TxDataB+0x10>

		if(pSPIx->SPI_CR1 & (1<<SPI_CR1_DFF))			//16 bit data Tx
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d00b      	beq.n	8000af4 <SPI_TxDataB+0x42>
		{
			pSPIx->SPI_DR = *((uint16_t*)pTxBuff);		//DR is 16 bits
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	881b      	ldrh	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	60da      	str	r2, [r3, #12]
			(uint16_t*)pTxBuff++;
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	60bb      	str	r3, [r7, #8]
			len -= 2;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3b02      	subs	r3, #2
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	e00a      	b.n	8000b0a <SPI_TxDataB+0x58>
		}
		else	//8 bit data Tx
		{
			pSPIx->SPI_DR = *pTxBuff;		//DR is 8 bits
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	60da      	str	r2, [r3, #12]
			pTxBuff++;
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	3301      	adds	r3, #1
 8000b02:	60bb      	str	r3, [r7, #8]
			len--;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	607b      	str	r3, [r7, #4]
	while(len>0)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d1d7      	bne.n	8000ac0 <SPI_TxDataB+0xe>
		}
	}
}
 8000b10:	bf00      	nop
 8000b12:	bf00      	nop
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <SPI_RxDataB>:
 * 	@notes					: This API is very similar to TxDataB API;
 * 							  Waits until, the RXNE bit of SR register is SET
 * 							  As soon as the bit is SET, it copies the data from the DR to RxBuff
 */
void SPI_RxDataB(SPI_RegDef_t *pSPIx, uint8_t *pRxBuff, uint32_t len)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b084      	sub	sp, #16
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	60f8      	str	r0, [r7, #12]
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
	//Tx Data Blocking Call API: Blocks Program execution, till all the data is transmitted
	while(len>0)
 8000b26:	e024      	b.n	8000b72 <SPI_RxDataB+0x58>
	{
		while(!(FlagStatus(pSPIx, SPI_SR_RXNEM)));	//wait until RXNE bit is SET
 8000b28:	bf00      	nop
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	68f8      	ldr	r0, [r7, #12]
 8000b2e:	f000 f862 	bl	8000bf6 <FlagStatus>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d0f8      	beq.n	8000b2a <SPI_RxDataB+0x10>

		if(pSPIx->SPI_CR1 & (1<<SPI_CR1_DFF))			//16 bit data Rx
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d00b      	beq.n	8000b5c <SPI_RxDataB+0x42>
		{
			*((uint16_t*)pRxBuff) = pSPIx->SPI_DR;		//DR is 16 bits
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	801a      	strh	r2, [r3, #0]
			(uint16_t*)pRxBuff++;
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	3301      	adds	r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]
			len -= 2;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b02      	subs	r3, #2
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	e00a      	b.n	8000b72 <SPI_RxDataB+0x58>
		}
		else	//8 bit data Tx
		{
			*pRxBuff = pSPIx->SPI_DR;		//DR is 8 bits
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	701a      	strb	r2, [r3, #0]
			pRxBuff++;
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	60bb      	str	r3, [r7, #8]
			len--;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	607b      	str	r3, [r7, #4]
	while(len>0)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d1d7      	bne.n	8000b28 <SPI_RxDataB+0xe>
		}
	}
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <SPI_EN>:
 *
 * 	@notes					: Enables/Disables SPI by setting the SPE bit
 * 							  Call the function after all the register config
 */
void SPI_EN(SPI_RegDef_t *pSPIx,uint8_t EN_DI)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b083      	sub	sp, #12
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	70fb      	strb	r3, [r7, #3]
	pSPIx->SPI_CR1 &= ~(1<<SPI_CR1_SPE);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	601a      	str	r2, [r3, #0]
	if(EN_DI==ENABLE)
 8000b9a:	78fb      	ldrb	r3, [r7, #3]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d105      	bne.n	8000bac <SPI_EN+0x2a>
		(pSPIx->SPI_CR1) |= (1<<SPI_CR1_SPE);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	601a      	str	r2, [r3, #0]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <SPI_SSOEConfig>:
 * 	@return					: void
 *
 * 	@notes					: Enables the output by setting the SSOE bit of SPI_CR2
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EN_DI)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	70fb      	strb	r3, [r7, #3]
	if(EN_DI==ENABLE)
 8000bc4:	78fb      	ldrb	r3, [r7, #3]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d106      	bne.n	8000bd8 <SPI_SSOEConfig+0x20>
		(pSPIx->SPI_CR2) |= (1<<SPI_CR2_SSOE);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f043 0204 	orr.w	r2, r3, #4
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	605a      	str	r2, [r3, #4]
	else if(EN_DI == DISABLE)
		(pSPIx->SPI_CR2) &= ~(1<<SPI_CR2_SSOE);
}
 8000bd6:	e008      	b.n	8000bea <SPI_SSOEConfig+0x32>
	else if(EN_DI == DISABLE)
 8000bd8:	78fb      	ldrb	r3, [r7, #3]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d105      	bne.n	8000bea <SPI_SSOEConfig+0x32>
		(pSPIx->SPI_CR2) &= ~(1<<SPI_CR2_SSOE);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f023 0204 	bic.w	r2, r3, #4
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	605a      	str	r2, [r3, #4]
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <FlagStatus>:
 *
 * 	@notes					: Checks if a bit
 */

uint8_t FlagStatus(SPI_RegDef_t *pSPIx, uint32_t flag)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b083      	sub	sp, #12
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	6039      	str	r1, [r7, #0]
	if((pSPIx->SPI_SR) & flag)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	689a      	ldr	r2, [r3, #8]
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	4013      	ands	r3, r2
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <FlagStatus+0x1a>
		return SET;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e000      	b.n	8000c12 <FlagStatus+0x1c>
	return RESET;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <delay>:
void SPI_Comm();
void delay();
bool AckVerify(uint8_t ACK_BYTE);

void delay()
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
	for(int i=0;i<500000;i++);
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	e002      	b.n	8000c32 <delay+0x12>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <delay+0x28>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	ddf8      	ble.n	8000c2c <delay+0xc>
}
 8000c3a:	bf00      	nop
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	0007a11f 	.word	0x0007a11f

08000c4c <GPIO_Config>:

void GPIO_Config()
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
	GPIOx_Handle_t gpio;
	gpio.pGPIOx = GPIOD;
 8000c52:	4b28      	ldr	r3, [pc, #160]	; (8000cf4 <GPIO_Config+0xa8>)
 8000c54:	607b      	str	r3, [r7, #4]
	 * PB14	:	MISO
	 * PB15	: 	MOSI
	 */

	//GPIOD PCLK ON
	GPIO_PCLK_Ctrl(GPIOD,ENABLE);
 8000c56:	2101      	movs	r1, #1
 8000c58:	4826      	ldr	r0, [pc, #152]	; (8000cf4 <GPIO_Config+0xa8>)
 8000c5a:	f7ff fb31 	bl	80002c0 <GPIO_PCLK_Ctrl>
	GPIO_PCLK_Ctrl(GPIOB,ENABLE);
 8000c5e:	2101      	movs	r1, #1
 8000c60:	4825      	ldr	r0, [pc, #148]	; (8000cf8 <GPIO_Config+0xac>)
 8000c62:	f7ff fb2d 	bl	80002c0 <GPIO_PCLK_Ctrl>

	/*GPIO PD2*/
	gpio.GPIO_PinConfig.GPIO_PinNo = GPIO_PINNO_2;
 8000c66:	2302      	movs	r3, #2
 8000c68:	723b      	strb	r3, [r7, #8]
	gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	727b      	strb	r3, [r7, #9]
	gpio.GPIO_PinConfig.GPIO_PinOPtype = GPIO_PP;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	733b      	strb	r3, [r7, #12]
	gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_PINSPEED_HIGH;
 8000c72:	2302      	movs	r3, #2
 8000c74:	72bb      	strb	r3, [r7, #10]
	gpio.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_PIN_NPUPD;
 8000c76:	2300      	movs	r3, #0
 8000c78:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(&gpio);
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fc0b 	bl	8000498 <GPIO_Init>

	/*GPIO PD0*/
	gpio.GPIO_PinConfig.GPIO_PinNo = GPIO_PINNO_0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	723b      	strb	r3, [r7, #8]
	gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000c86:	2300      	movs	r3, #0
 8000c88:	727b      	strb	r3, [r7, #9]
	gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_PINSPEED_HIGH;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	72bb      	strb	r3, [r7, #10]
	gpio.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_PIN_NPUPD;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(&gpio);
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fbff 	bl	8000498 <GPIO_Init>

	//GPIOB Pin Config Tx Comm
	gpio.pGPIOx = GPIOB;
 8000c9a:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <GPIO_Config+0xac>)
 8000c9c:	607b      	str	r3, [r7, #4]
	gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_AF;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	727b      	strb	r3, [r7, #9]
	gpio.GPIO_PinConfig.GPIO_PinOPtype = GPIO_PP;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	733b      	strb	r3, [r7, #12]
	gpio.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_PIN_NPUPD;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	72fb      	strb	r3, [r7, #11]
	gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_PINSPEED_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	72bb      	strb	r3, [r7, #10]
	gpio.GPIO_PinConfig.GPIO_PinAltFunc = 5;
 8000cae:	2305      	movs	r3, #5
 8000cb0:	737b      	strb	r3, [r7, #13]

	//NSS
	gpio.GPIO_PinConfig.GPIO_PinNo = GPIO_PINNO_9;
 8000cb2:	2309      	movs	r3, #9
 8000cb4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&gpio);
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fbed 	bl	8000498 <GPIO_Init>

	//SCK
	gpio.GPIO_PinConfig.GPIO_PinNo = GPIO_PINNO_10;
 8000cbe:	230a      	movs	r3, #10
 8000cc0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&gpio);
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fbe7 	bl	8000498 <GPIO_Init>

	//MISO
	gpio.GPIO_PinConfig.GPIO_PinNo = GPIO_PINNO_14;
 8000cca:	230e      	movs	r3, #14
 8000ccc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&gpio);
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fbe1 	bl	8000498 <GPIO_Init>

	//MOSI
	gpio.GPIO_PinConfig.GPIO_PinNo = GPIO_PINNO_15;
 8000cd6:	230f      	movs	r3, #15
 8000cd8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&gpio);
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fbdb 	bl	8000498 <GPIO_Init>

	//Configure
	GPIO_Init(&gpio);
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fbd7 	bl	8000498 <GPIO_Init>
}
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40020c00 	.word	0x40020c00
 8000cf8:	40020400 	.word	0x40020400

08000cfc <SPI_Config>:

void SPI_Config()
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
	SPIx_Handle_t spi;

	SPI_PCLK_Ctrl(SPI2, ENABLE);
 8000d02:	2101      	movs	r1, #1
 8000d04:	480d      	ldr	r0, [pc, #52]	; (8000d3c <SPI_Config+0x40>)
 8000d06:	f7ff fde3 	bl	80008d0 <SPI_PCLK_Ctrl>

	spi.pSPIx = SPI2;
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <SPI_Config+0x40>)
 8000d0c:	607b      	str	r3, [r7, #4]
	spi.SPIx_PinConfig.SPI_DeviceConfig = MASTER;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	723b      	strb	r3, [r7, #8]
	spi.SPIx_PinConfig.SPI_BusConfig = BUSCONF_FULLDUP;
 8000d12:	2300      	movs	r3, #0
 8000d14:	727b      	strb	r3, [r7, #9]
	spi.SPIx_PinConfig.SPI_ClkSpeed = BRDIV8;				//2MHz
 8000d16:	2302      	movs	r3, #2
 8000d18:	72bb      	strb	r3, [r7, #10]
	spi.SPIx_PinConfig.SPI_CPOL = ZERO_IDLE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	733b      	strb	r3, [r7, #12]
	spi.SPIx_PinConfig.SPI_CPHA = FIRSTCLK_CAP;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	737b      	strb	r3, [r7, #13]
	spi.SPIx_PinConfig.SPI_DFF = DFF8;
 8000d22:	2300      	movs	r3, #0
 8000d24:	72fb      	strb	r3, [r7, #11]
	spi.SPIx_PinConfig.SPI_SSM = SSM_DI;					//Hardware management
 8000d26:	2300      	movs	r3, #0
 8000d28:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&spi);
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fe2b 	bl	8000988 <SPI_Init>
}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40003800 	.word	0x40003800

08000d40 <ButtonResp>:
 * 	@return					: void
 *
 * 	@notes					: The function deals with the button response
 */
void ButtonResp()
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	GPIO_OPinWrite(GPIOD, GPIO_PINNO_2, RESET);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2102      	movs	r1, #2
 8000d48:	480e      	ldr	r0, [pc, #56]	; (8000d84 <ButtonResp+0x44>)
 8000d4a:	f7ff fd45 	bl	80007d8 <GPIO_OPinWrite>
	while(!(GPIO_IPinRead(GPIOD, GPIO_PINNO_0)))
 8000d4e:	e004      	b.n	8000d5a <ButtonResp+0x1a>
		GPIO_OPinWrite(GPIOD, GPIO_PINNO_2, RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2102      	movs	r1, #2
 8000d54:	480b      	ldr	r0, [pc, #44]	; (8000d84 <ButtonResp+0x44>)
 8000d56:	f7ff fd3f 	bl	80007d8 <GPIO_OPinWrite>
	while(!(GPIO_IPinRead(GPIOD, GPIO_PINNO_0)))
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4809      	ldr	r0, [pc, #36]	; (8000d84 <ButtonResp+0x44>)
 8000d5e:	f7ff fd25 	bl	80007ac <GPIO_IPinRead>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d0f3      	beq.n	8000d50 <ButtonResp+0x10>
	GPIO_OPinWrite(GPIOD, GPIO_PINNO_2, SET);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	2102      	movs	r1, #2
 8000d6c:	4805      	ldr	r0, [pc, #20]	; (8000d84 <ButtonResp+0x44>)
 8000d6e:	f7ff fd33 	bl	80007d8 <GPIO_OPinWrite>
	delay();
 8000d72:	f7ff ff55 	bl	8000c20 <delay>
	GPIO_OPinWrite(GPIOD, GPIO_PINNO_2, RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2102      	movs	r1, #2
 8000d7a:	4802      	ldr	r0, [pc, #8]	; (8000d84 <ButtonResp+0x44>)
 8000d7c:	f7ff fd2c 	bl	80007d8 <GPIO_OPinWrite>
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40020c00 	.word	0x40020c00

08000d88 <AckVerify>:

bool AckVerify(uint8_t ACK_BYTE)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
	if(ACK_BYTE==245)
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	2bf5      	cmp	r3, #245	; 0xf5
 8000d96:	d106      	bne.n	8000da6 <AckVerify+0x1e>
	{
		GPIO_OPinWrite(GPIOD, GPIO_PINNO_2, SET);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	2102      	movs	r1, #2
 8000d9c:	4804      	ldr	r0, [pc, #16]	; (8000db0 <AckVerify+0x28>)
 8000d9e:	f7ff fd1b 	bl	80007d8 <GPIO_OPinWrite>
		return true;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e000      	b.n	8000da8 <AckVerify+0x20>
	}
	return false;
 8000da6:	2300      	movs	r3, #0
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40020c00 	.word	0x40020c00

08000db4 <SPI_Comm>:

void SPI_Comm()
{
 8000db4:	b5b0      	push	{r4, r5, r7, lr}
 8000db6:	b08e      	sub	sp, #56	; 0x38
 8000db8:	af00      	add	r7, sp, #0
	int i=0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_SSOEConfig(SPI2, ENABLE);		//SSOE : LOW
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	48c6      	ldr	r0, [pc, #792]	; (80010dc <SPI_Comm+0x328>)
 8000dc2:	f7ff fef9 	bl	8000bb8 <SPI_SSOEConfig>

	for(i=0;i<5;i++)
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8000dca:	e1cb      	b.n	8001164 <SPI_Comm+0x3b0>
	{
		uint8_t CMD_CODE;			//To store the command code
		uint8_t ACK_BYTE;			//To store the receieved acknowledgement
		uint8_t DummyByte = 0xFF;	//Dummy byte to initialize SPI Slave Transfer
 8000dcc:	23ff      	movs	r3, #255	; 0xff
 8000dce:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		uint8_t DummyRead;
		uint8_t args[2];

		ButtonResp();
 8000dd2:	f7ff ffb5 	bl	8000d40 <ButtonResp>

		//SPI Tx/Rx Configurations
		SPI_EN(SPI2, ENABLE);
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	48c0      	ldr	r0, [pc, #768]	; (80010dc <SPI_Comm+0x328>)
 8000dda:	f7ff fed2 	bl	8000b82 <SPI_EN>

		if(i==0)
 8000dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d138      	bne.n	8000e56 <SPI_Comm+0xa2>
		{
			args[0] = DPin;
 8000de4:	2302      	movs	r3, #2
 8000de6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			args[1] = value;
 8000dea:	2301      	movs	r3, #1
 8000dec:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

			CMD_CODE = CMD_LED_CTRL;
 8000df0:	2301      	movs	r3, #1
 8000df2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			SPI_TxDataB(SPI2,&CMD_CODE,1);					//CMD_LED_CTRL
 8000df6:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	48b7      	ldr	r0, [pc, #732]	; (80010dc <SPI_Comm+0x328>)
 8000e00:	f7ff fe57 	bl	8000ab2 <SPI_TxDataB>
			//Dummy Read to clear RXNE: Clear Rx Buffer
			SPI_RxDataB(SPI2,&DummyRead,1);
 8000e04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e08:	2201      	movs	r2, #1
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	48b3      	ldr	r0, [pc, #716]	; (80010dc <SPI_Comm+0x328>)
 8000e0e:	f7ff fe84 	bl	8000b1a <SPI_RxDataB>
			//SPI Slave doesn't initiate Tx, thereby send dummy byte to shift from SR of Slave to SR of Master
			//Sending 8Bit Dummy value, cause SPI is configured with DFF = 8 bits
			SPI_TxDataB(SPI2, &DummyByte,1);
 8000e12:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000e16:	2201      	movs	r2, #1
 8000e18:	4619      	mov	r1, r3
 8000e1a:	48b0      	ldr	r0, [pc, #704]	; (80010dc <SPI_Comm+0x328>)
 8000e1c:	f7ff fe49 	bl	8000ab2 <SPI_TxDataB>
			SPI_RxDataB(SPI2,&ACK_BYTE,1);
 8000e20:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000e24:	2201      	movs	r2, #1
 8000e26:	4619      	mov	r1, r3
 8000e28:	48ac      	ldr	r0, [pc, #688]	; (80010dc <SPI_Comm+0x328>)
 8000e2a:	f7ff fe76 	bl	8000b1a <SPI_RxDataB>
			if(!(AckVerify(ACK_BYTE)))	//enter if-block, if AckVerify returns false
 8000e2e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff ffa8 	bl	8000d88 <AckVerify>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	f083 0301 	eor.w	r3, r3, #1
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f040 8194 	bne.w	800116e <SPI_Comm+0x3ba>
				break;

			//Functionality Definition
			SPI_TxDataB(SPI2,args,2);				//Digital Pin
 8000e46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	48a3      	ldr	r0, [pc, #652]	; (80010dc <SPI_Comm+0x328>)
 8000e50:	f7ff fe2f 	bl	8000ab2 <SPI_TxDataB>
 8000e54:	e177      	b.n	8001146 <SPI_Comm+0x392>
		}

		else if(i==1)
 8000e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d15c      	bne.n	8000f16 <SPI_Comm+0x162>
		{
			uint8_t analogRead;

			CMD_CODE = CMD_SENSOR_READ;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			SPI_TxDataB(SPI2,&CMD_CODE,1);
 8000e62:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000e66:	2201      	movs	r2, #1
 8000e68:	4619      	mov	r1, r3
 8000e6a:	489c      	ldr	r0, [pc, #624]	; (80010dc <SPI_Comm+0x328>)
 8000e6c:	f7ff fe21 	bl	8000ab2 <SPI_TxDataB>

			SPI_RxDataB(SPI2,&DummyRead,1);
 8000e70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e74:	2201      	movs	r2, #1
 8000e76:	4619      	mov	r1, r3
 8000e78:	4898      	ldr	r0, [pc, #608]	; (80010dc <SPI_Comm+0x328>)
 8000e7a:	f7ff fe4e 	bl	8000b1a <SPI_RxDataB>
			SPI_TxDataB(SPI2,&DummyByte,1);
 8000e7e:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000e82:	2201      	movs	r2, #1
 8000e84:	4619      	mov	r1, r3
 8000e86:	4895      	ldr	r0, [pc, #596]	; (80010dc <SPI_Comm+0x328>)
 8000e88:	f7ff fe13 	bl	8000ab2 <SPI_TxDataB>
			SPI_RxDataB(SPI2,&ACK_BYTE,1);
 8000e8c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000e90:	2201      	movs	r2, #1
 8000e92:	4619      	mov	r1, r3
 8000e94:	4891      	ldr	r0, [pc, #580]	; (80010dc <SPI_Comm+0x328>)
 8000e96:	f7ff fe40 	bl	8000b1a <SPI_RxDataB>
			if(!(AckVerify(ACK_BYTE)))			//enter if-block, if AckVerify returns false
 8000e9a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff ff72 	bl	8000d88 <AckVerify>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	f083 0301 	eor.w	r3, r3, #1
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <SPI_Comm+0x100>
				break;
 8000eb0:	bf00      	nop
				break;
 8000eb2:	e15c      	b.n	800116e <SPI_Comm+0x3ba>

			//Functionality Definition
			args[0] = ANALOG_PIN0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			SPI_TxDataB(SPI2,args,1);
 8000eba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4886      	ldr	r0, [pc, #536]	; (80010dc <SPI_Comm+0x328>)
 8000ec4:	f7ff fdf5 	bl	8000ab2 <SPI_TxDataB>
			SPI_RxDataB(SPI2,&DummyRead,1);		//Clear RXNE bit
 8000ec8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ecc:	2201      	movs	r2, #1
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4882      	ldr	r0, [pc, #520]	; (80010dc <SPI_Comm+0x328>)
 8000ed2:	f7ff fe22 	bl	8000b1a <SPI_RxDataB>
			delay();
 8000ed6:	f7ff fea3 	bl	8000c20 <delay>
			SPI_TxDataB(SPI2,&DummyByte,1);
 8000eda:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000ede:	2201      	movs	r2, #1
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	487e      	ldr	r0, [pc, #504]	; (80010dc <SPI_Comm+0x328>)
 8000ee4:	f7ff fde5 	bl	8000ab2 <SPI_TxDataB>
			SPI_RxDataB(SPI2,&analogRead,1);
 8000ee8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000eec:	2201      	movs	r2, #1
 8000eee:	4619      	mov	r1, r3
 8000ef0:	487a      	ldr	r0, [pc, #488]	; (80010dc <SPI_Comm+0x328>)
 8000ef2:	f7ff fe12 	bl	8000b1a <SPI_RxDataB>
			printf("Analog Value: %d\n",analogRead);
 8000ef6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000efa:	4619      	mov	r1, r3
 8000efc:	4878      	ldr	r0, [pc, #480]	; (80010e0 <SPI_Comm+0x32c>)
 8000efe:	f000 fa75 	bl	80013ec <iprintf>
			GPIO_OPinWrite(GPIOD, GPIO_PINNO_2, SET);
 8000f02:	2201      	movs	r2, #1
 8000f04:	2102      	movs	r1, #2
 8000f06:	4877      	ldr	r0, [pc, #476]	; (80010e4 <SPI_Comm+0x330>)
 8000f08:	f7ff fc66 	bl	80007d8 <GPIO_OPinWrite>
			delay();
 8000f0c:	f7ff fe88 	bl	8000c20 <delay>
			delay();
 8000f10:	f7ff fe86 	bl	8000c20 <delay>
 8000f14:	e117      	b.n	8001146 <SPI_Comm+0x392>
		}

		else if(i==2)
 8000f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d15c      	bne.n	8000fd6 <SPI_Comm+0x222>
		{
			uint8_t ledRead;

			CMD_CODE = CMD_LED_READ;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			SPI_TxDataB(SPI2,&CMD_CODE,1);
 8000f22:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000f26:	2201      	movs	r2, #1
 8000f28:	4619      	mov	r1, r3
 8000f2a:	486c      	ldr	r0, [pc, #432]	; (80010dc <SPI_Comm+0x328>)
 8000f2c:	f7ff fdc1 	bl	8000ab2 <SPI_TxDataB>

			SPI_RxDataB(SPI2,&DummyRead,1);
 8000f30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f34:	2201      	movs	r2, #1
 8000f36:	4619      	mov	r1, r3
 8000f38:	4868      	ldr	r0, [pc, #416]	; (80010dc <SPI_Comm+0x328>)
 8000f3a:	f7ff fdee 	bl	8000b1a <SPI_RxDataB>
			SPI_TxDataB(SPI2,&DummyByte,1);
 8000f3e:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000f42:	2201      	movs	r2, #1
 8000f44:	4619      	mov	r1, r3
 8000f46:	4865      	ldr	r0, [pc, #404]	; (80010dc <SPI_Comm+0x328>)
 8000f48:	f7ff fdb3 	bl	8000ab2 <SPI_TxDataB>
			SPI_RxDataB(SPI2,&ACK_BYTE,1);
 8000f4c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000f50:	2201      	movs	r2, #1
 8000f52:	4619      	mov	r1, r3
 8000f54:	4861      	ldr	r0, [pc, #388]	; (80010dc <SPI_Comm+0x328>)
 8000f56:	f7ff fde0 	bl	8000b1a <SPI_RxDataB>
			if(!(AckVerify(ACK_BYTE)))			//enter if-block, if AckVerify returns false
 8000f5a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ff12 	bl	8000d88 <AckVerify>
 8000f64:	4603      	mov	r3, r0
 8000f66:	f083 0301 	eor.w	r3, r3, #1
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <SPI_Comm+0x1c0>
				break;
 8000f70:	bf00      	nop
				break;
 8000f72:	e0fc      	b.n	800116e <SPI_Comm+0x3ba>

			//Functionality Definition
			args[0] = ANALOG_PIN0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			SPI_TxDataB(SPI2,args,1);
 8000f7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f7e:	2201      	movs	r2, #1
 8000f80:	4619      	mov	r1, r3
 8000f82:	4856      	ldr	r0, [pc, #344]	; (80010dc <SPI_Comm+0x328>)
 8000f84:	f7ff fd95 	bl	8000ab2 <SPI_TxDataB>
			SPI_RxDataB(SPI2,&DummyRead,1);		//Clear RXNE bit
 8000f88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4852      	ldr	r0, [pc, #328]	; (80010dc <SPI_Comm+0x328>)
 8000f92:	f7ff fdc2 	bl	8000b1a <SPI_RxDataB>
			delay();
 8000f96:	f7ff fe43 	bl	8000c20 <delay>
			SPI_TxDataB(SPI2,&DummyByte,1);
 8000f9a:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	484e      	ldr	r0, [pc, #312]	; (80010dc <SPI_Comm+0x328>)
 8000fa4:	f7ff fd85 	bl	8000ab2 <SPI_TxDataB>
			SPI_RxDataB(SPI2,&ledRead,1);
 8000fa8:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8000fac:	2201      	movs	r2, #1
 8000fae:	4619      	mov	r1, r3
 8000fb0:	484a      	ldr	r0, [pc, #296]	; (80010dc <SPI_Comm+0x328>)
 8000fb2:	f7ff fdb2 	bl	8000b1a <SPI_RxDataB>
			printf("LED Status: %d",ledRead);
 8000fb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000fba:	4619      	mov	r1, r3
 8000fbc:	484a      	ldr	r0, [pc, #296]	; (80010e8 <SPI_Comm+0x334>)
 8000fbe:	f000 fa15 	bl	80013ec <iprintf>
			GPIO_OPinWrite(GPIOD, GPIO_PINNO_2, SET);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	4847      	ldr	r0, [pc, #284]	; (80010e4 <SPI_Comm+0x330>)
 8000fc8:	f7ff fc06 	bl	80007d8 <GPIO_OPinWrite>
			delay();
 8000fcc:	f7ff fe28 	bl	8000c20 <delay>
			delay();
 8000fd0:	f7ff fe26 	bl	8000c20 <delay>
 8000fd4:	e0b7      	b.n	8001146 <SPI_Comm+0x392>
		}

		else if(i==3)
 8000fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d14d      	bne.n	8001078 <SPI_Comm+0x2c4>
		{
			char data[] = "Testing CMD_Print Command";
 8000fdc:	4b43      	ldr	r3, [pc, #268]	; (80010ec <SPI_Comm+0x338>)
 8000fde:	f107 040c 	add.w	r4, r7, #12
 8000fe2:	461d      	mov	r5, r3
 8000fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fe8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fec:	c403      	stmia	r4!, {r0, r1}
 8000fee:	8022      	strh	r2, [r4, #0]
			uint8_t len = strlen(data);
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff f905 	bl	8000204 <strlen>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	72fb      	strb	r3, [r7, #11]

			CMD_CODE = CMD_PRINT;
 8001000:	2304      	movs	r3, #4
 8001002:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			SPI_TxDataB(SPI2,&CMD_CODE,1);
 8001006:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800100a:	2201      	movs	r2, #1
 800100c:	4619      	mov	r1, r3
 800100e:	4833      	ldr	r0, [pc, #204]	; (80010dc <SPI_Comm+0x328>)
 8001010:	f7ff fd4f 	bl	8000ab2 <SPI_TxDataB>

			SPI_RxDataB(SPI2,&DummyRead,1);
 8001014:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001018:	2201      	movs	r2, #1
 800101a:	4619      	mov	r1, r3
 800101c:	482f      	ldr	r0, [pc, #188]	; (80010dc <SPI_Comm+0x328>)
 800101e:	f7ff fd7c 	bl	8000b1a <SPI_RxDataB>
			SPI_TxDataB(SPI2,&DummyByte,1);
 8001022:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8001026:	2201      	movs	r2, #1
 8001028:	4619      	mov	r1, r3
 800102a:	482c      	ldr	r0, [pc, #176]	; (80010dc <SPI_Comm+0x328>)
 800102c:	f7ff fd41 	bl	8000ab2 <SPI_TxDataB>
			SPI_RxDataB(SPI2,&ACK_BYTE,1);
 8001030:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001034:	2201      	movs	r2, #1
 8001036:	4619      	mov	r1, r3
 8001038:	4828      	ldr	r0, [pc, #160]	; (80010dc <SPI_Comm+0x328>)
 800103a:	f7ff fd6e 	bl	8000b1a <SPI_RxDataB>
			if(!(AckVerify(ACK_BYTE)))			//enter if-block, if AckVerify returns false
 800103e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fea0 	bl	8000d88 <AckVerify>
 8001048:	4603      	mov	r3, r0
 800104a:	f083 0301 	eor.w	r3, r3, #1
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <SPI_Comm+0x2a4>
				break;
 8001054:	bf00      	nop
				break;
 8001056:	e08a      	b.n	800116e <SPI_Comm+0x3ba>

			//Functionality Definition
			SPI_TxDataB(SPI2,&len,1);
 8001058:	f107 030b 	add.w	r3, r7, #11
 800105c:	2201      	movs	r2, #1
 800105e:	4619      	mov	r1, r3
 8001060:	481e      	ldr	r0, [pc, #120]	; (80010dc <SPI_Comm+0x328>)
 8001062:	f7ff fd26 	bl	8000ab2 <SPI_TxDataB>
			SPI_TxDataB(SPI2,(uint8_t*)data,len);
 8001066:	7afb      	ldrb	r3, [r7, #11]
 8001068:	461a      	mov	r2, r3
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	4619      	mov	r1, r3
 8001070:	481a      	ldr	r0, [pc, #104]	; (80010dc <SPI_Comm+0x328>)
 8001072:	f7ff fd1e 	bl	8000ab2 <SPI_TxDataB>
 8001076:	e066      	b.n	8001146 <SPI_Comm+0x392>
		}

		else if(i==4)
 8001078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800107a:	2b04      	cmp	r3, #4
 800107c:	d163      	bne.n	8001146 <SPI_Comm+0x392>
		{
			unsigned char SlaveID[10];

			CMD_CODE = CMD_ID_READ;
 800107e:	2305      	movs	r3, #5
 8001080:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			SPI_TxDataB(SPI2,&CMD_CODE,1);
 8001084:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8001088:	2201      	movs	r2, #1
 800108a:	4619      	mov	r1, r3
 800108c:	4813      	ldr	r0, [pc, #76]	; (80010dc <SPI_Comm+0x328>)
 800108e:	f7ff fd10 	bl	8000ab2 <SPI_TxDataB>

			SPI_RxDataB(SPI2,&DummyRead,1);
 8001092:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001096:	2201      	movs	r2, #1
 8001098:	4619      	mov	r1, r3
 800109a:	4810      	ldr	r0, [pc, #64]	; (80010dc <SPI_Comm+0x328>)
 800109c:	f7ff fd3d 	bl	8000b1a <SPI_RxDataB>
			SPI_TxDataB(SPI2,&DummyByte,1);
 80010a0:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 80010a4:	2201      	movs	r2, #1
 80010a6:	4619      	mov	r1, r3
 80010a8:	480c      	ldr	r0, [pc, #48]	; (80010dc <SPI_Comm+0x328>)
 80010aa:	f7ff fd02 	bl	8000ab2 <SPI_TxDataB>
			SPI_RxDataB(SPI2,&ACK_BYTE,1);
 80010ae:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80010b2:	2201      	movs	r2, #1
 80010b4:	4619      	mov	r1, r3
 80010b6:	4809      	ldr	r0, [pc, #36]	; (80010dc <SPI_Comm+0x328>)
 80010b8:	f7ff fd2f 	bl	8000b1a <SPI_RxDataB>
			if(!(AckVerify(ACK_BYTE)))			//enter if-block, if AckVerify returns false
 80010bc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fe61 	bl	8000d88 <AckVerify>
 80010c6:	4603      	mov	r3, r0
 80010c8:	f083 0301 	eor.w	r3, r3, #1
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SPI_Comm+0x322>
				break;
 80010d2:	bf00      	nop
				break;
 80010d4:	e04b      	b.n	800116e <SPI_Comm+0x3ba>

			//Functionality Description
			for(int i=0;i<9;i++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	633b      	str	r3, [r7, #48]	; 0x30
 80010da:	e022      	b.n	8001122 <SPI_Comm+0x36e>
 80010dc:	40003800 	.word	0x40003800
 80010e0:	08002320 	.word	0x08002320
 80010e4:	40020c00 	.word	0x40020c00
 80010e8:	08002334 	.word	0x08002334
 80010ec:	08002350 	.word	0x08002350
			{
				SPI_RxDataB(SPI2,&DummyRead,1);
 80010f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010f4:	2201      	movs	r2, #1
 80010f6:	4619      	mov	r1, r3
 80010f8:	481f      	ldr	r0, [pc, #124]	; (8001178 <SPI_Comm+0x3c4>)
 80010fa:	f7ff fd0e 	bl	8000b1a <SPI_RxDataB>
				SPI_TxDataB(SPI2,&DummyByte,1);
 80010fe:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8001102:	2201      	movs	r2, #1
 8001104:	4619      	mov	r1, r3
 8001106:	481c      	ldr	r0, [pc, #112]	; (8001178 <SPI_Comm+0x3c4>)
 8001108:	f7ff fcd3 	bl	8000ab2 <SPI_TxDataB>
				SPI_RxDataB(SPI2,(unsigned char*)(SlaveID+i),1);
 800110c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800110e:	463a      	mov	r2, r7
 8001110:	4413      	add	r3, r2
 8001112:	2201      	movs	r2, #1
 8001114:	4619      	mov	r1, r3
 8001116:	4818      	ldr	r0, [pc, #96]	; (8001178 <SPI_Comm+0x3c4>)
 8001118:	f7ff fcff 	bl	8000b1a <SPI_RxDataB>
			for(int i=0;i<9;i++)
 800111c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800111e:	3301      	adds	r3, #1
 8001120:	633b      	str	r3, [r7, #48]	; 0x30
 8001122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001124:	2b08      	cmp	r3, #8
 8001126:	dde3      	ble.n	80010f0 <SPI_Comm+0x33c>
			}
			SlaveID[9] = '\0';
 8001128:	2300      	movs	r3, #0
 800112a:	727b      	strb	r3, [r7, #9]

			if(strcmp(SlaveID,"SlaveID_1")==0)
 800112c:	463b      	mov	r3, r7
 800112e:	4913      	ldr	r1, [pc, #76]	; (800117c <SPI_Comm+0x3c8>)
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff f85d 	bl	80001f0 <strcmp>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d104      	bne.n	8001146 <SPI_Comm+0x392>
				GPIO_OPinWrite(GPIOD, GPIO_PINNO_2, SET);
 800113c:	2201      	movs	r2, #1
 800113e:	2102      	movs	r1, #2
 8001140:	480f      	ldr	r0, [pc, #60]	; (8001180 <SPI_Comm+0x3cc>)
 8001142:	f7ff fb49 	bl	80007d8 <GPIO_OPinWrite>
		}

		while(FlagStatus(SPI2, SPI_SR_BSYM));
 8001146:	bf00      	nop
 8001148:	2180      	movs	r1, #128	; 0x80
 800114a:	480b      	ldr	r0, [pc, #44]	; (8001178 <SPI_Comm+0x3c4>)
 800114c:	f7ff fd53 	bl	8000bf6 <FlagStatus>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f8      	bne.n	8001148 <SPI_Comm+0x394>
		SPI_EN(SPI2, DISABLE);
 8001156:	2100      	movs	r1, #0
 8001158:	4807      	ldr	r0, [pc, #28]	; (8001178 <SPI_Comm+0x3c4>)
 800115a:	f7ff fd12 	bl	8000b82 <SPI_EN>
	for(i=0;i<5;i++)
 800115e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001160:	3301      	adds	r3, #1
 8001162:	637b      	str	r3, [r7, #52]	; 0x34
 8001164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001166:	2b04      	cmp	r3, #4
 8001168:	f77f ae30 	ble.w	8000dcc <SPI_Comm+0x18>
	}
}
 800116c:	e000      	b.n	8001170 <SPI_Comm+0x3bc>
				break;
 800116e:	bf00      	nop
}
 8001170:	bf00      	nop
 8001172:	3738      	adds	r7, #56	; 0x38
 8001174:	46bd      	mov	sp, r7
 8001176:	bdb0      	pop	{r4, r5, r7, pc}
 8001178:	40003800 	.word	0x40003800
 800117c:	08002344 	.word	0x08002344
 8001180:	40020c00 	.word	0x40020c00

08001184 <main>:

int main(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	//Configure SPI and GPIO
	GPIO_Config();
 8001188:	f7ff fd60 	bl	8000c4c <GPIO_Config>
	SPI_Config();
 800118c:	f7ff fdb6 	bl	8000cfc <SPI_Config>

	SPI_Comm();
 8001190:	f7ff fe10 	bl	8000db4 <SPI_Comm>

	return 0;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <ITM_SendChar+0x48>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a0e      	ldr	r2, [pc, #56]	; (80011e4 <ITM_SendChar+0x48>)
 80011ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011b0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <ITM_SendChar+0x4c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a0c      	ldr	r2, [pc, #48]	; (80011e8 <ITM_SendChar+0x4c>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80011be:	bf00      	nop
 80011c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0f8      	beq.n	80011c0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80011ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	6013      	str	r3, [r2, #0]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000edfc 	.word	0xe000edfc
 80011e8:	e0000e00 	.word	0xe0000e00

080011ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	e00a      	b.n	8001214 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011fe:	f3af 8000 	nop.w
 8001202:	4601      	mov	r1, r0
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	1c5a      	adds	r2, r3, #1
 8001208:	60ba      	str	r2, [r7, #8]
 800120a:	b2ca      	uxtb	r2, r1
 800120c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	3301      	adds	r3, #1
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	429a      	cmp	r2, r3
 800121a:	dbf0      	blt.n	80011fe <_read+0x12>
	}

return len;
 800121c:	687b      	ldr	r3, [r7, #4]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b086      	sub	sp, #24
 800122a:	af00      	add	r7, sp, #0
 800122c:	60f8      	str	r0, [r7, #12]
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
 8001236:	e009      	b.n	800124c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	1c5a      	adds	r2, r3, #1
 800123c:	60ba      	str	r2, [r7, #8]
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ffab 	bl	800119c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	3301      	adds	r3, #1
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	429a      	cmp	r2, r3
 8001252:	dbf1      	blt.n	8001238 <_write+0x12>
	}
	return len;
 8001254:	687b      	ldr	r3, [r7, #4]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <_close>:

int _close(int file)
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
	return -1;
 8001266:	f04f 33ff 	mov.w	r3, #4294967295
}
 800126a:	4618      	mov	r0, r3
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001286:	605a      	str	r2, [r3, #4]
	return 0;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <_isatty>:

int _isatty(int file)
{
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
	return 1;
 800129e:	2301      	movs	r3, #1
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
	return 0;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d0:	4a14      	ldr	r2, [pc, #80]	; (8001324 <_sbrk+0x5c>)
 80012d2:	4b15      	ldr	r3, [pc, #84]	; (8001328 <_sbrk+0x60>)
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012dc:	4b13      	ldr	r3, [pc, #76]	; (800132c <_sbrk+0x64>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d102      	bne.n	80012ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <_sbrk+0x64>)
 80012e6:	4a12      	ldr	r2, [pc, #72]	; (8001330 <_sbrk+0x68>)
 80012e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <_sbrk+0x64>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d207      	bcs.n	8001308 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012f8:	f000 f846 	bl	8001388 <__errno>
 80012fc:	4603      	mov	r3, r0
 80012fe:	220c      	movs	r2, #12
 8001300:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	e009      	b.n	800131c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <_sbrk+0x64>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800130e:	4b07      	ldr	r3, [pc, #28]	; (800132c <_sbrk+0x64>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	4a05      	ldr	r2, [pc, #20]	; (800132c <_sbrk+0x64>)
 8001318:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800131a:	68fb      	ldr	r3, [r7, #12]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20020000 	.word	0x20020000
 8001328:	00000400 	.word	0x00000400
 800132c:	20000080 	.word	0x20000080
 8001330:	20000098 	.word	0x20000098

08001334 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001334:	480d      	ldr	r0, [pc, #52]	; (800136c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001336:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001338:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800133c:	480c      	ldr	r0, [pc, #48]	; (8001370 <LoopForever+0x6>)
  ldr r1, =_edata
 800133e:	490d      	ldr	r1, [pc, #52]	; (8001374 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001340:	4a0d      	ldr	r2, [pc, #52]	; (8001378 <LoopForever+0xe>)
  movs r3, #0
 8001342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001344:	e002      	b.n	800134c <LoopCopyDataInit>

08001346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134a:	3304      	adds	r3, #4

0800134c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800134c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001350:	d3f9      	bcc.n	8001346 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001352:	4a0a      	ldr	r2, [pc, #40]	; (800137c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001354:	4c0a      	ldr	r4, [pc, #40]	; (8001380 <LoopForever+0x16>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001358:	e001      	b.n	800135e <LoopFillZerobss>

0800135a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800135a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800135c:	3204      	adds	r2, #4

0800135e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001360:	d3fb      	bcc.n	800135a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001362:	f000 f817 	bl	8001394 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001366:	f7ff ff0d 	bl	8001184 <main>

0800136a <LoopForever>:

LoopForever:
    b LoopForever
 800136a:	e7fe      	b.n	800136a <LoopForever>
  ldr   r0, =_estack
 800136c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001374:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001378:	0800240c 	.word	0x0800240c
  ldr r2, =_sbss
 800137c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001380:	20000094 	.word	0x20000094

08001384 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001384:	e7fe      	b.n	8001384 <ADC_IRQHandler>
	...

08001388 <__errno>:
 8001388:	4b01      	ldr	r3, [pc, #4]	; (8001390 <__errno+0x8>)
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20000000 	.word	0x20000000

08001394 <__libc_init_array>:
 8001394:	b570      	push	{r4, r5, r6, lr}
 8001396:	4d0d      	ldr	r5, [pc, #52]	; (80013cc <__libc_init_array+0x38>)
 8001398:	4c0d      	ldr	r4, [pc, #52]	; (80013d0 <__libc_init_array+0x3c>)
 800139a:	1b64      	subs	r4, r4, r5
 800139c:	10a4      	asrs	r4, r4, #2
 800139e:	2600      	movs	r6, #0
 80013a0:	42a6      	cmp	r6, r4
 80013a2:	d109      	bne.n	80013b8 <__libc_init_array+0x24>
 80013a4:	4d0b      	ldr	r5, [pc, #44]	; (80013d4 <__libc_init_array+0x40>)
 80013a6:	4c0c      	ldr	r4, [pc, #48]	; (80013d8 <__libc_init_array+0x44>)
 80013a8:	f000 ffae 	bl	8002308 <_init>
 80013ac:	1b64      	subs	r4, r4, r5
 80013ae:	10a4      	asrs	r4, r4, #2
 80013b0:	2600      	movs	r6, #0
 80013b2:	42a6      	cmp	r6, r4
 80013b4:	d105      	bne.n	80013c2 <__libc_init_array+0x2e>
 80013b6:	bd70      	pop	{r4, r5, r6, pc}
 80013b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80013bc:	4798      	blx	r3
 80013be:	3601      	adds	r6, #1
 80013c0:	e7ee      	b.n	80013a0 <__libc_init_array+0xc>
 80013c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80013c6:	4798      	blx	r3
 80013c8:	3601      	adds	r6, #1
 80013ca:	e7f2      	b.n	80013b2 <__libc_init_array+0x1e>
 80013cc:	08002404 	.word	0x08002404
 80013d0:	08002404 	.word	0x08002404
 80013d4:	08002404 	.word	0x08002404
 80013d8:	08002408 	.word	0x08002408

080013dc <memset>:
 80013dc:	4402      	add	r2, r0
 80013de:	4603      	mov	r3, r0
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d100      	bne.n	80013e6 <memset+0xa>
 80013e4:	4770      	bx	lr
 80013e6:	f803 1b01 	strb.w	r1, [r3], #1
 80013ea:	e7f9      	b.n	80013e0 <memset+0x4>

080013ec <iprintf>:
 80013ec:	b40f      	push	{r0, r1, r2, r3}
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <iprintf+0x2c>)
 80013f0:	b513      	push	{r0, r1, r4, lr}
 80013f2:	681c      	ldr	r4, [r3, #0]
 80013f4:	b124      	cbz	r4, 8001400 <iprintf+0x14>
 80013f6:	69a3      	ldr	r3, [r4, #24]
 80013f8:	b913      	cbnz	r3, 8001400 <iprintf+0x14>
 80013fa:	4620      	mov	r0, r4
 80013fc:	f000 f866 	bl	80014cc <__sinit>
 8001400:	ab05      	add	r3, sp, #20
 8001402:	9a04      	ldr	r2, [sp, #16]
 8001404:	68a1      	ldr	r1, [r4, #8]
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	4620      	mov	r0, r4
 800140a:	f000 f9bd 	bl	8001788 <_vfiprintf_r>
 800140e:	b002      	add	sp, #8
 8001410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001414:	b004      	add	sp, #16
 8001416:	4770      	bx	lr
 8001418:	20000000 	.word	0x20000000

0800141c <std>:
 800141c:	2300      	movs	r3, #0
 800141e:	b510      	push	{r4, lr}
 8001420:	4604      	mov	r4, r0
 8001422:	e9c0 3300 	strd	r3, r3, [r0]
 8001426:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800142a:	6083      	str	r3, [r0, #8]
 800142c:	8181      	strh	r1, [r0, #12]
 800142e:	6643      	str	r3, [r0, #100]	; 0x64
 8001430:	81c2      	strh	r2, [r0, #14]
 8001432:	6183      	str	r3, [r0, #24]
 8001434:	4619      	mov	r1, r3
 8001436:	2208      	movs	r2, #8
 8001438:	305c      	adds	r0, #92	; 0x5c
 800143a:	f7ff ffcf 	bl	80013dc <memset>
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <std+0x38>)
 8001440:	6263      	str	r3, [r4, #36]	; 0x24
 8001442:	4b05      	ldr	r3, [pc, #20]	; (8001458 <std+0x3c>)
 8001444:	62a3      	str	r3, [r4, #40]	; 0x28
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <std+0x40>)
 8001448:	62e3      	str	r3, [r4, #44]	; 0x2c
 800144a:	4b05      	ldr	r3, [pc, #20]	; (8001460 <std+0x44>)
 800144c:	6224      	str	r4, [r4, #32]
 800144e:	6323      	str	r3, [r4, #48]	; 0x30
 8001450:	bd10      	pop	{r4, pc}
 8001452:	bf00      	nop
 8001454:	08001d31 	.word	0x08001d31
 8001458:	08001d53 	.word	0x08001d53
 800145c:	08001d8b 	.word	0x08001d8b
 8001460:	08001daf 	.word	0x08001daf

08001464 <_cleanup_r>:
 8001464:	4901      	ldr	r1, [pc, #4]	; (800146c <_cleanup_r+0x8>)
 8001466:	f000 b8af 	b.w	80015c8 <_fwalk_reent>
 800146a:	bf00      	nop
 800146c:	08002089 	.word	0x08002089

08001470 <__sfmoreglue>:
 8001470:	b570      	push	{r4, r5, r6, lr}
 8001472:	2268      	movs	r2, #104	; 0x68
 8001474:	1e4d      	subs	r5, r1, #1
 8001476:	4355      	muls	r5, r2
 8001478:	460e      	mov	r6, r1
 800147a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800147e:	f000 f8e5 	bl	800164c <_malloc_r>
 8001482:	4604      	mov	r4, r0
 8001484:	b140      	cbz	r0, 8001498 <__sfmoreglue+0x28>
 8001486:	2100      	movs	r1, #0
 8001488:	e9c0 1600 	strd	r1, r6, [r0]
 800148c:	300c      	adds	r0, #12
 800148e:	60a0      	str	r0, [r4, #8]
 8001490:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001494:	f7ff ffa2 	bl	80013dc <memset>
 8001498:	4620      	mov	r0, r4
 800149a:	bd70      	pop	{r4, r5, r6, pc}

0800149c <__sfp_lock_acquire>:
 800149c:	4801      	ldr	r0, [pc, #4]	; (80014a4 <__sfp_lock_acquire+0x8>)
 800149e:	f000 b8b3 	b.w	8001608 <__retarget_lock_acquire_recursive>
 80014a2:	bf00      	nop
 80014a4:	20000085 	.word	0x20000085

080014a8 <__sfp_lock_release>:
 80014a8:	4801      	ldr	r0, [pc, #4]	; (80014b0 <__sfp_lock_release+0x8>)
 80014aa:	f000 b8ae 	b.w	800160a <__retarget_lock_release_recursive>
 80014ae:	bf00      	nop
 80014b0:	20000085 	.word	0x20000085

080014b4 <__sinit_lock_acquire>:
 80014b4:	4801      	ldr	r0, [pc, #4]	; (80014bc <__sinit_lock_acquire+0x8>)
 80014b6:	f000 b8a7 	b.w	8001608 <__retarget_lock_acquire_recursive>
 80014ba:	bf00      	nop
 80014bc:	20000086 	.word	0x20000086

080014c0 <__sinit_lock_release>:
 80014c0:	4801      	ldr	r0, [pc, #4]	; (80014c8 <__sinit_lock_release+0x8>)
 80014c2:	f000 b8a2 	b.w	800160a <__retarget_lock_release_recursive>
 80014c6:	bf00      	nop
 80014c8:	20000086 	.word	0x20000086

080014cc <__sinit>:
 80014cc:	b510      	push	{r4, lr}
 80014ce:	4604      	mov	r4, r0
 80014d0:	f7ff fff0 	bl	80014b4 <__sinit_lock_acquire>
 80014d4:	69a3      	ldr	r3, [r4, #24]
 80014d6:	b11b      	cbz	r3, 80014e0 <__sinit+0x14>
 80014d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014dc:	f7ff bff0 	b.w	80014c0 <__sinit_lock_release>
 80014e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80014e4:	6523      	str	r3, [r4, #80]	; 0x50
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <__sinit+0x68>)
 80014e8:	4a13      	ldr	r2, [pc, #76]	; (8001538 <__sinit+0x6c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80014ee:	42a3      	cmp	r3, r4
 80014f0:	bf04      	itt	eq
 80014f2:	2301      	moveq	r3, #1
 80014f4:	61a3      	streq	r3, [r4, #24]
 80014f6:	4620      	mov	r0, r4
 80014f8:	f000 f820 	bl	800153c <__sfp>
 80014fc:	6060      	str	r0, [r4, #4]
 80014fe:	4620      	mov	r0, r4
 8001500:	f000 f81c 	bl	800153c <__sfp>
 8001504:	60a0      	str	r0, [r4, #8]
 8001506:	4620      	mov	r0, r4
 8001508:	f000 f818 	bl	800153c <__sfp>
 800150c:	2200      	movs	r2, #0
 800150e:	60e0      	str	r0, [r4, #12]
 8001510:	2104      	movs	r1, #4
 8001512:	6860      	ldr	r0, [r4, #4]
 8001514:	f7ff ff82 	bl	800141c <std>
 8001518:	68a0      	ldr	r0, [r4, #8]
 800151a:	2201      	movs	r2, #1
 800151c:	2109      	movs	r1, #9
 800151e:	f7ff ff7d 	bl	800141c <std>
 8001522:	68e0      	ldr	r0, [r4, #12]
 8001524:	2202      	movs	r2, #2
 8001526:	2112      	movs	r1, #18
 8001528:	f7ff ff78 	bl	800141c <std>
 800152c:	2301      	movs	r3, #1
 800152e:	61a3      	str	r3, [r4, #24]
 8001530:	e7d2      	b.n	80014d8 <__sinit+0xc>
 8001532:	bf00      	nop
 8001534:	0800236c 	.word	0x0800236c
 8001538:	08001465 	.word	0x08001465

0800153c <__sfp>:
 800153c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800153e:	4607      	mov	r7, r0
 8001540:	f7ff ffac 	bl	800149c <__sfp_lock_acquire>
 8001544:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <__sfp+0x84>)
 8001546:	681e      	ldr	r6, [r3, #0]
 8001548:	69b3      	ldr	r3, [r6, #24]
 800154a:	b913      	cbnz	r3, 8001552 <__sfp+0x16>
 800154c:	4630      	mov	r0, r6
 800154e:	f7ff ffbd 	bl	80014cc <__sinit>
 8001552:	3648      	adds	r6, #72	; 0x48
 8001554:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001558:	3b01      	subs	r3, #1
 800155a:	d503      	bpl.n	8001564 <__sfp+0x28>
 800155c:	6833      	ldr	r3, [r6, #0]
 800155e:	b30b      	cbz	r3, 80015a4 <__sfp+0x68>
 8001560:	6836      	ldr	r6, [r6, #0]
 8001562:	e7f7      	b.n	8001554 <__sfp+0x18>
 8001564:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001568:	b9d5      	cbnz	r5, 80015a0 <__sfp+0x64>
 800156a:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <__sfp+0x88>)
 800156c:	60e3      	str	r3, [r4, #12]
 800156e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001572:	6665      	str	r5, [r4, #100]	; 0x64
 8001574:	f000 f847 	bl	8001606 <__retarget_lock_init_recursive>
 8001578:	f7ff ff96 	bl	80014a8 <__sfp_lock_release>
 800157c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001580:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001584:	6025      	str	r5, [r4, #0]
 8001586:	61a5      	str	r5, [r4, #24]
 8001588:	2208      	movs	r2, #8
 800158a:	4629      	mov	r1, r5
 800158c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001590:	f7ff ff24 	bl	80013dc <memset>
 8001594:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001598:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800159c:	4620      	mov	r0, r4
 800159e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015a0:	3468      	adds	r4, #104	; 0x68
 80015a2:	e7d9      	b.n	8001558 <__sfp+0x1c>
 80015a4:	2104      	movs	r1, #4
 80015a6:	4638      	mov	r0, r7
 80015a8:	f7ff ff62 	bl	8001470 <__sfmoreglue>
 80015ac:	4604      	mov	r4, r0
 80015ae:	6030      	str	r0, [r6, #0]
 80015b0:	2800      	cmp	r0, #0
 80015b2:	d1d5      	bne.n	8001560 <__sfp+0x24>
 80015b4:	f7ff ff78 	bl	80014a8 <__sfp_lock_release>
 80015b8:	230c      	movs	r3, #12
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	e7ee      	b.n	800159c <__sfp+0x60>
 80015be:	bf00      	nop
 80015c0:	0800236c 	.word	0x0800236c
 80015c4:	ffff0001 	.word	0xffff0001

080015c8 <_fwalk_reent>:
 80015c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015cc:	4606      	mov	r6, r0
 80015ce:	4688      	mov	r8, r1
 80015d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80015d4:	2700      	movs	r7, #0
 80015d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80015da:	f1b9 0901 	subs.w	r9, r9, #1
 80015de:	d505      	bpl.n	80015ec <_fwalk_reent+0x24>
 80015e0:	6824      	ldr	r4, [r4, #0]
 80015e2:	2c00      	cmp	r4, #0
 80015e4:	d1f7      	bne.n	80015d6 <_fwalk_reent+0xe>
 80015e6:	4638      	mov	r0, r7
 80015e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80015ec:	89ab      	ldrh	r3, [r5, #12]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d907      	bls.n	8001602 <_fwalk_reent+0x3a>
 80015f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80015f6:	3301      	adds	r3, #1
 80015f8:	d003      	beq.n	8001602 <_fwalk_reent+0x3a>
 80015fa:	4629      	mov	r1, r5
 80015fc:	4630      	mov	r0, r6
 80015fe:	47c0      	blx	r8
 8001600:	4307      	orrs	r7, r0
 8001602:	3568      	adds	r5, #104	; 0x68
 8001604:	e7e9      	b.n	80015da <_fwalk_reent+0x12>

08001606 <__retarget_lock_init_recursive>:
 8001606:	4770      	bx	lr

08001608 <__retarget_lock_acquire_recursive>:
 8001608:	4770      	bx	lr

0800160a <__retarget_lock_release_recursive>:
 800160a:	4770      	bx	lr

0800160c <sbrk_aligned>:
 800160c:	b570      	push	{r4, r5, r6, lr}
 800160e:	4e0e      	ldr	r6, [pc, #56]	; (8001648 <sbrk_aligned+0x3c>)
 8001610:	460c      	mov	r4, r1
 8001612:	6831      	ldr	r1, [r6, #0]
 8001614:	4605      	mov	r5, r0
 8001616:	b911      	cbnz	r1, 800161e <sbrk_aligned+0x12>
 8001618:	f000 fb7a 	bl	8001d10 <_sbrk_r>
 800161c:	6030      	str	r0, [r6, #0]
 800161e:	4621      	mov	r1, r4
 8001620:	4628      	mov	r0, r5
 8001622:	f000 fb75 	bl	8001d10 <_sbrk_r>
 8001626:	1c43      	adds	r3, r0, #1
 8001628:	d00a      	beq.n	8001640 <sbrk_aligned+0x34>
 800162a:	1cc4      	adds	r4, r0, #3
 800162c:	f024 0403 	bic.w	r4, r4, #3
 8001630:	42a0      	cmp	r0, r4
 8001632:	d007      	beq.n	8001644 <sbrk_aligned+0x38>
 8001634:	1a21      	subs	r1, r4, r0
 8001636:	4628      	mov	r0, r5
 8001638:	f000 fb6a 	bl	8001d10 <_sbrk_r>
 800163c:	3001      	adds	r0, #1
 800163e:	d101      	bne.n	8001644 <sbrk_aligned+0x38>
 8001640:	f04f 34ff 	mov.w	r4, #4294967295
 8001644:	4620      	mov	r0, r4
 8001646:	bd70      	pop	{r4, r5, r6, pc}
 8001648:	2000008c 	.word	0x2000008c

0800164c <_malloc_r>:
 800164c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001650:	1ccd      	adds	r5, r1, #3
 8001652:	f025 0503 	bic.w	r5, r5, #3
 8001656:	3508      	adds	r5, #8
 8001658:	2d0c      	cmp	r5, #12
 800165a:	bf38      	it	cc
 800165c:	250c      	movcc	r5, #12
 800165e:	2d00      	cmp	r5, #0
 8001660:	4607      	mov	r7, r0
 8001662:	db01      	blt.n	8001668 <_malloc_r+0x1c>
 8001664:	42a9      	cmp	r1, r5
 8001666:	d905      	bls.n	8001674 <_malloc_r+0x28>
 8001668:	230c      	movs	r3, #12
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	2600      	movs	r6, #0
 800166e:	4630      	mov	r0, r6
 8001670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001674:	4e2e      	ldr	r6, [pc, #184]	; (8001730 <_malloc_r+0xe4>)
 8001676:	f000 fdbb 	bl	80021f0 <__malloc_lock>
 800167a:	6833      	ldr	r3, [r6, #0]
 800167c:	461c      	mov	r4, r3
 800167e:	bb34      	cbnz	r4, 80016ce <_malloc_r+0x82>
 8001680:	4629      	mov	r1, r5
 8001682:	4638      	mov	r0, r7
 8001684:	f7ff ffc2 	bl	800160c <sbrk_aligned>
 8001688:	1c43      	adds	r3, r0, #1
 800168a:	4604      	mov	r4, r0
 800168c:	d14d      	bne.n	800172a <_malloc_r+0xde>
 800168e:	6834      	ldr	r4, [r6, #0]
 8001690:	4626      	mov	r6, r4
 8001692:	2e00      	cmp	r6, #0
 8001694:	d140      	bne.n	8001718 <_malloc_r+0xcc>
 8001696:	6823      	ldr	r3, [r4, #0]
 8001698:	4631      	mov	r1, r6
 800169a:	4638      	mov	r0, r7
 800169c:	eb04 0803 	add.w	r8, r4, r3
 80016a0:	f000 fb36 	bl	8001d10 <_sbrk_r>
 80016a4:	4580      	cmp	r8, r0
 80016a6:	d13a      	bne.n	800171e <_malloc_r+0xd2>
 80016a8:	6821      	ldr	r1, [r4, #0]
 80016aa:	3503      	adds	r5, #3
 80016ac:	1a6d      	subs	r5, r5, r1
 80016ae:	f025 0503 	bic.w	r5, r5, #3
 80016b2:	3508      	adds	r5, #8
 80016b4:	2d0c      	cmp	r5, #12
 80016b6:	bf38      	it	cc
 80016b8:	250c      	movcc	r5, #12
 80016ba:	4629      	mov	r1, r5
 80016bc:	4638      	mov	r0, r7
 80016be:	f7ff ffa5 	bl	800160c <sbrk_aligned>
 80016c2:	3001      	adds	r0, #1
 80016c4:	d02b      	beq.n	800171e <_malloc_r+0xd2>
 80016c6:	6823      	ldr	r3, [r4, #0]
 80016c8:	442b      	add	r3, r5
 80016ca:	6023      	str	r3, [r4, #0]
 80016cc:	e00e      	b.n	80016ec <_malloc_r+0xa0>
 80016ce:	6822      	ldr	r2, [r4, #0]
 80016d0:	1b52      	subs	r2, r2, r5
 80016d2:	d41e      	bmi.n	8001712 <_malloc_r+0xc6>
 80016d4:	2a0b      	cmp	r2, #11
 80016d6:	d916      	bls.n	8001706 <_malloc_r+0xba>
 80016d8:	1961      	adds	r1, r4, r5
 80016da:	42a3      	cmp	r3, r4
 80016dc:	6025      	str	r5, [r4, #0]
 80016de:	bf18      	it	ne
 80016e0:	6059      	strne	r1, [r3, #4]
 80016e2:	6863      	ldr	r3, [r4, #4]
 80016e4:	bf08      	it	eq
 80016e6:	6031      	streq	r1, [r6, #0]
 80016e8:	5162      	str	r2, [r4, r5]
 80016ea:	604b      	str	r3, [r1, #4]
 80016ec:	4638      	mov	r0, r7
 80016ee:	f104 060b 	add.w	r6, r4, #11
 80016f2:	f000 fd83 	bl	80021fc <__malloc_unlock>
 80016f6:	f026 0607 	bic.w	r6, r6, #7
 80016fa:	1d23      	adds	r3, r4, #4
 80016fc:	1af2      	subs	r2, r6, r3
 80016fe:	d0b6      	beq.n	800166e <_malloc_r+0x22>
 8001700:	1b9b      	subs	r3, r3, r6
 8001702:	50a3      	str	r3, [r4, r2]
 8001704:	e7b3      	b.n	800166e <_malloc_r+0x22>
 8001706:	6862      	ldr	r2, [r4, #4]
 8001708:	42a3      	cmp	r3, r4
 800170a:	bf0c      	ite	eq
 800170c:	6032      	streq	r2, [r6, #0]
 800170e:	605a      	strne	r2, [r3, #4]
 8001710:	e7ec      	b.n	80016ec <_malloc_r+0xa0>
 8001712:	4623      	mov	r3, r4
 8001714:	6864      	ldr	r4, [r4, #4]
 8001716:	e7b2      	b.n	800167e <_malloc_r+0x32>
 8001718:	4634      	mov	r4, r6
 800171a:	6876      	ldr	r6, [r6, #4]
 800171c:	e7b9      	b.n	8001692 <_malloc_r+0x46>
 800171e:	230c      	movs	r3, #12
 8001720:	603b      	str	r3, [r7, #0]
 8001722:	4638      	mov	r0, r7
 8001724:	f000 fd6a 	bl	80021fc <__malloc_unlock>
 8001728:	e7a1      	b.n	800166e <_malloc_r+0x22>
 800172a:	6025      	str	r5, [r4, #0]
 800172c:	e7de      	b.n	80016ec <_malloc_r+0xa0>
 800172e:	bf00      	nop
 8001730:	20000088 	.word	0x20000088

08001734 <__sfputc_r>:
 8001734:	6893      	ldr	r3, [r2, #8]
 8001736:	3b01      	subs	r3, #1
 8001738:	2b00      	cmp	r3, #0
 800173a:	b410      	push	{r4}
 800173c:	6093      	str	r3, [r2, #8]
 800173e:	da08      	bge.n	8001752 <__sfputc_r+0x1e>
 8001740:	6994      	ldr	r4, [r2, #24]
 8001742:	42a3      	cmp	r3, r4
 8001744:	db01      	blt.n	800174a <__sfputc_r+0x16>
 8001746:	290a      	cmp	r1, #10
 8001748:	d103      	bne.n	8001752 <__sfputc_r+0x1e>
 800174a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800174e:	f000 bb33 	b.w	8001db8 <__swbuf_r>
 8001752:	6813      	ldr	r3, [r2, #0]
 8001754:	1c58      	adds	r0, r3, #1
 8001756:	6010      	str	r0, [r2, #0]
 8001758:	7019      	strb	r1, [r3, #0]
 800175a:	4608      	mov	r0, r1
 800175c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001760:	4770      	bx	lr

08001762 <__sfputs_r>:
 8001762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001764:	4606      	mov	r6, r0
 8001766:	460f      	mov	r7, r1
 8001768:	4614      	mov	r4, r2
 800176a:	18d5      	adds	r5, r2, r3
 800176c:	42ac      	cmp	r4, r5
 800176e:	d101      	bne.n	8001774 <__sfputs_r+0x12>
 8001770:	2000      	movs	r0, #0
 8001772:	e007      	b.n	8001784 <__sfputs_r+0x22>
 8001774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001778:	463a      	mov	r2, r7
 800177a:	4630      	mov	r0, r6
 800177c:	f7ff ffda 	bl	8001734 <__sfputc_r>
 8001780:	1c43      	adds	r3, r0, #1
 8001782:	d1f3      	bne.n	800176c <__sfputs_r+0xa>
 8001784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001788 <_vfiprintf_r>:
 8001788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800178c:	460d      	mov	r5, r1
 800178e:	b09d      	sub	sp, #116	; 0x74
 8001790:	4614      	mov	r4, r2
 8001792:	4698      	mov	r8, r3
 8001794:	4606      	mov	r6, r0
 8001796:	b118      	cbz	r0, 80017a0 <_vfiprintf_r+0x18>
 8001798:	6983      	ldr	r3, [r0, #24]
 800179a:	b90b      	cbnz	r3, 80017a0 <_vfiprintf_r+0x18>
 800179c:	f7ff fe96 	bl	80014cc <__sinit>
 80017a0:	4b89      	ldr	r3, [pc, #548]	; (80019c8 <_vfiprintf_r+0x240>)
 80017a2:	429d      	cmp	r5, r3
 80017a4:	d11b      	bne.n	80017de <_vfiprintf_r+0x56>
 80017a6:	6875      	ldr	r5, [r6, #4]
 80017a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80017aa:	07d9      	lsls	r1, r3, #31
 80017ac:	d405      	bmi.n	80017ba <_vfiprintf_r+0x32>
 80017ae:	89ab      	ldrh	r3, [r5, #12]
 80017b0:	059a      	lsls	r2, r3, #22
 80017b2:	d402      	bmi.n	80017ba <_vfiprintf_r+0x32>
 80017b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80017b6:	f7ff ff27 	bl	8001608 <__retarget_lock_acquire_recursive>
 80017ba:	89ab      	ldrh	r3, [r5, #12]
 80017bc:	071b      	lsls	r3, r3, #28
 80017be:	d501      	bpl.n	80017c4 <_vfiprintf_r+0x3c>
 80017c0:	692b      	ldr	r3, [r5, #16]
 80017c2:	b9eb      	cbnz	r3, 8001800 <_vfiprintf_r+0x78>
 80017c4:	4629      	mov	r1, r5
 80017c6:	4630      	mov	r0, r6
 80017c8:	f000 fb5a 	bl	8001e80 <__swsetup_r>
 80017cc:	b1c0      	cbz	r0, 8001800 <_vfiprintf_r+0x78>
 80017ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80017d0:	07dc      	lsls	r4, r3, #31
 80017d2:	d50e      	bpl.n	80017f2 <_vfiprintf_r+0x6a>
 80017d4:	f04f 30ff 	mov.w	r0, #4294967295
 80017d8:	b01d      	add	sp, #116	; 0x74
 80017da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017de:	4b7b      	ldr	r3, [pc, #492]	; (80019cc <_vfiprintf_r+0x244>)
 80017e0:	429d      	cmp	r5, r3
 80017e2:	d101      	bne.n	80017e8 <_vfiprintf_r+0x60>
 80017e4:	68b5      	ldr	r5, [r6, #8]
 80017e6:	e7df      	b.n	80017a8 <_vfiprintf_r+0x20>
 80017e8:	4b79      	ldr	r3, [pc, #484]	; (80019d0 <_vfiprintf_r+0x248>)
 80017ea:	429d      	cmp	r5, r3
 80017ec:	bf08      	it	eq
 80017ee:	68f5      	ldreq	r5, [r6, #12]
 80017f0:	e7da      	b.n	80017a8 <_vfiprintf_r+0x20>
 80017f2:	89ab      	ldrh	r3, [r5, #12]
 80017f4:	0598      	lsls	r0, r3, #22
 80017f6:	d4ed      	bmi.n	80017d4 <_vfiprintf_r+0x4c>
 80017f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80017fa:	f7ff ff06 	bl	800160a <__retarget_lock_release_recursive>
 80017fe:	e7e9      	b.n	80017d4 <_vfiprintf_r+0x4c>
 8001800:	2300      	movs	r3, #0
 8001802:	9309      	str	r3, [sp, #36]	; 0x24
 8001804:	2320      	movs	r3, #32
 8001806:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800180a:	f8cd 800c 	str.w	r8, [sp, #12]
 800180e:	2330      	movs	r3, #48	; 0x30
 8001810:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80019d4 <_vfiprintf_r+0x24c>
 8001814:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001818:	f04f 0901 	mov.w	r9, #1
 800181c:	4623      	mov	r3, r4
 800181e:	469a      	mov	sl, r3
 8001820:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001824:	b10a      	cbz	r2, 800182a <_vfiprintf_r+0xa2>
 8001826:	2a25      	cmp	r2, #37	; 0x25
 8001828:	d1f9      	bne.n	800181e <_vfiprintf_r+0x96>
 800182a:	ebba 0b04 	subs.w	fp, sl, r4
 800182e:	d00b      	beq.n	8001848 <_vfiprintf_r+0xc0>
 8001830:	465b      	mov	r3, fp
 8001832:	4622      	mov	r2, r4
 8001834:	4629      	mov	r1, r5
 8001836:	4630      	mov	r0, r6
 8001838:	f7ff ff93 	bl	8001762 <__sfputs_r>
 800183c:	3001      	adds	r0, #1
 800183e:	f000 80aa 	beq.w	8001996 <_vfiprintf_r+0x20e>
 8001842:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001844:	445a      	add	r2, fp
 8001846:	9209      	str	r2, [sp, #36]	; 0x24
 8001848:	f89a 3000 	ldrb.w	r3, [sl]
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 80a2 	beq.w	8001996 <_vfiprintf_r+0x20e>
 8001852:	2300      	movs	r3, #0
 8001854:	f04f 32ff 	mov.w	r2, #4294967295
 8001858:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800185c:	f10a 0a01 	add.w	sl, sl, #1
 8001860:	9304      	str	r3, [sp, #16]
 8001862:	9307      	str	r3, [sp, #28]
 8001864:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001868:	931a      	str	r3, [sp, #104]	; 0x68
 800186a:	4654      	mov	r4, sl
 800186c:	2205      	movs	r2, #5
 800186e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001872:	4858      	ldr	r0, [pc, #352]	; (80019d4 <_vfiprintf_r+0x24c>)
 8001874:	f7fe fcd4 	bl	8000220 <memchr>
 8001878:	9a04      	ldr	r2, [sp, #16]
 800187a:	b9d8      	cbnz	r0, 80018b4 <_vfiprintf_r+0x12c>
 800187c:	06d1      	lsls	r1, r2, #27
 800187e:	bf44      	itt	mi
 8001880:	2320      	movmi	r3, #32
 8001882:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001886:	0713      	lsls	r3, r2, #28
 8001888:	bf44      	itt	mi
 800188a:	232b      	movmi	r3, #43	; 0x2b
 800188c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001890:	f89a 3000 	ldrb.w	r3, [sl]
 8001894:	2b2a      	cmp	r3, #42	; 0x2a
 8001896:	d015      	beq.n	80018c4 <_vfiprintf_r+0x13c>
 8001898:	9a07      	ldr	r2, [sp, #28]
 800189a:	4654      	mov	r4, sl
 800189c:	2000      	movs	r0, #0
 800189e:	f04f 0c0a 	mov.w	ip, #10
 80018a2:	4621      	mov	r1, r4
 80018a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80018a8:	3b30      	subs	r3, #48	; 0x30
 80018aa:	2b09      	cmp	r3, #9
 80018ac:	d94e      	bls.n	800194c <_vfiprintf_r+0x1c4>
 80018ae:	b1b0      	cbz	r0, 80018de <_vfiprintf_r+0x156>
 80018b0:	9207      	str	r2, [sp, #28]
 80018b2:	e014      	b.n	80018de <_vfiprintf_r+0x156>
 80018b4:	eba0 0308 	sub.w	r3, r0, r8
 80018b8:	fa09 f303 	lsl.w	r3, r9, r3
 80018bc:	4313      	orrs	r3, r2
 80018be:	9304      	str	r3, [sp, #16]
 80018c0:	46a2      	mov	sl, r4
 80018c2:	e7d2      	b.n	800186a <_vfiprintf_r+0xe2>
 80018c4:	9b03      	ldr	r3, [sp, #12]
 80018c6:	1d19      	adds	r1, r3, #4
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	9103      	str	r1, [sp, #12]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	bfbb      	ittet	lt
 80018d0:	425b      	neglt	r3, r3
 80018d2:	f042 0202 	orrlt.w	r2, r2, #2
 80018d6:	9307      	strge	r3, [sp, #28]
 80018d8:	9307      	strlt	r3, [sp, #28]
 80018da:	bfb8      	it	lt
 80018dc:	9204      	strlt	r2, [sp, #16]
 80018de:	7823      	ldrb	r3, [r4, #0]
 80018e0:	2b2e      	cmp	r3, #46	; 0x2e
 80018e2:	d10c      	bne.n	80018fe <_vfiprintf_r+0x176>
 80018e4:	7863      	ldrb	r3, [r4, #1]
 80018e6:	2b2a      	cmp	r3, #42	; 0x2a
 80018e8:	d135      	bne.n	8001956 <_vfiprintf_r+0x1ce>
 80018ea:	9b03      	ldr	r3, [sp, #12]
 80018ec:	1d1a      	adds	r2, r3, #4
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	9203      	str	r2, [sp, #12]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	bfb8      	it	lt
 80018f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80018fa:	3402      	adds	r4, #2
 80018fc:	9305      	str	r3, [sp, #20]
 80018fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80019e4 <_vfiprintf_r+0x25c>
 8001902:	7821      	ldrb	r1, [r4, #0]
 8001904:	2203      	movs	r2, #3
 8001906:	4650      	mov	r0, sl
 8001908:	f7fe fc8a 	bl	8000220 <memchr>
 800190c:	b140      	cbz	r0, 8001920 <_vfiprintf_r+0x198>
 800190e:	2340      	movs	r3, #64	; 0x40
 8001910:	eba0 000a 	sub.w	r0, r0, sl
 8001914:	fa03 f000 	lsl.w	r0, r3, r0
 8001918:	9b04      	ldr	r3, [sp, #16]
 800191a:	4303      	orrs	r3, r0
 800191c:	3401      	adds	r4, #1
 800191e:	9304      	str	r3, [sp, #16]
 8001920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001924:	482c      	ldr	r0, [pc, #176]	; (80019d8 <_vfiprintf_r+0x250>)
 8001926:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800192a:	2206      	movs	r2, #6
 800192c:	f7fe fc78 	bl	8000220 <memchr>
 8001930:	2800      	cmp	r0, #0
 8001932:	d03f      	beq.n	80019b4 <_vfiprintf_r+0x22c>
 8001934:	4b29      	ldr	r3, [pc, #164]	; (80019dc <_vfiprintf_r+0x254>)
 8001936:	bb1b      	cbnz	r3, 8001980 <_vfiprintf_r+0x1f8>
 8001938:	9b03      	ldr	r3, [sp, #12]
 800193a:	3307      	adds	r3, #7
 800193c:	f023 0307 	bic.w	r3, r3, #7
 8001940:	3308      	adds	r3, #8
 8001942:	9303      	str	r3, [sp, #12]
 8001944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001946:	443b      	add	r3, r7
 8001948:	9309      	str	r3, [sp, #36]	; 0x24
 800194a:	e767      	b.n	800181c <_vfiprintf_r+0x94>
 800194c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001950:	460c      	mov	r4, r1
 8001952:	2001      	movs	r0, #1
 8001954:	e7a5      	b.n	80018a2 <_vfiprintf_r+0x11a>
 8001956:	2300      	movs	r3, #0
 8001958:	3401      	adds	r4, #1
 800195a:	9305      	str	r3, [sp, #20]
 800195c:	4619      	mov	r1, r3
 800195e:	f04f 0c0a 	mov.w	ip, #10
 8001962:	4620      	mov	r0, r4
 8001964:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001968:	3a30      	subs	r2, #48	; 0x30
 800196a:	2a09      	cmp	r2, #9
 800196c:	d903      	bls.n	8001976 <_vfiprintf_r+0x1ee>
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0c5      	beq.n	80018fe <_vfiprintf_r+0x176>
 8001972:	9105      	str	r1, [sp, #20]
 8001974:	e7c3      	b.n	80018fe <_vfiprintf_r+0x176>
 8001976:	fb0c 2101 	mla	r1, ip, r1, r2
 800197a:	4604      	mov	r4, r0
 800197c:	2301      	movs	r3, #1
 800197e:	e7f0      	b.n	8001962 <_vfiprintf_r+0x1da>
 8001980:	ab03      	add	r3, sp, #12
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	462a      	mov	r2, r5
 8001986:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <_vfiprintf_r+0x258>)
 8001988:	a904      	add	r1, sp, #16
 800198a:	4630      	mov	r0, r6
 800198c:	f3af 8000 	nop.w
 8001990:	4607      	mov	r7, r0
 8001992:	1c78      	adds	r0, r7, #1
 8001994:	d1d6      	bne.n	8001944 <_vfiprintf_r+0x1bc>
 8001996:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001998:	07d9      	lsls	r1, r3, #31
 800199a:	d405      	bmi.n	80019a8 <_vfiprintf_r+0x220>
 800199c:	89ab      	ldrh	r3, [r5, #12]
 800199e:	059a      	lsls	r2, r3, #22
 80019a0:	d402      	bmi.n	80019a8 <_vfiprintf_r+0x220>
 80019a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80019a4:	f7ff fe31 	bl	800160a <__retarget_lock_release_recursive>
 80019a8:	89ab      	ldrh	r3, [r5, #12]
 80019aa:	065b      	lsls	r3, r3, #25
 80019ac:	f53f af12 	bmi.w	80017d4 <_vfiprintf_r+0x4c>
 80019b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80019b2:	e711      	b.n	80017d8 <_vfiprintf_r+0x50>
 80019b4:	ab03      	add	r3, sp, #12
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	462a      	mov	r2, r5
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <_vfiprintf_r+0x258>)
 80019bc:	a904      	add	r1, sp, #16
 80019be:	4630      	mov	r0, r6
 80019c0:	f000 f880 	bl	8001ac4 <_printf_i>
 80019c4:	e7e4      	b.n	8001990 <_vfiprintf_r+0x208>
 80019c6:	bf00      	nop
 80019c8:	08002390 	.word	0x08002390
 80019cc:	080023b0 	.word	0x080023b0
 80019d0:	08002370 	.word	0x08002370
 80019d4:	080023d0 	.word	0x080023d0
 80019d8:	080023da 	.word	0x080023da
 80019dc:	00000000 	.word	0x00000000
 80019e0:	08001763 	.word	0x08001763
 80019e4:	080023d6 	.word	0x080023d6

080019e8 <_printf_common>:
 80019e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019ec:	4616      	mov	r6, r2
 80019ee:	4699      	mov	r9, r3
 80019f0:	688a      	ldr	r2, [r1, #8]
 80019f2:	690b      	ldr	r3, [r1, #16]
 80019f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80019f8:	4293      	cmp	r3, r2
 80019fa:	bfb8      	it	lt
 80019fc:	4613      	movlt	r3, r2
 80019fe:	6033      	str	r3, [r6, #0]
 8001a00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001a04:	4607      	mov	r7, r0
 8001a06:	460c      	mov	r4, r1
 8001a08:	b10a      	cbz	r2, 8001a0e <_printf_common+0x26>
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	6033      	str	r3, [r6, #0]
 8001a0e:	6823      	ldr	r3, [r4, #0]
 8001a10:	0699      	lsls	r1, r3, #26
 8001a12:	bf42      	ittt	mi
 8001a14:	6833      	ldrmi	r3, [r6, #0]
 8001a16:	3302      	addmi	r3, #2
 8001a18:	6033      	strmi	r3, [r6, #0]
 8001a1a:	6825      	ldr	r5, [r4, #0]
 8001a1c:	f015 0506 	ands.w	r5, r5, #6
 8001a20:	d106      	bne.n	8001a30 <_printf_common+0x48>
 8001a22:	f104 0a19 	add.w	sl, r4, #25
 8001a26:	68e3      	ldr	r3, [r4, #12]
 8001a28:	6832      	ldr	r2, [r6, #0]
 8001a2a:	1a9b      	subs	r3, r3, r2
 8001a2c:	42ab      	cmp	r3, r5
 8001a2e:	dc26      	bgt.n	8001a7e <_printf_common+0x96>
 8001a30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001a34:	1e13      	subs	r3, r2, #0
 8001a36:	6822      	ldr	r2, [r4, #0]
 8001a38:	bf18      	it	ne
 8001a3a:	2301      	movne	r3, #1
 8001a3c:	0692      	lsls	r2, r2, #26
 8001a3e:	d42b      	bmi.n	8001a98 <_printf_common+0xb0>
 8001a40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001a44:	4649      	mov	r1, r9
 8001a46:	4638      	mov	r0, r7
 8001a48:	47c0      	blx	r8
 8001a4a:	3001      	adds	r0, #1
 8001a4c:	d01e      	beq.n	8001a8c <_printf_common+0xa4>
 8001a4e:	6823      	ldr	r3, [r4, #0]
 8001a50:	68e5      	ldr	r5, [r4, #12]
 8001a52:	6832      	ldr	r2, [r6, #0]
 8001a54:	f003 0306 	and.w	r3, r3, #6
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	bf08      	it	eq
 8001a5c:	1aad      	subeq	r5, r5, r2
 8001a5e:	68a3      	ldr	r3, [r4, #8]
 8001a60:	6922      	ldr	r2, [r4, #16]
 8001a62:	bf0c      	ite	eq
 8001a64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001a68:	2500      	movne	r5, #0
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	bfc4      	itt	gt
 8001a6e:	1a9b      	subgt	r3, r3, r2
 8001a70:	18ed      	addgt	r5, r5, r3
 8001a72:	2600      	movs	r6, #0
 8001a74:	341a      	adds	r4, #26
 8001a76:	42b5      	cmp	r5, r6
 8001a78:	d11a      	bne.n	8001ab0 <_printf_common+0xc8>
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	e008      	b.n	8001a90 <_printf_common+0xa8>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	4652      	mov	r2, sl
 8001a82:	4649      	mov	r1, r9
 8001a84:	4638      	mov	r0, r7
 8001a86:	47c0      	blx	r8
 8001a88:	3001      	adds	r0, #1
 8001a8a:	d103      	bne.n	8001a94 <_printf_common+0xac>
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a94:	3501      	adds	r5, #1
 8001a96:	e7c6      	b.n	8001a26 <_printf_common+0x3e>
 8001a98:	18e1      	adds	r1, r4, r3
 8001a9a:	1c5a      	adds	r2, r3, #1
 8001a9c:	2030      	movs	r0, #48	; 0x30
 8001a9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001aa2:	4422      	add	r2, r4
 8001aa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001aa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001aac:	3302      	adds	r3, #2
 8001aae:	e7c7      	b.n	8001a40 <_printf_common+0x58>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	4622      	mov	r2, r4
 8001ab4:	4649      	mov	r1, r9
 8001ab6:	4638      	mov	r0, r7
 8001ab8:	47c0      	blx	r8
 8001aba:	3001      	adds	r0, #1
 8001abc:	d0e6      	beq.n	8001a8c <_printf_common+0xa4>
 8001abe:	3601      	adds	r6, #1
 8001ac0:	e7d9      	b.n	8001a76 <_printf_common+0x8e>
	...

08001ac4 <_printf_i>:
 8001ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ac8:	7e0f      	ldrb	r7, [r1, #24]
 8001aca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001acc:	2f78      	cmp	r7, #120	; 0x78
 8001ace:	4691      	mov	r9, r2
 8001ad0:	4680      	mov	r8, r0
 8001ad2:	460c      	mov	r4, r1
 8001ad4:	469a      	mov	sl, r3
 8001ad6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001ada:	d807      	bhi.n	8001aec <_printf_i+0x28>
 8001adc:	2f62      	cmp	r7, #98	; 0x62
 8001ade:	d80a      	bhi.n	8001af6 <_printf_i+0x32>
 8001ae0:	2f00      	cmp	r7, #0
 8001ae2:	f000 80d8 	beq.w	8001c96 <_printf_i+0x1d2>
 8001ae6:	2f58      	cmp	r7, #88	; 0x58
 8001ae8:	f000 80a3 	beq.w	8001c32 <_printf_i+0x16e>
 8001aec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001af0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001af4:	e03a      	b.n	8001b6c <_printf_i+0xa8>
 8001af6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001afa:	2b15      	cmp	r3, #21
 8001afc:	d8f6      	bhi.n	8001aec <_printf_i+0x28>
 8001afe:	a101      	add	r1, pc, #4	; (adr r1, 8001b04 <_printf_i+0x40>)
 8001b00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001b04:	08001b5d 	.word	0x08001b5d
 8001b08:	08001b71 	.word	0x08001b71
 8001b0c:	08001aed 	.word	0x08001aed
 8001b10:	08001aed 	.word	0x08001aed
 8001b14:	08001aed 	.word	0x08001aed
 8001b18:	08001aed 	.word	0x08001aed
 8001b1c:	08001b71 	.word	0x08001b71
 8001b20:	08001aed 	.word	0x08001aed
 8001b24:	08001aed 	.word	0x08001aed
 8001b28:	08001aed 	.word	0x08001aed
 8001b2c:	08001aed 	.word	0x08001aed
 8001b30:	08001c7d 	.word	0x08001c7d
 8001b34:	08001ba1 	.word	0x08001ba1
 8001b38:	08001c5f 	.word	0x08001c5f
 8001b3c:	08001aed 	.word	0x08001aed
 8001b40:	08001aed 	.word	0x08001aed
 8001b44:	08001c9f 	.word	0x08001c9f
 8001b48:	08001aed 	.word	0x08001aed
 8001b4c:	08001ba1 	.word	0x08001ba1
 8001b50:	08001aed 	.word	0x08001aed
 8001b54:	08001aed 	.word	0x08001aed
 8001b58:	08001c67 	.word	0x08001c67
 8001b5c:	682b      	ldr	r3, [r5, #0]
 8001b5e:	1d1a      	adds	r2, r3, #4
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	602a      	str	r2, [r5, #0]
 8001b64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0a3      	b.n	8001cb8 <_printf_i+0x1f4>
 8001b70:	6820      	ldr	r0, [r4, #0]
 8001b72:	6829      	ldr	r1, [r5, #0]
 8001b74:	0606      	lsls	r6, r0, #24
 8001b76:	f101 0304 	add.w	r3, r1, #4
 8001b7a:	d50a      	bpl.n	8001b92 <_printf_i+0xce>
 8001b7c:	680e      	ldr	r6, [r1, #0]
 8001b7e:	602b      	str	r3, [r5, #0]
 8001b80:	2e00      	cmp	r6, #0
 8001b82:	da03      	bge.n	8001b8c <_printf_i+0xc8>
 8001b84:	232d      	movs	r3, #45	; 0x2d
 8001b86:	4276      	negs	r6, r6
 8001b88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b8c:	485e      	ldr	r0, [pc, #376]	; (8001d08 <_printf_i+0x244>)
 8001b8e:	230a      	movs	r3, #10
 8001b90:	e019      	b.n	8001bc6 <_printf_i+0x102>
 8001b92:	680e      	ldr	r6, [r1, #0]
 8001b94:	602b      	str	r3, [r5, #0]
 8001b96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001b9a:	bf18      	it	ne
 8001b9c:	b236      	sxthne	r6, r6
 8001b9e:	e7ef      	b.n	8001b80 <_printf_i+0xbc>
 8001ba0:	682b      	ldr	r3, [r5, #0]
 8001ba2:	6820      	ldr	r0, [r4, #0]
 8001ba4:	1d19      	adds	r1, r3, #4
 8001ba6:	6029      	str	r1, [r5, #0]
 8001ba8:	0601      	lsls	r1, r0, #24
 8001baa:	d501      	bpl.n	8001bb0 <_printf_i+0xec>
 8001bac:	681e      	ldr	r6, [r3, #0]
 8001bae:	e002      	b.n	8001bb6 <_printf_i+0xf2>
 8001bb0:	0646      	lsls	r6, r0, #25
 8001bb2:	d5fb      	bpl.n	8001bac <_printf_i+0xe8>
 8001bb4:	881e      	ldrh	r6, [r3, #0]
 8001bb6:	4854      	ldr	r0, [pc, #336]	; (8001d08 <_printf_i+0x244>)
 8001bb8:	2f6f      	cmp	r7, #111	; 0x6f
 8001bba:	bf0c      	ite	eq
 8001bbc:	2308      	moveq	r3, #8
 8001bbe:	230a      	movne	r3, #10
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001bc6:	6865      	ldr	r5, [r4, #4]
 8001bc8:	60a5      	str	r5, [r4, #8]
 8001bca:	2d00      	cmp	r5, #0
 8001bcc:	bfa2      	ittt	ge
 8001bce:	6821      	ldrge	r1, [r4, #0]
 8001bd0:	f021 0104 	bicge.w	r1, r1, #4
 8001bd4:	6021      	strge	r1, [r4, #0]
 8001bd6:	b90e      	cbnz	r6, 8001bdc <_printf_i+0x118>
 8001bd8:	2d00      	cmp	r5, #0
 8001bda:	d04d      	beq.n	8001c78 <_printf_i+0x1b4>
 8001bdc:	4615      	mov	r5, r2
 8001bde:	fbb6 f1f3 	udiv	r1, r6, r3
 8001be2:	fb03 6711 	mls	r7, r3, r1, r6
 8001be6:	5dc7      	ldrb	r7, [r0, r7]
 8001be8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001bec:	4637      	mov	r7, r6
 8001bee:	42bb      	cmp	r3, r7
 8001bf0:	460e      	mov	r6, r1
 8001bf2:	d9f4      	bls.n	8001bde <_printf_i+0x11a>
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d10b      	bne.n	8001c10 <_printf_i+0x14c>
 8001bf8:	6823      	ldr	r3, [r4, #0]
 8001bfa:	07de      	lsls	r6, r3, #31
 8001bfc:	d508      	bpl.n	8001c10 <_printf_i+0x14c>
 8001bfe:	6923      	ldr	r3, [r4, #16]
 8001c00:	6861      	ldr	r1, [r4, #4]
 8001c02:	4299      	cmp	r1, r3
 8001c04:	bfde      	ittt	le
 8001c06:	2330      	movle	r3, #48	; 0x30
 8001c08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001c0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001c10:	1b52      	subs	r2, r2, r5
 8001c12:	6122      	str	r2, [r4, #16]
 8001c14:	f8cd a000 	str.w	sl, [sp]
 8001c18:	464b      	mov	r3, r9
 8001c1a:	aa03      	add	r2, sp, #12
 8001c1c:	4621      	mov	r1, r4
 8001c1e:	4640      	mov	r0, r8
 8001c20:	f7ff fee2 	bl	80019e8 <_printf_common>
 8001c24:	3001      	adds	r0, #1
 8001c26:	d14c      	bne.n	8001cc2 <_printf_i+0x1fe>
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295
 8001c2c:	b004      	add	sp, #16
 8001c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c32:	4835      	ldr	r0, [pc, #212]	; (8001d08 <_printf_i+0x244>)
 8001c34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001c38:	6829      	ldr	r1, [r5, #0]
 8001c3a:	6823      	ldr	r3, [r4, #0]
 8001c3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8001c40:	6029      	str	r1, [r5, #0]
 8001c42:	061d      	lsls	r5, r3, #24
 8001c44:	d514      	bpl.n	8001c70 <_printf_i+0x1ac>
 8001c46:	07df      	lsls	r7, r3, #31
 8001c48:	bf44      	itt	mi
 8001c4a:	f043 0320 	orrmi.w	r3, r3, #32
 8001c4e:	6023      	strmi	r3, [r4, #0]
 8001c50:	b91e      	cbnz	r6, 8001c5a <_printf_i+0x196>
 8001c52:	6823      	ldr	r3, [r4, #0]
 8001c54:	f023 0320 	bic.w	r3, r3, #32
 8001c58:	6023      	str	r3, [r4, #0]
 8001c5a:	2310      	movs	r3, #16
 8001c5c:	e7b0      	b.n	8001bc0 <_printf_i+0xfc>
 8001c5e:	6823      	ldr	r3, [r4, #0]
 8001c60:	f043 0320 	orr.w	r3, r3, #32
 8001c64:	6023      	str	r3, [r4, #0]
 8001c66:	2378      	movs	r3, #120	; 0x78
 8001c68:	4828      	ldr	r0, [pc, #160]	; (8001d0c <_printf_i+0x248>)
 8001c6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001c6e:	e7e3      	b.n	8001c38 <_printf_i+0x174>
 8001c70:	0659      	lsls	r1, r3, #25
 8001c72:	bf48      	it	mi
 8001c74:	b2b6      	uxthmi	r6, r6
 8001c76:	e7e6      	b.n	8001c46 <_printf_i+0x182>
 8001c78:	4615      	mov	r5, r2
 8001c7a:	e7bb      	b.n	8001bf4 <_printf_i+0x130>
 8001c7c:	682b      	ldr	r3, [r5, #0]
 8001c7e:	6826      	ldr	r6, [r4, #0]
 8001c80:	6961      	ldr	r1, [r4, #20]
 8001c82:	1d18      	adds	r0, r3, #4
 8001c84:	6028      	str	r0, [r5, #0]
 8001c86:	0635      	lsls	r5, r6, #24
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	d501      	bpl.n	8001c90 <_printf_i+0x1cc>
 8001c8c:	6019      	str	r1, [r3, #0]
 8001c8e:	e002      	b.n	8001c96 <_printf_i+0x1d2>
 8001c90:	0670      	lsls	r0, r6, #25
 8001c92:	d5fb      	bpl.n	8001c8c <_printf_i+0x1c8>
 8001c94:	8019      	strh	r1, [r3, #0]
 8001c96:	2300      	movs	r3, #0
 8001c98:	6123      	str	r3, [r4, #16]
 8001c9a:	4615      	mov	r5, r2
 8001c9c:	e7ba      	b.n	8001c14 <_printf_i+0x150>
 8001c9e:	682b      	ldr	r3, [r5, #0]
 8001ca0:	1d1a      	adds	r2, r3, #4
 8001ca2:	602a      	str	r2, [r5, #0]
 8001ca4:	681d      	ldr	r5, [r3, #0]
 8001ca6:	6862      	ldr	r2, [r4, #4]
 8001ca8:	2100      	movs	r1, #0
 8001caa:	4628      	mov	r0, r5
 8001cac:	f7fe fab8 	bl	8000220 <memchr>
 8001cb0:	b108      	cbz	r0, 8001cb6 <_printf_i+0x1f2>
 8001cb2:	1b40      	subs	r0, r0, r5
 8001cb4:	6060      	str	r0, [r4, #4]
 8001cb6:	6863      	ldr	r3, [r4, #4]
 8001cb8:	6123      	str	r3, [r4, #16]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001cc0:	e7a8      	b.n	8001c14 <_printf_i+0x150>
 8001cc2:	6923      	ldr	r3, [r4, #16]
 8001cc4:	462a      	mov	r2, r5
 8001cc6:	4649      	mov	r1, r9
 8001cc8:	4640      	mov	r0, r8
 8001cca:	47d0      	blx	sl
 8001ccc:	3001      	adds	r0, #1
 8001cce:	d0ab      	beq.n	8001c28 <_printf_i+0x164>
 8001cd0:	6823      	ldr	r3, [r4, #0]
 8001cd2:	079b      	lsls	r3, r3, #30
 8001cd4:	d413      	bmi.n	8001cfe <_printf_i+0x23a>
 8001cd6:	68e0      	ldr	r0, [r4, #12]
 8001cd8:	9b03      	ldr	r3, [sp, #12]
 8001cda:	4298      	cmp	r0, r3
 8001cdc:	bfb8      	it	lt
 8001cde:	4618      	movlt	r0, r3
 8001ce0:	e7a4      	b.n	8001c2c <_printf_i+0x168>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	4632      	mov	r2, r6
 8001ce6:	4649      	mov	r1, r9
 8001ce8:	4640      	mov	r0, r8
 8001cea:	47d0      	blx	sl
 8001cec:	3001      	adds	r0, #1
 8001cee:	d09b      	beq.n	8001c28 <_printf_i+0x164>
 8001cf0:	3501      	adds	r5, #1
 8001cf2:	68e3      	ldr	r3, [r4, #12]
 8001cf4:	9903      	ldr	r1, [sp, #12]
 8001cf6:	1a5b      	subs	r3, r3, r1
 8001cf8:	42ab      	cmp	r3, r5
 8001cfa:	dcf2      	bgt.n	8001ce2 <_printf_i+0x21e>
 8001cfc:	e7eb      	b.n	8001cd6 <_printf_i+0x212>
 8001cfe:	2500      	movs	r5, #0
 8001d00:	f104 0619 	add.w	r6, r4, #25
 8001d04:	e7f5      	b.n	8001cf2 <_printf_i+0x22e>
 8001d06:	bf00      	nop
 8001d08:	080023e1 	.word	0x080023e1
 8001d0c:	080023f2 	.word	0x080023f2

08001d10 <_sbrk_r>:
 8001d10:	b538      	push	{r3, r4, r5, lr}
 8001d12:	4d06      	ldr	r5, [pc, #24]	; (8001d2c <_sbrk_r+0x1c>)
 8001d14:	2300      	movs	r3, #0
 8001d16:	4604      	mov	r4, r0
 8001d18:	4608      	mov	r0, r1
 8001d1a:	602b      	str	r3, [r5, #0]
 8001d1c:	f7ff fad4 	bl	80012c8 <_sbrk>
 8001d20:	1c43      	adds	r3, r0, #1
 8001d22:	d102      	bne.n	8001d2a <_sbrk_r+0x1a>
 8001d24:	682b      	ldr	r3, [r5, #0]
 8001d26:	b103      	cbz	r3, 8001d2a <_sbrk_r+0x1a>
 8001d28:	6023      	str	r3, [r4, #0]
 8001d2a:	bd38      	pop	{r3, r4, r5, pc}
 8001d2c:	20000090 	.word	0x20000090

08001d30 <__sread>:
 8001d30:	b510      	push	{r4, lr}
 8001d32:	460c      	mov	r4, r1
 8001d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d38:	f000 fab2 	bl	80022a0 <_read_r>
 8001d3c:	2800      	cmp	r0, #0
 8001d3e:	bfab      	itete	ge
 8001d40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001d42:	89a3      	ldrhlt	r3, [r4, #12]
 8001d44:	181b      	addge	r3, r3, r0
 8001d46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001d4a:	bfac      	ite	ge
 8001d4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8001d4e:	81a3      	strhlt	r3, [r4, #12]
 8001d50:	bd10      	pop	{r4, pc}

08001d52 <__swrite>:
 8001d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d56:	461f      	mov	r7, r3
 8001d58:	898b      	ldrh	r3, [r1, #12]
 8001d5a:	05db      	lsls	r3, r3, #23
 8001d5c:	4605      	mov	r5, r0
 8001d5e:	460c      	mov	r4, r1
 8001d60:	4616      	mov	r6, r2
 8001d62:	d505      	bpl.n	8001d70 <__swrite+0x1e>
 8001d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d68:	2302      	movs	r3, #2
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f000 f9c8 	bl	8002100 <_lseek_r>
 8001d70:	89a3      	ldrh	r3, [r4, #12]
 8001d72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d7a:	81a3      	strh	r3, [r4, #12]
 8001d7c:	4632      	mov	r2, r6
 8001d7e:	463b      	mov	r3, r7
 8001d80:	4628      	mov	r0, r5
 8001d82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d86:	f000 b869 	b.w	8001e5c <_write_r>

08001d8a <__sseek>:
 8001d8a:	b510      	push	{r4, lr}
 8001d8c:	460c      	mov	r4, r1
 8001d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d92:	f000 f9b5 	bl	8002100 <_lseek_r>
 8001d96:	1c43      	adds	r3, r0, #1
 8001d98:	89a3      	ldrh	r3, [r4, #12]
 8001d9a:	bf15      	itete	ne
 8001d9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8001d9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001da2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001da6:	81a3      	strheq	r3, [r4, #12]
 8001da8:	bf18      	it	ne
 8001daa:	81a3      	strhne	r3, [r4, #12]
 8001dac:	bd10      	pop	{r4, pc}

08001dae <__sclose>:
 8001dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001db2:	f000 b8d3 	b.w	8001f5c <_close_r>
	...

08001db8 <__swbuf_r>:
 8001db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dba:	460e      	mov	r6, r1
 8001dbc:	4614      	mov	r4, r2
 8001dbe:	4605      	mov	r5, r0
 8001dc0:	b118      	cbz	r0, 8001dca <__swbuf_r+0x12>
 8001dc2:	6983      	ldr	r3, [r0, #24]
 8001dc4:	b90b      	cbnz	r3, 8001dca <__swbuf_r+0x12>
 8001dc6:	f7ff fb81 	bl	80014cc <__sinit>
 8001dca:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <__swbuf_r+0x98>)
 8001dcc:	429c      	cmp	r4, r3
 8001dce:	d12b      	bne.n	8001e28 <__swbuf_r+0x70>
 8001dd0:	686c      	ldr	r4, [r5, #4]
 8001dd2:	69a3      	ldr	r3, [r4, #24]
 8001dd4:	60a3      	str	r3, [r4, #8]
 8001dd6:	89a3      	ldrh	r3, [r4, #12]
 8001dd8:	071a      	lsls	r2, r3, #28
 8001dda:	d52f      	bpl.n	8001e3c <__swbuf_r+0x84>
 8001ddc:	6923      	ldr	r3, [r4, #16]
 8001dde:	b36b      	cbz	r3, 8001e3c <__swbuf_r+0x84>
 8001de0:	6923      	ldr	r3, [r4, #16]
 8001de2:	6820      	ldr	r0, [r4, #0]
 8001de4:	1ac0      	subs	r0, r0, r3
 8001de6:	6963      	ldr	r3, [r4, #20]
 8001de8:	b2f6      	uxtb	r6, r6
 8001dea:	4283      	cmp	r3, r0
 8001dec:	4637      	mov	r7, r6
 8001dee:	dc04      	bgt.n	8001dfa <__swbuf_r+0x42>
 8001df0:	4621      	mov	r1, r4
 8001df2:	4628      	mov	r0, r5
 8001df4:	f000 f948 	bl	8002088 <_fflush_r>
 8001df8:	bb30      	cbnz	r0, 8001e48 <__swbuf_r+0x90>
 8001dfa:	68a3      	ldr	r3, [r4, #8]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	60a3      	str	r3, [r4, #8]
 8001e00:	6823      	ldr	r3, [r4, #0]
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	6022      	str	r2, [r4, #0]
 8001e06:	701e      	strb	r6, [r3, #0]
 8001e08:	6963      	ldr	r3, [r4, #20]
 8001e0a:	3001      	adds	r0, #1
 8001e0c:	4283      	cmp	r3, r0
 8001e0e:	d004      	beq.n	8001e1a <__swbuf_r+0x62>
 8001e10:	89a3      	ldrh	r3, [r4, #12]
 8001e12:	07db      	lsls	r3, r3, #31
 8001e14:	d506      	bpl.n	8001e24 <__swbuf_r+0x6c>
 8001e16:	2e0a      	cmp	r6, #10
 8001e18:	d104      	bne.n	8001e24 <__swbuf_r+0x6c>
 8001e1a:	4621      	mov	r1, r4
 8001e1c:	4628      	mov	r0, r5
 8001e1e:	f000 f933 	bl	8002088 <_fflush_r>
 8001e22:	b988      	cbnz	r0, 8001e48 <__swbuf_r+0x90>
 8001e24:	4638      	mov	r0, r7
 8001e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e28:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <__swbuf_r+0x9c>)
 8001e2a:	429c      	cmp	r4, r3
 8001e2c:	d101      	bne.n	8001e32 <__swbuf_r+0x7a>
 8001e2e:	68ac      	ldr	r4, [r5, #8]
 8001e30:	e7cf      	b.n	8001dd2 <__swbuf_r+0x1a>
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <__swbuf_r+0xa0>)
 8001e34:	429c      	cmp	r4, r3
 8001e36:	bf08      	it	eq
 8001e38:	68ec      	ldreq	r4, [r5, #12]
 8001e3a:	e7ca      	b.n	8001dd2 <__swbuf_r+0x1a>
 8001e3c:	4621      	mov	r1, r4
 8001e3e:	4628      	mov	r0, r5
 8001e40:	f000 f81e 	bl	8001e80 <__swsetup_r>
 8001e44:	2800      	cmp	r0, #0
 8001e46:	d0cb      	beq.n	8001de0 <__swbuf_r+0x28>
 8001e48:	f04f 37ff 	mov.w	r7, #4294967295
 8001e4c:	e7ea      	b.n	8001e24 <__swbuf_r+0x6c>
 8001e4e:	bf00      	nop
 8001e50:	08002390 	.word	0x08002390
 8001e54:	080023b0 	.word	0x080023b0
 8001e58:	08002370 	.word	0x08002370

08001e5c <_write_r>:
 8001e5c:	b538      	push	{r3, r4, r5, lr}
 8001e5e:	4d07      	ldr	r5, [pc, #28]	; (8001e7c <_write_r+0x20>)
 8001e60:	4604      	mov	r4, r0
 8001e62:	4608      	mov	r0, r1
 8001e64:	4611      	mov	r1, r2
 8001e66:	2200      	movs	r2, #0
 8001e68:	602a      	str	r2, [r5, #0]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f7ff f9db 	bl	8001226 <_write>
 8001e70:	1c43      	adds	r3, r0, #1
 8001e72:	d102      	bne.n	8001e7a <_write_r+0x1e>
 8001e74:	682b      	ldr	r3, [r5, #0]
 8001e76:	b103      	cbz	r3, 8001e7a <_write_r+0x1e>
 8001e78:	6023      	str	r3, [r4, #0]
 8001e7a:	bd38      	pop	{r3, r4, r5, pc}
 8001e7c:	20000090 	.word	0x20000090

08001e80 <__swsetup_r>:
 8001e80:	4b32      	ldr	r3, [pc, #200]	; (8001f4c <__swsetup_r+0xcc>)
 8001e82:	b570      	push	{r4, r5, r6, lr}
 8001e84:	681d      	ldr	r5, [r3, #0]
 8001e86:	4606      	mov	r6, r0
 8001e88:	460c      	mov	r4, r1
 8001e8a:	b125      	cbz	r5, 8001e96 <__swsetup_r+0x16>
 8001e8c:	69ab      	ldr	r3, [r5, #24]
 8001e8e:	b913      	cbnz	r3, 8001e96 <__swsetup_r+0x16>
 8001e90:	4628      	mov	r0, r5
 8001e92:	f7ff fb1b 	bl	80014cc <__sinit>
 8001e96:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <__swsetup_r+0xd0>)
 8001e98:	429c      	cmp	r4, r3
 8001e9a:	d10f      	bne.n	8001ebc <__swsetup_r+0x3c>
 8001e9c:	686c      	ldr	r4, [r5, #4]
 8001e9e:	89a3      	ldrh	r3, [r4, #12]
 8001ea0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001ea4:	0719      	lsls	r1, r3, #28
 8001ea6:	d42c      	bmi.n	8001f02 <__swsetup_r+0x82>
 8001ea8:	06dd      	lsls	r5, r3, #27
 8001eaa:	d411      	bmi.n	8001ed0 <__swsetup_r+0x50>
 8001eac:	2309      	movs	r3, #9
 8001eae:	6033      	str	r3, [r6, #0]
 8001eb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001eb4:	81a3      	strh	r3, [r4, #12]
 8001eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8001eba:	e03e      	b.n	8001f3a <__swsetup_r+0xba>
 8001ebc:	4b25      	ldr	r3, [pc, #148]	; (8001f54 <__swsetup_r+0xd4>)
 8001ebe:	429c      	cmp	r4, r3
 8001ec0:	d101      	bne.n	8001ec6 <__swsetup_r+0x46>
 8001ec2:	68ac      	ldr	r4, [r5, #8]
 8001ec4:	e7eb      	b.n	8001e9e <__swsetup_r+0x1e>
 8001ec6:	4b24      	ldr	r3, [pc, #144]	; (8001f58 <__swsetup_r+0xd8>)
 8001ec8:	429c      	cmp	r4, r3
 8001eca:	bf08      	it	eq
 8001ecc:	68ec      	ldreq	r4, [r5, #12]
 8001ece:	e7e6      	b.n	8001e9e <__swsetup_r+0x1e>
 8001ed0:	0758      	lsls	r0, r3, #29
 8001ed2:	d512      	bpl.n	8001efa <__swsetup_r+0x7a>
 8001ed4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ed6:	b141      	cbz	r1, 8001eea <__swsetup_r+0x6a>
 8001ed8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001edc:	4299      	cmp	r1, r3
 8001ede:	d002      	beq.n	8001ee6 <__swsetup_r+0x66>
 8001ee0:	4630      	mov	r0, r6
 8001ee2:	f000 f991 	bl	8002208 <_free_r>
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	6363      	str	r3, [r4, #52]	; 0x34
 8001eea:	89a3      	ldrh	r3, [r4, #12]
 8001eec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001ef0:	81a3      	strh	r3, [r4, #12]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	6063      	str	r3, [r4, #4]
 8001ef6:	6923      	ldr	r3, [r4, #16]
 8001ef8:	6023      	str	r3, [r4, #0]
 8001efa:	89a3      	ldrh	r3, [r4, #12]
 8001efc:	f043 0308 	orr.w	r3, r3, #8
 8001f00:	81a3      	strh	r3, [r4, #12]
 8001f02:	6923      	ldr	r3, [r4, #16]
 8001f04:	b94b      	cbnz	r3, 8001f1a <__swsetup_r+0x9a>
 8001f06:	89a3      	ldrh	r3, [r4, #12]
 8001f08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f10:	d003      	beq.n	8001f1a <__swsetup_r+0x9a>
 8001f12:	4621      	mov	r1, r4
 8001f14:	4630      	mov	r0, r6
 8001f16:	f000 f92b 	bl	8002170 <__smakebuf_r>
 8001f1a:	89a0      	ldrh	r0, [r4, #12]
 8001f1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001f20:	f010 0301 	ands.w	r3, r0, #1
 8001f24:	d00a      	beq.n	8001f3c <__swsetup_r+0xbc>
 8001f26:	2300      	movs	r3, #0
 8001f28:	60a3      	str	r3, [r4, #8]
 8001f2a:	6963      	ldr	r3, [r4, #20]
 8001f2c:	425b      	negs	r3, r3
 8001f2e:	61a3      	str	r3, [r4, #24]
 8001f30:	6923      	ldr	r3, [r4, #16]
 8001f32:	b943      	cbnz	r3, 8001f46 <__swsetup_r+0xc6>
 8001f34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001f38:	d1ba      	bne.n	8001eb0 <__swsetup_r+0x30>
 8001f3a:	bd70      	pop	{r4, r5, r6, pc}
 8001f3c:	0781      	lsls	r1, r0, #30
 8001f3e:	bf58      	it	pl
 8001f40:	6963      	ldrpl	r3, [r4, #20]
 8001f42:	60a3      	str	r3, [r4, #8]
 8001f44:	e7f4      	b.n	8001f30 <__swsetup_r+0xb0>
 8001f46:	2000      	movs	r0, #0
 8001f48:	e7f7      	b.n	8001f3a <__swsetup_r+0xba>
 8001f4a:	bf00      	nop
 8001f4c:	20000000 	.word	0x20000000
 8001f50:	08002390 	.word	0x08002390
 8001f54:	080023b0 	.word	0x080023b0
 8001f58:	08002370 	.word	0x08002370

08001f5c <_close_r>:
 8001f5c:	b538      	push	{r3, r4, r5, lr}
 8001f5e:	4d06      	ldr	r5, [pc, #24]	; (8001f78 <_close_r+0x1c>)
 8001f60:	2300      	movs	r3, #0
 8001f62:	4604      	mov	r4, r0
 8001f64:	4608      	mov	r0, r1
 8001f66:	602b      	str	r3, [r5, #0]
 8001f68:	f7ff f979 	bl	800125e <_close>
 8001f6c:	1c43      	adds	r3, r0, #1
 8001f6e:	d102      	bne.n	8001f76 <_close_r+0x1a>
 8001f70:	682b      	ldr	r3, [r5, #0]
 8001f72:	b103      	cbz	r3, 8001f76 <_close_r+0x1a>
 8001f74:	6023      	str	r3, [r4, #0]
 8001f76:	bd38      	pop	{r3, r4, r5, pc}
 8001f78:	20000090 	.word	0x20000090

08001f7c <__sflush_r>:
 8001f7c:	898a      	ldrh	r2, [r1, #12]
 8001f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f82:	4605      	mov	r5, r0
 8001f84:	0710      	lsls	r0, r2, #28
 8001f86:	460c      	mov	r4, r1
 8001f88:	d458      	bmi.n	800203c <__sflush_r+0xc0>
 8001f8a:	684b      	ldr	r3, [r1, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	dc05      	bgt.n	8001f9c <__sflush_r+0x20>
 8001f90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	dc02      	bgt.n	8001f9c <__sflush_r+0x20>
 8001f96:	2000      	movs	r0, #0
 8001f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f9e:	2e00      	cmp	r6, #0
 8001fa0:	d0f9      	beq.n	8001f96 <__sflush_r+0x1a>
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001fa8:	682f      	ldr	r7, [r5, #0]
 8001faa:	602b      	str	r3, [r5, #0]
 8001fac:	d032      	beq.n	8002014 <__sflush_r+0x98>
 8001fae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001fb0:	89a3      	ldrh	r3, [r4, #12]
 8001fb2:	075a      	lsls	r2, r3, #29
 8001fb4:	d505      	bpl.n	8001fc2 <__sflush_r+0x46>
 8001fb6:	6863      	ldr	r3, [r4, #4]
 8001fb8:	1ac0      	subs	r0, r0, r3
 8001fba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001fbc:	b10b      	cbz	r3, 8001fc2 <__sflush_r+0x46>
 8001fbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fc0:	1ac0      	subs	r0, r0, r3
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001fc8:	6a21      	ldr	r1, [r4, #32]
 8001fca:	4628      	mov	r0, r5
 8001fcc:	47b0      	blx	r6
 8001fce:	1c43      	adds	r3, r0, #1
 8001fd0:	89a3      	ldrh	r3, [r4, #12]
 8001fd2:	d106      	bne.n	8001fe2 <__sflush_r+0x66>
 8001fd4:	6829      	ldr	r1, [r5, #0]
 8001fd6:	291d      	cmp	r1, #29
 8001fd8:	d82c      	bhi.n	8002034 <__sflush_r+0xb8>
 8001fda:	4a2a      	ldr	r2, [pc, #168]	; (8002084 <__sflush_r+0x108>)
 8001fdc:	40ca      	lsrs	r2, r1
 8001fde:	07d6      	lsls	r6, r2, #31
 8001fe0:	d528      	bpl.n	8002034 <__sflush_r+0xb8>
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	6062      	str	r2, [r4, #4]
 8001fe6:	04d9      	lsls	r1, r3, #19
 8001fe8:	6922      	ldr	r2, [r4, #16]
 8001fea:	6022      	str	r2, [r4, #0]
 8001fec:	d504      	bpl.n	8001ff8 <__sflush_r+0x7c>
 8001fee:	1c42      	adds	r2, r0, #1
 8001ff0:	d101      	bne.n	8001ff6 <__sflush_r+0x7a>
 8001ff2:	682b      	ldr	r3, [r5, #0]
 8001ff4:	b903      	cbnz	r3, 8001ff8 <__sflush_r+0x7c>
 8001ff6:	6560      	str	r0, [r4, #84]	; 0x54
 8001ff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ffa:	602f      	str	r7, [r5, #0]
 8001ffc:	2900      	cmp	r1, #0
 8001ffe:	d0ca      	beq.n	8001f96 <__sflush_r+0x1a>
 8002000:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002004:	4299      	cmp	r1, r3
 8002006:	d002      	beq.n	800200e <__sflush_r+0x92>
 8002008:	4628      	mov	r0, r5
 800200a:	f000 f8fd 	bl	8002208 <_free_r>
 800200e:	2000      	movs	r0, #0
 8002010:	6360      	str	r0, [r4, #52]	; 0x34
 8002012:	e7c1      	b.n	8001f98 <__sflush_r+0x1c>
 8002014:	6a21      	ldr	r1, [r4, #32]
 8002016:	2301      	movs	r3, #1
 8002018:	4628      	mov	r0, r5
 800201a:	47b0      	blx	r6
 800201c:	1c41      	adds	r1, r0, #1
 800201e:	d1c7      	bne.n	8001fb0 <__sflush_r+0x34>
 8002020:	682b      	ldr	r3, [r5, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0c4      	beq.n	8001fb0 <__sflush_r+0x34>
 8002026:	2b1d      	cmp	r3, #29
 8002028:	d001      	beq.n	800202e <__sflush_r+0xb2>
 800202a:	2b16      	cmp	r3, #22
 800202c:	d101      	bne.n	8002032 <__sflush_r+0xb6>
 800202e:	602f      	str	r7, [r5, #0]
 8002030:	e7b1      	b.n	8001f96 <__sflush_r+0x1a>
 8002032:	89a3      	ldrh	r3, [r4, #12]
 8002034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002038:	81a3      	strh	r3, [r4, #12]
 800203a:	e7ad      	b.n	8001f98 <__sflush_r+0x1c>
 800203c:	690f      	ldr	r7, [r1, #16]
 800203e:	2f00      	cmp	r7, #0
 8002040:	d0a9      	beq.n	8001f96 <__sflush_r+0x1a>
 8002042:	0793      	lsls	r3, r2, #30
 8002044:	680e      	ldr	r6, [r1, #0]
 8002046:	bf08      	it	eq
 8002048:	694b      	ldreq	r3, [r1, #20]
 800204a:	600f      	str	r7, [r1, #0]
 800204c:	bf18      	it	ne
 800204e:	2300      	movne	r3, #0
 8002050:	eba6 0807 	sub.w	r8, r6, r7
 8002054:	608b      	str	r3, [r1, #8]
 8002056:	f1b8 0f00 	cmp.w	r8, #0
 800205a:	dd9c      	ble.n	8001f96 <__sflush_r+0x1a>
 800205c:	6a21      	ldr	r1, [r4, #32]
 800205e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002060:	4643      	mov	r3, r8
 8002062:	463a      	mov	r2, r7
 8002064:	4628      	mov	r0, r5
 8002066:	47b0      	blx	r6
 8002068:	2800      	cmp	r0, #0
 800206a:	dc06      	bgt.n	800207a <__sflush_r+0xfe>
 800206c:	89a3      	ldrh	r3, [r4, #12]
 800206e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002072:	81a3      	strh	r3, [r4, #12]
 8002074:	f04f 30ff 	mov.w	r0, #4294967295
 8002078:	e78e      	b.n	8001f98 <__sflush_r+0x1c>
 800207a:	4407      	add	r7, r0
 800207c:	eba8 0800 	sub.w	r8, r8, r0
 8002080:	e7e9      	b.n	8002056 <__sflush_r+0xda>
 8002082:	bf00      	nop
 8002084:	20400001 	.word	0x20400001

08002088 <_fflush_r>:
 8002088:	b538      	push	{r3, r4, r5, lr}
 800208a:	690b      	ldr	r3, [r1, #16]
 800208c:	4605      	mov	r5, r0
 800208e:	460c      	mov	r4, r1
 8002090:	b913      	cbnz	r3, 8002098 <_fflush_r+0x10>
 8002092:	2500      	movs	r5, #0
 8002094:	4628      	mov	r0, r5
 8002096:	bd38      	pop	{r3, r4, r5, pc}
 8002098:	b118      	cbz	r0, 80020a2 <_fflush_r+0x1a>
 800209a:	6983      	ldr	r3, [r0, #24]
 800209c:	b90b      	cbnz	r3, 80020a2 <_fflush_r+0x1a>
 800209e:	f7ff fa15 	bl	80014cc <__sinit>
 80020a2:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <_fflush_r+0x6c>)
 80020a4:	429c      	cmp	r4, r3
 80020a6:	d11b      	bne.n	80020e0 <_fflush_r+0x58>
 80020a8:	686c      	ldr	r4, [r5, #4]
 80020aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0ef      	beq.n	8002092 <_fflush_r+0xa>
 80020b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80020b4:	07d0      	lsls	r0, r2, #31
 80020b6:	d404      	bmi.n	80020c2 <_fflush_r+0x3a>
 80020b8:	0599      	lsls	r1, r3, #22
 80020ba:	d402      	bmi.n	80020c2 <_fflush_r+0x3a>
 80020bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020be:	f7ff faa3 	bl	8001608 <__retarget_lock_acquire_recursive>
 80020c2:	4628      	mov	r0, r5
 80020c4:	4621      	mov	r1, r4
 80020c6:	f7ff ff59 	bl	8001f7c <__sflush_r>
 80020ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80020cc:	07da      	lsls	r2, r3, #31
 80020ce:	4605      	mov	r5, r0
 80020d0:	d4e0      	bmi.n	8002094 <_fflush_r+0xc>
 80020d2:	89a3      	ldrh	r3, [r4, #12]
 80020d4:	059b      	lsls	r3, r3, #22
 80020d6:	d4dd      	bmi.n	8002094 <_fflush_r+0xc>
 80020d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020da:	f7ff fa96 	bl	800160a <__retarget_lock_release_recursive>
 80020de:	e7d9      	b.n	8002094 <_fflush_r+0xc>
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <_fflush_r+0x70>)
 80020e2:	429c      	cmp	r4, r3
 80020e4:	d101      	bne.n	80020ea <_fflush_r+0x62>
 80020e6:	68ac      	ldr	r4, [r5, #8]
 80020e8:	e7df      	b.n	80020aa <_fflush_r+0x22>
 80020ea:	4b04      	ldr	r3, [pc, #16]	; (80020fc <_fflush_r+0x74>)
 80020ec:	429c      	cmp	r4, r3
 80020ee:	bf08      	it	eq
 80020f0:	68ec      	ldreq	r4, [r5, #12]
 80020f2:	e7da      	b.n	80020aa <_fflush_r+0x22>
 80020f4:	08002390 	.word	0x08002390
 80020f8:	080023b0 	.word	0x080023b0
 80020fc:	08002370 	.word	0x08002370

08002100 <_lseek_r>:
 8002100:	b538      	push	{r3, r4, r5, lr}
 8002102:	4d07      	ldr	r5, [pc, #28]	; (8002120 <_lseek_r+0x20>)
 8002104:	4604      	mov	r4, r0
 8002106:	4608      	mov	r0, r1
 8002108:	4611      	mov	r1, r2
 800210a:	2200      	movs	r2, #0
 800210c:	602a      	str	r2, [r5, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	f7ff f8cc 	bl	80012ac <_lseek>
 8002114:	1c43      	adds	r3, r0, #1
 8002116:	d102      	bne.n	800211e <_lseek_r+0x1e>
 8002118:	682b      	ldr	r3, [r5, #0]
 800211a:	b103      	cbz	r3, 800211e <_lseek_r+0x1e>
 800211c:	6023      	str	r3, [r4, #0]
 800211e:	bd38      	pop	{r3, r4, r5, pc}
 8002120:	20000090 	.word	0x20000090

08002124 <__swhatbuf_r>:
 8002124:	b570      	push	{r4, r5, r6, lr}
 8002126:	460e      	mov	r6, r1
 8002128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800212c:	2900      	cmp	r1, #0
 800212e:	b096      	sub	sp, #88	; 0x58
 8002130:	4614      	mov	r4, r2
 8002132:	461d      	mov	r5, r3
 8002134:	da08      	bge.n	8002148 <__swhatbuf_r+0x24>
 8002136:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	602a      	str	r2, [r5, #0]
 800213e:	061a      	lsls	r2, r3, #24
 8002140:	d410      	bmi.n	8002164 <__swhatbuf_r+0x40>
 8002142:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002146:	e00e      	b.n	8002166 <__swhatbuf_r+0x42>
 8002148:	466a      	mov	r2, sp
 800214a:	f000 f8bb 	bl	80022c4 <_fstat_r>
 800214e:	2800      	cmp	r0, #0
 8002150:	dbf1      	blt.n	8002136 <__swhatbuf_r+0x12>
 8002152:	9a01      	ldr	r2, [sp, #4]
 8002154:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002158:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800215c:	425a      	negs	r2, r3
 800215e:	415a      	adcs	r2, r3
 8002160:	602a      	str	r2, [r5, #0]
 8002162:	e7ee      	b.n	8002142 <__swhatbuf_r+0x1e>
 8002164:	2340      	movs	r3, #64	; 0x40
 8002166:	2000      	movs	r0, #0
 8002168:	6023      	str	r3, [r4, #0]
 800216a:	b016      	add	sp, #88	; 0x58
 800216c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002170 <__smakebuf_r>:
 8002170:	898b      	ldrh	r3, [r1, #12]
 8002172:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002174:	079d      	lsls	r5, r3, #30
 8002176:	4606      	mov	r6, r0
 8002178:	460c      	mov	r4, r1
 800217a:	d507      	bpl.n	800218c <__smakebuf_r+0x1c>
 800217c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002180:	6023      	str	r3, [r4, #0]
 8002182:	6123      	str	r3, [r4, #16]
 8002184:	2301      	movs	r3, #1
 8002186:	6163      	str	r3, [r4, #20]
 8002188:	b002      	add	sp, #8
 800218a:	bd70      	pop	{r4, r5, r6, pc}
 800218c:	ab01      	add	r3, sp, #4
 800218e:	466a      	mov	r2, sp
 8002190:	f7ff ffc8 	bl	8002124 <__swhatbuf_r>
 8002194:	9900      	ldr	r1, [sp, #0]
 8002196:	4605      	mov	r5, r0
 8002198:	4630      	mov	r0, r6
 800219a:	f7ff fa57 	bl	800164c <_malloc_r>
 800219e:	b948      	cbnz	r0, 80021b4 <__smakebuf_r+0x44>
 80021a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021a4:	059a      	lsls	r2, r3, #22
 80021a6:	d4ef      	bmi.n	8002188 <__smakebuf_r+0x18>
 80021a8:	f023 0303 	bic.w	r3, r3, #3
 80021ac:	f043 0302 	orr.w	r3, r3, #2
 80021b0:	81a3      	strh	r3, [r4, #12]
 80021b2:	e7e3      	b.n	800217c <__smakebuf_r+0xc>
 80021b4:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <__smakebuf_r+0x7c>)
 80021b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80021b8:	89a3      	ldrh	r3, [r4, #12]
 80021ba:	6020      	str	r0, [r4, #0]
 80021bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021c0:	81a3      	strh	r3, [r4, #12]
 80021c2:	9b00      	ldr	r3, [sp, #0]
 80021c4:	6163      	str	r3, [r4, #20]
 80021c6:	9b01      	ldr	r3, [sp, #4]
 80021c8:	6120      	str	r0, [r4, #16]
 80021ca:	b15b      	cbz	r3, 80021e4 <__smakebuf_r+0x74>
 80021cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021d0:	4630      	mov	r0, r6
 80021d2:	f000 f889 	bl	80022e8 <_isatty_r>
 80021d6:	b128      	cbz	r0, 80021e4 <__smakebuf_r+0x74>
 80021d8:	89a3      	ldrh	r3, [r4, #12]
 80021da:	f023 0303 	bic.w	r3, r3, #3
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	81a3      	strh	r3, [r4, #12]
 80021e4:	89a0      	ldrh	r0, [r4, #12]
 80021e6:	4305      	orrs	r5, r0
 80021e8:	81a5      	strh	r5, [r4, #12]
 80021ea:	e7cd      	b.n	8002188 <__smakebuf_r+0x18>
 80021ec:	08001465 	.word	0x08001465

080021f0 <__malloc_lock>:
 80021f0:	4801      	ldr	r0, [pc, #4]	; (80021f8 <__malloc_lock+0x8>)
 80021f2:	f7ff ba09 	b.w	8001608 <__retarget_lock_acquire_recursive>
 80021f6:	bf00      	nop
 80021f8:	20000084 	.word	0x20000084

080021fc <__malloc_unlock>:
 80021fc:	4801      	ldr	r0, [pc, #4]	; (8002204 <__malloc_unlock+0x8>)
 80021fe:	f7ff ba04 	b.w	800160a <__retarget_lock_release_recursive>
 8002202:	bf00      	nop
 8002204:	20000084 	.word	0x20000084

08002208 <_free_r>:
 8002208:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800220a:	2900      	cmp	r1, #0
 800220c:	d044      	beq.n	8002298 <_free_r+0x90>
 800220e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002212:	9001      	str	r0, [sp, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	f1a1 0404 	sub.w	r4, r1, #4
 800221a:	bfb8      	it	lt
 800221c:	18e4      	addlt	r4, r4, r3
 800221e:	f7ff ffe7 	bl	80021f0 <__malloc_lock>
 8002222:	4a1e      	ldr	r2, [pc, #120]	; (800229c <_free_r+0x94>)
 8002224:	9801      	ldr	r0, [sp, #4]
 8002226:	6813      	ldr	r3, [r2, #0]
 8002228:	b933      	cbnz	r3, 8002238 <_free_r+0x30>
 800222a:	6063      	str	r3, [r4, #4]
 800222c:	6014      	str	r4, [r2, #0]
 800222e:	b003      	add	sp, #12
 8002230:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002234:	f7ff bfe2 	b.w	80021fc <__malloc_unlock>
 8002238:	42a3      	cmp	r3, r4
 800223a:	d908      	bls.n	800224e <_free_r+0x46>
 800223c:	6825      	ldr	r5, [r4, #0]
 800223e:	1961      	adds	r1, r4, r5
 8002240:	428b      	cmp	r3, r1
 8002242:	bf01      	itttt	eq
 8002244:	6819      	ldreq	r1, [r3, #0]
 8002246:	685b      	ldreq	r3, [r3, #4]
 8002248:	1949      	addeq	r1, r1, r5
 800224a:	6021      	streq	r1, [r4, #0]
 800224c:	e7ed      	b.n	800222a <_free_r+0x22>
 800224e:	461a      	mov	r2, r3
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	b10b      	cbz	r3, 8002258 <_free_r+0x50>
 8002254:	42a3      	cmp	r3, r4
 8002256:	d9fa      	bls.n	800224e <_free_r+0x46>
 8002258:	6811      	ldr	r1, [r2, #0]
 800225a:	1855      	adds	r5, r2, r1
 800225c:	42a5      	cmp	r5, r4
 800225e:	d10b      	bne.n	8002278 <_free_r+0x70>
 8002260:	6824      	ldr	r4, [r4, #0]
 8002262:	4421      	add	r1, r4
 8002264:	1854      	adds	r4, r2, r1
 8002266:	42a3      	cmp	r3, r4
 8002268:	6011      	str	r1, [r2, #0]
 800226a:	d1e0      	bne.n	800222e <_free_r+0x26>
 800226c:	681c      	ldr	r4, [r3, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	6053      	str	r3, [r2, #4]
 8002272:	4421      	add	r1, r4
 8002274:	6011      	str	r1, [r2, #0]
 8002276:	e7da      	b.n	800222e <_free_r+0x26>
 8002278:	d902      	bls.n	8002280 <_free_r+0x78>
 800227a:	230c      	movs	r3, #12
 800227c:	6003      	str	r3, [r0, #0]
 800227e:	e7d6      	b.n	800222e <_free_r+0x26>
 8002280:	6825      	ldr	r5, [r4, #0]
 8002282:	1961      	adds	r1, r4, r5
 8002284:	428b      	cmp	r3, r1
 8002286:	bf04      	itt	eq
 8002288:	6819      	ldreq	r1, [r3, #0]
 800228a:	685b      	ldreq	r3, [r3, #4]
 800228c:	6063      	str	r3, [r4, #4]
 800228e:	bf04      	itt	eq
 8002290:	1949      	addeq	r1, r1, r5
 8002292:	6021      	streq	r1, [r4, #0]
 8002294:	6054      	str	r4, [r2, #4]
 8002296:	e7ca      	b.n	800222e <_free_r+0x26>
 8002298:	b003      	add	sp, #12
 800229a:	bd30      	pop	{r4, r5, pc}
 800229c:	20000088 	.word	0x20000088

080022a0 <_read_r>:
 80022a0:	b538      	push	{r3, r4, r5, lr}
 80022a2:	4d07      	ldr	r5, [pc, #28]	; (80022c0 <_read_r+0x20>)
 80022a4:	4604      	mov	r4, r0
 80022a6:	4608      	mov	r0, r1
 80022a8:	4611      	mov	r1, r2
 80022aa:	2200      	movs	r2, #0
 80022ac:	602a      	str	r2, [r5, #0]
 80022ae:	461a      	mov	r2, r3
 80022b0:	f7fe ff9c 	bl	80011ec <_read>
 80022b4:	1c43      	adds	r3, r0, #1
 80022b6:	d102      	bne.n	80022be <_read_r+0x1e>
 80022b8:	682b      	ldr	r3, [r5, #0]
 80022ba:	b103      	cbz	r3, 80022be <_read_r+0x1e>
 80022bc:	6023      	str	r3, [r4, #0]
 80022be:	bd38      	pop	{r3, r4, r5, pc}
 80022c0:	20000090 	.word	0x20000090

080022c4 <_fstat_r>:
 80022c4:	b538      	push	{r3, r4, r5, lr}
 80022c6:	4d07      	ldr	r5, [pc, #28]	; (80022e4 <_fstat_r+0x20>)
 80022c8:	2300      	movs	r3, #0
 80022ca:	4604      	mov	r4, r0
 80022cc:	4608      	mov	r0, r1
 80022ce:	4611      	mov	r1, r2
 80022d0:	602b      	str	r3, [r5, #0]
 80022d2:	f7fe ffd0 	bl	8001276 <_fstat>
 80022d6:	1c43      	adds	r3, r0, #1
 80022d8:	d102      	bne.n	80022e0 <_fstat_r+0x1c>
 80022da:	682b      	ldr	r3, [r5, #0]
 80022dc:	b103      	cbz	r3, 80022e0 <_fstat_r+0x1c>
 80022de:	6023      	str	r3, [r4, #0]
 80022e0:	bd38      	pop	{r3, r4, r5, pc}
 80022e2:	bf00      	nop
 80022e4:	20000090 	.word	0x20000090

080022e8 <_isatty_r>:
 80022e8:	b538      	push	{r3, r4, r5, lr}
 80022ea:	4d06      	ldr	r5, [pc, #24]	; (8002304 <_isatty_r+0x1c>)
 80022ec:	2300      	movs	r3, #0
 80022ee:	4604      	mov	r4, r0
 80022f0:	4608      	mov	r0, r1
 80022f2:	602b      	str	r3, [r5, #0]
 80022f4:	f7fe ffcf 	bl	8001296 <_isatty>
 80022f8:	1c43      	adds	r3, r0, #1
 80022fa:	d102      	bne.n	8002302 <_isatty_r+0x1a>
 80022fc:	682b      	ldr	r3, [r5, #0]
 80022fe:	b103      	cbz	r3, 8002302 <_isatty_r+0x1a>
 8002300:	6023      	str	r3, [r4, #0]
 8002302:	bd38      	pop	{r3, r4, r5, pc}
 8002304:	20000090 	.word	0x20000090

08002308 <_init>:
 8002308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230a:	bf00      	nop
 800230c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800230e:	bc08      	pop	{r3}
 8002310:	469e      	mov	lr, r3
 8002312:	4770      	bx	lr

08002314 <_fini>:
 8002314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002316:	bf00      	nop
 8002318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800231a:	bc08      	pop	{r3}
 800231c:	469e      	mov	lr, r3
 800231e:	4770      	bx	lr
