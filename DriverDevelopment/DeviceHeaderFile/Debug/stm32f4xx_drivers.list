
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e30  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000fd8  08000fe0  00010fe0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000fd8  08000fd8  00010fe0  2**0
                  CONTENTS
  4 .ARM          00000000  08000fd8  08000fd8  00010fe0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fd8  08000fe0  00010fe0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fd8  08000fd8  00010fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fdc  08000fdc  00010fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010fe0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010fe0  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010fe0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000012bf  00000000  00000000  00011010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000049a  00000000  00000000  000122cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000148  00000000  00000000  00012770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000158  00000000  00000000  000128b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002645  00000000  00000000  00012a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001f45  00000000  00000000  00015055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009af0  00000000  00000000  00016f9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00020a8a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000468  00000000  00000000  00020adc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000fc0 	.word	0x08000fc0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000fc0 	.word	0x08000fc0

080001e8 <GPIO_PCLK_Ctrl>:
 *
 * 	@notes					: API for enabling and disabling the clock
 */

void GPIO_PCLK_Ctrl(GPIO_RegDef_t *pGPIOx, uint8_t EN_DI)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]
	if(EN_DI==ENABLE)
 80001f4:	78fb      	ldrb	r3, [r7, #3]
 80001f6:	2b01      	cmp	r3, #1
 80001f8:	d162      	bne.n	80002c0 <GPIO_PCLK_Ctrl+0xd8>
	{
		if(pGPIOx==GPIOA)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a66      	ldr	r2, [pc, #408]	; (8000398 <GPIO_PCLK_Ctrl+0x1b0>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d106      	bne.n	8000210 <GPIO_PCLK_Ctrl+0x28>
			GPIOA_PCLK_EN();
 8000202:	4b66      	ldr	r3, [pc, #408]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 8000204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000206:	4a65      	ldr	r2, [pc, #404]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx==GPIOH)
			GPIOH_PCLK_DI();
		else if(pGPIOx==GPIOI)
			GPIOI_PCLK_DI();
	}
}
 800020e:	e0bc      	b.n	800038a <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOB)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4a63      	ldr	r2, [pc, #396]	; (80003a0 <GPIO_PCLK_Ctrl+0x1b8>)
 8000214:	4293      	cmp	r3, r2
 8000216:	d106      	bne.n	8000226 <GPIO_PCLK_Ctrl+0x3e>
			GPIOB_PCLK_EN();
 8000218:	4b60      	ldr	r3, [pc, #384]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a5f      	ldr	r2, [pc, #380]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 800021e:	f043 0302 	orr.w	r3, r3, #2
 8000222:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000224:	e0b1      	b.n	800038a <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOC)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a5e      	ldr	r2, [pc, #376]	; (80003a4 <GPIO_PCLK_Ctrl+0x1bc>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <GPIO_PCLK_Ctrl+0x54>
			GPIOC_PCLK_EN();
 800022e:	4b5b      	ldr	r3, [pc, #364]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000232:	4a5a      	ldr	r2, [pc, #360]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	6313      	str	r3, [r2, #48]	; 0x30
}
 800023a:	e0a6      	b.n	800038a <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOD)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a5a      	ldr	r2, [pc, #360]	; (80003a8 <GPIO_PCLK_Ctrl+0x1c0>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <GPIO_PCLK_Ctrl+0x6a>
			GPIOD_PCLK_EN();
 8000244:	4b55      	ldr	r3, [pc, #340]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a54      	ldr	r2, [pc, #336]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 800024a:	f043 0308 	orr.w	r3, r3, #8
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000250:	e09b      	b.n	800038a <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOE)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a55      	ldr	r2, [pc, #340]	; (80003ac <GPIO_PCLK_Ctrl+0x1c4>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <GPIO_PCLK_Ctrl+0x80>
			GPIOE_PCLK_EN();
 800025a:	4b50      	ldr	r3, [pc, #320]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025e:	4a4f      	ldr	r2, [pc, #316]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 8000260:	f043 0310 	orr.w	r3, r3, #16
 8000264:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000266:	e090      	b.n	800038a <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOF)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a51      	ldr	r2, [pc, #324]	; (80003b0 <GPIO_PCLK_Ctrl+0x1c8>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d106      	bne.n	800027e <GPIO_PCLK_Ctrl+0x96>
			GPIOF_PCLK_EN();
 8000270:	4b4a      	ldr	r3, [pc, #296]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000274:	4a49      	ldr	r2, [pc, #292]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 8000276:	f043 0320 	orr.w	r3, r3, #32
 800027a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800027c:	e085      	b.n	800038a <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOG)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a4c      	ldr	r2, [pc, #304]	; (80003b4 <GPIO_PCLK_Ctrl+0x1cc>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <GPIO_PCLK_Ctrl+0xac>
			GPIOG_PCLK_EN();
 8000286:	4b45      	ldr	r3, [pc, #276]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028a:	4a44      	ldr	r2, [pc, #272]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 800028c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000290:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000292:	e07a      	b.n	800038a <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOH)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a48      	ldr	r2, [pc, #288]	; (80003b8 <GPIO_PCLK_Ctrl+0x1d0>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d106      	bne.n	80002aa <GPIO_PCLK_Ctrl+0xc2>
			GPIOH_PCLK_EN();
 800029c:	4b3f      	ldr	r3, [pc, #252]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a3e      	ldr	r2, [pc, #248]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 80002a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a8:	e06f      	b.n	800038a <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOI)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a43      	ldr	r2, [pc, #268]	; (80003bc <GPIO_PCLK_Ctrl+0x1d4>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d16b      	bne.n	800038a <GPIO_PCLK_Ctrl+0x1a2>
			GPIOI_PCLK_EN();
 80002b2:	4b3a      	ldr	r3, [pc, #232]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	4a39      	ldr	r2, [pc, #228]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 80002b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002be:	e064      	b.n	800038a <GPIO_PCLK_Ctrl+0x1a2>
	else if(EN_DI==DISABLE)
 80002c0:	78fb      	ldrb	r3, [r7, #3]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d161      	bne.n	800038a <GPIO_PCLK_Ctrl+0x1a2>
		if(pGPIOx==GPIOA)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4a33      	ldr	r2, [pc, #204]	; (8000398 <GPIO_PCLK_Ctrl+0x1b0>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d106      	bne.n	80002dc <GPIO_PCLK_Ctrl+0xf4>
			GPIOA_PCLK_DI();
 80002ce:	4b33      	ldr	r3, [pc, #204]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 80002d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d2:	4a32      	ldr	r2, [pc, #200]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 80002d4:	f023 0301 	bic.w	r3, r3, #1
 80002d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002da:	e056      	b.n	800038a <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOB)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a30      	ldr	r2, [pc, #192]	; (80003a0 <GPIO_PCLK_Ctrl+0x1b8>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d106      	bne.n	80002f2 <GPIO_PCLK_Ctrl+0x10a>
			GPIOB_PCLK_DI();
 80002e4:	4b2d      	ldr	r3, [pc, #180]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 80002e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e8:	4a2c      	ldr	r2, [pc, #176]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 80002ea:	f023 0302 	bic.w	r3, r3, #2
 80002ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f0:	e04b      	b.n	800038a <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOC)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4a2b      	ldr	r2, [pc, #172]	; (80003a4 <GPIO_PCLK_Ctrl+0x1bc>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d106      	bne.n	8000308 <GPIO_PCLK_Ctrl+0x120>
			GPIOC_PCLK_DI();
 80002fa:	4b28      	ldr	r3, [pc, #160]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 80002fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fe:	4a27      	ldr	r2, [pc, #156]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 8000300:	f023 0304 	bic.w	r3, r3, #4
 8000304:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000306:	e040      	b.n	800038a <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOD)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4a27      	ldr	r2, [pc, #156]	; (80003a8 <GPIO_PCLK_Ctrl+0x1c0>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d106      	bne.n	800031e <GPIO_PCLK_Ctrl+0x136>
			GPIOD_PCLK_DI();
 8000310:	4b22      	ldr	r3, [pc, #136]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 8000312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000314:	4a21      	ldr	r2, [pc, #132]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 8000316:	f023 0308 	bic.w	r3, r3, #8
 800031a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800031c:	e035      	b.n	800038a <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOE)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a22      	ldr	r2, [pc, #136]	; (80003ac <GPIO_PCLK_Ctrl+0x1c4>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d106      	bne.n	8000334 <GPIO_PCLK_Ctrl+0x14c>
			GPIOE_PCLK_DI();
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 8000328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032a:	4a1c      	ldr	r2, [pc, #112]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 800032c:	f023 0310 	bic.w	r3, r3, #16
 8000330:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000332:	e02a      	b.n	800038a <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOF)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4a1e      	ldr	r2, [pc, #120]	; (80003b0 <GPIO_PCLK_Ctrl+0x1c8>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d106      	bne.n	800034a <GPIO_PCLK_Ctrl+0x162>
			GPIOF_PCLK_DI();
 800033c:	4b17      	ldr	r3, [pc, #92]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 800033e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000340:	4a16      	ldr	r2, [pc, #88]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 8000342:	f023 0320 	bic.w	r3, r3, #32
 8000346:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000348:	e01f      	b.n	800038a <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOG)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4a19      	ldr	r2, [pc, #100]	; (80003b4 <GPIO_PCLK_Ctrl+0x1cc>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d106      	bne.n	8000360 <GPIO_PCLK_Ctrl+0x178>
			GPIOG_PCLK_DI();
 8000352:	4b12      	ldr	r3, [pc, #72]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000356:	4a11      	ldr	r2, [pc, #68]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 8000358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800035c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800035e:	e014      	b.n	800038a <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOH)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4a15      	ldr	r2, [pc, #84]	; (80003b8 <GPIO_PCLK_Ctrl+0x1d0>)
 8000364:	4293      	cmp	r3, r2
 8000366:	d106      	bne.n	8000376 <GPIO_PCLK_Ctrl+0x18e>
			GPIOH_PCLK_DI();
 8000368:	4b0c      	ldr	r3, [pc, #48]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036c:	4a0b      	ldr	r2, [pc, #44]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 800036e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000372:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000374:	e009      	b.n	800038a <GPIO_PCLK_Ctrl+0x1a2>
		else if(pGPIOx==GPIOI)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4a10      	ldr	r2, [pc, #64]	; (80003bc <GPIO_PCLK_Ctrl+0x1d4>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d105      	bne.n	800038a <GPIO_PCLK_Ctrl+0x1a2>
			GPIOI_PCLK_DI();
 800037e:	4b07      	ldr	r3, [pc, #28]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 8000380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000382:	4a06      	ldr	r2, [pc, #24]	; (800039c <GPIO_PCLK_Ctrl+0x1b4>)
 8000384:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000388:	6313      	str	r3, [r2, #48]	; 0x30
}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	40020000 	.word	0x40020000
 800039c:	40023800 	.word	0x40023800
 80003a0:	40020400 	.word	0x40020400
 80003a4:	40020800 	.word	0x40020800
 80003a8:	40020c00 	.word	0x40020c00
 80003ac:	40021000 	.word	0x40021000
 80003b0:	40021400 	.word	0x40021400
 80003b4:	40021800 	.word	0x40021800
 80003b8:	40021c00 	.word	0x40021c00
 80003bc:	40022000 	.word	0x40022000

080003c0 <GPIO_Init>:
 * 	@return					: void
 *
 * 	@notes					: API for initializing the GPIO pins
 */
void GPIO_Init(GPIOx_Handle_t *pGPIOx_Handle)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
	uint32_t temp;

	//Pin mode configuration
	if(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinMode<=GPIO_MODE_AN)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	795b      	ldrb	r3, [r3, #5]
 80003cc:	2b03      	cmp	r3, #3
 80003ce:	d820      	bhi.n	8000412 <GPIO_Init+0x52>
	{
		//Non-Interrupt modes
		temp = (pGPIOx_Handle->GPIO_PinConfig.GPIO_PinMode)<<(2*(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	795b      	ldrb	r3, [r3, #5]
 80003d4:	461a      	mov	r2, r3
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	791b      	ldrb	r3, [r3, #4]
 80003da:	005b      	lsls	r3, r3, #1
 80003dc:	fa02 f303 	lsl.w	r3, r2, r3
 80003e0:	60bb      	str	r3, [r7, #8]
		pGPIOx_Handle->pGPIOx->MODER &= ~((0x3)<<(2*(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo)));
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	791b      	ldrb	r3, [r3, #4]
 80003ec:	005b      	lsls	r3, r3, #1
 80003ee:	2103      	movs	r1, #3
 80003f0:	fa01 f303 	lsl.w	r3, r1, r3
 80003f4:	43db      	mvns	r3, r3
 80003f6:	4619      	mov	r1, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	400a      	ands	r2, r1
 80003fe:	601a      	str	r2, [r3, #0]
		pGPIOx_Handle->pGPIOx->MODER |= temp;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	6819      	ldr	r1, [r3, #0]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	68ba      	ldr	r2, [r7, #8]
 800040c:	430a      	orrs	r2, r1
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	e0c8      	b.n	80005a4 <GPIO_Init+0x1e4>
	{
		//Interrupt Mode

		/**EXTI Line Configuration**/
		//IT_RT -  Interrupt Rising Edge Trigger
		if(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RT)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	795b      	ldrb	r3, [r3, #5]
 8000416:	2b04      	cmp	r3, #4
 8000418:	d122      	bne.n	8000460 <GPIO_Init+0xa0>
		{
			//Configure RTSR
			EXTI->EXTI_RTSR &= ~(1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));
 800041a:	4b5d      	ldr	r3, [pc, #372]	; (8000590 <GPIO_Init+0x1d0>)
 800041c:	689b      	ldr	r3, [r3, #8]
 800041e:	687a      	ldr	r2, [r7, #4]
 8000420:	7912      	ldrb	r2, [r2, #4]
 8000422:	4611      	mov	r1, r2
 8000424:	2201      	movs	r2, #1
 8000426:	408a      	lsls	r2, r1
 8000428:	43d2      	mvns	r2, r2
 800042a:	4611      	mov	r1, r2
 800042c:	4a58      	ldr	r2, [pc, #352]	; (8000590 <GPIO_Init+0x1d0>)
 800042e:	400b      	ands	r3, r1
 8000430:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_RTSR |= 1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo);
 8000432:	4b57      	ldr	r3, [pc, #348]	; (8000590 <GPIO_Init+0x1d0>)
 8000434:	689b      	ldr	r3, [r3, #8]
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	7912      	ldrb	r2, [r2, #4]
 800043a:	4611      	mov	r1, r2
 800043c:	2201      	movs	r2, #1
 800043e:	408a      	lsls	r2, r1
 8000440:	4611      	mov	r1, r2
 8000442:	4a53      	ldr	r2, [pc, #332]	; (8000590 <GPIO_Init+0x1d0>)
 8000444:	430b      	orrs	r3, r1
 8000446:	6093      	str	r3, [r2, #8]
			//Clear FTSR
			EXTI->EXTI_FTSR &=  ~(1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));
 8000448:	4b51      	ldr	r3, [pc, #324]	; (8000590 <GPIO_Init+0x1d0>)
 800044a:	68db      	ldr	r3, [r3, #12]
 800044c:	687a      	ldr	r2, [r7, #4]
 800044e:	7912      	ldrb	r2, [r2, #4]
 8000450:	4611      	mov	r1, r2
 8000452:	2201      	movs	r2, #1
 8000454:	408a      	lsls	r2, r1
 8000456:	43d2      	mvns	r2, r2
 8000458:	4611      	mov	r1, r2
 800045a:	4a4d      	ldr	r2, [pc, #308]	; (8000590 <GPIO_Init+0x1d0>)
 800045c:	400b      	ands	r3, r1
 800045e:	60d3      	str	r3, [r2, #12]

		}
		//IT_FT -  Interrupt Falling Edge Trigger
		if(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_FT)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	795b      	ldrb	r3, [r3, #5]
 8000464:	2b05      	cmp	r3, #5
 8000466:	d122      	bne.n	80004ae <GPIO_Init+0xee>
		{
			//Configure FTSR
			EXTI->EXTI_FTSR &= ~(1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));
 8000468:	4b49      	ldr	r3, [pc, #292]	; (8000590 <GPIO_Init+0x1d0>)
 800046a:	68db      	ldr	r3, [r3, #12]
 800046c:	687a      	ldr	r2, [r7, #4]
 800046e:	7912      	ldrb	r2, [r2, #4]
 8000470:	4611      	mov	r1, r2
 8000472:	2201      	movs	r2, #1
 8000474:	408a      	lsls	r2, r1
 8000476:	43d2      	mvns	r2, r2
 8000478:	4611      	mov	r1, r2
 800047a:	4a45      	ldr	r2, [pc, #276]	; (8000590 <GPIO_Init+0x1d0>)
 800047c:	400b      	ands	r3, r1
 800047e:	60d3      	str	r3, [r2, #12]
			EXTI->EXTI_FTSR |= 1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo);
 8000480:	4b43      	ldr	r3, [pc, #268]	; (8000590 <GPIO_Init+0x1d0>)
 8000482:	68db      	ldr	r3, [r3, #12]
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	7912      	ldrb	r2, [r2, #4]
 8000488:	4611      	mov	r1, r2
 800048a:	2201      	movs	r2, #1
 800048c:	408a      	lsls	r2, r1
 800048e:	4611      	mov	r1, r2
 8000490:	4a3f      	ldr	r2, [pc, #252]	; (8000590 <GPIO_Init+0x1d0>)
 8000492:	430b      	orrs	r3, r1
 8000494:	60d3      	str	r3, [r2, #12]
			//Clear RTSR
			EXTI->EXTI_RTSR &=  ~(1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));
 8000496:	4b3e      	ldr	r3, [pc, #248]	; (8000590 <GPIO_Init+0x1d0>)
 8000498:	689b      	ldr	r3, [r3, #8]
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	7912      	ldrb	r2, [r2, #4]
 800049e:	4611      	mov	r1, r2
 80004a0:	2201      	movs	r2, #1
 80004a2:	408a      	lsls	r2, r1
 80004a4:	43d2      	mvns	r2, r2
 80004a6:	4611      	mov	r1, r2
 80004a8:	4a39      	ldr	r2, [pc, #228]	; (8000590 <GPIO_Init+0x1d0>)
 80004aa:	400b      	ands	r3, r1
 80004ac:	6093      	str	r3, [r2, #8]
		}
		//IT_RFT -  Interrupt Rising/Falling Edge Trigger
		if(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RFT)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	795b      	ldrb	r3, [r3, #5]
 80004b2:	2b06      	cmp	r3, #6
 80004b4:	d12d      	bne.n	8000512 <GPIO_Init+0x152>
		{
			//Configure RTSR
			EXTI->EXTI_RTSR &= ~(1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));
 80004b6:	4b36      	ldr	r3, [pc, #216]	; (8000590 <GPIO_Init+0x1d0>)
 80004b8:	689b      	ldr	r3, [r3, #8]
 80004ba:	687a      	ldr	r2, [r7, #4]
 80004bc:	7912      	ldrb	r2, [r2, #4]
 80004be:	4611      	mov	r1, r2
 80004c0:	2201      	movs	r2, #1
 80004c2:	408a      	lsls	r2, r1
 80004c4:	43d2      	mvns	r2, r2
 80004c6:	4611      	mov	r1, r2
 80004c8:	4a31      	ldr	r2, [pc, #196]	; (8000590 <GPIO_Init+0x1d0>)
 80004ca:	400b      	ands	r3, r1
 80004cc:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_RTSR |= 1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo);
 80004ce:	4b30      	ldr	r3, [pc, #192]	; (8000590 <GPIO_Init+0x1d0>)
 80004d0:	689b      	ldr	r3, [r3, #8]
 80004d2:	687a      	ldr	r2, [r7, #4]
 80004d4:	7912      	ldrb	r2, [r2, #4]
 80004d6:	4611      	mov	r1, r2
 80004d8:	2201      	movs	r2, #1
 80004da:	408a      	lsls	r2, r1
 80004dc:	4611      	mov	r1, r2
 80004de:	4a2c      	ldr	r2, [pc, #176]	; (8000590 <GPIO_Init+0x1d0>)
 80004e0:	430b      	orrs	r3, r1
 80004e2:	6093      	str	r3, [r2, #8]
			//Configure FTSR
			EXTI->EXTI_FTSR &= ~(1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));
 80004e4:	4b2a      	ldr	r3, [pc, #168]	; (8000590 <GPIO_Init+0x1d0>)
 80004e6:	68db      	ldr	r3, [r3, #12]
 80004e8:	687a      	ldr	r2, [r7, #4]
 80004ea:	7912      	ldrb	r2, [r2, #4]
 80004ec:	4611      	mov	r1, r2
 80004ee:	2201      	movs	r2, #1
 80004f0:	408a      	lsls	r2, r1
 80004f2:	43d2      	mvns	r2, r2
 80004f4:	4611      	mov	r1, r2
 80004f6:	4a26      	ldr	r2, [pc, #152]	; (8000590 <GPIO_Init+0x1d0>)
 80004f8:	400b      	ands	r3, r1
 80004fa:	60d3      	str	r3, [r2, #12]
			EXTI->EXTI_FTSR |= 1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo);
 80004fc:	4b24      	ldr	r3, [pc, #144]	; (8000590 <GPIO_Init+0x1d0>)
 80004fe:	68db      	ldr	r3, [r3, #12]
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	7912      	ldrb	r2, [r2, #4]
 8000504:	4611      	mov	r1, r2
 8000506:	2201      	movs	r2, #1
 8000508:	408a      	lsls	r2, r1
 800050a:	4611      	mov	r1, r2
 800050c:	4a20      	ldr	r2, [pc, #128]	; (8000590 <GPIO_Init+0x1d0>)
 800050e:	430b      	orrs	r3, r1
 8000510:	60d3      	str	r3, [r2, #12]
		}
		/**EXTI Line Configuration**/

		//Configure GPIO Port selection Register in SYSCFG
		SYSCFG_CLK_EN();																				//Enable SYSCFG Clock
 8000512:	4b20      	ldr	r3, [pc, #128]	; (8000594 <GPIO_Init+0x1d4>)
 8000514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000516:	4a1f      	ldr	r2, [pc, #124]	; (8000594 <GPIO_Init+0x1d4>)
 8000518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800051c:	6453      	str	r3, [r2, #68]	; 0x44
		uint8_t SYSCFG_ARRAY_INDEX = ((pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo)/4);
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	791b      	ldrb	r3, [r3, #4]
 8000522:	089b      	lsrs	r3, r3, #2
 8000524:	73fb      	strb	r3, [r7, #15]
		uint8_t SYSCFG_BIT_FIELD= ((pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo)%4)*4;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	791b      	ldrb	r3, [r3, #4]
 800052a:	f003 0303 	and.w	r3, r3, #3
 800052e:	b2db      	uxtb	r3, r3
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	73bb      	strb	r3, [r7, #14]
		SYSCFG->SYSCFG_EXTICR[SYSCFG_ARRAY_INDEX] &= ~(Port_ConfigCode(GPIOA))<<(SYSCFG_BIT_FIELD);		//Clear the Bitfield
 8000534:	4818      	ldr	r0, [pc, #96]	; (8000598 <GPIO_Init+0x1d8>)
 8000536:	f000 f90b 	bl	8000750 <Port_ConfigCode>
 800053a:	4603      	mov	r3, r0
 800053c:	43da      	mvns	r2, r3
 800053e:	7bbb      	ldrb	r3, [r7, #14]
 8000540:	fa02 f103 	lsl.w	r1, r2, r3
 8000544:	4a15      	ldr	r2, [pc, #84]	; (800059c <GPIO_Init+0x1dc>)
 8000546:	7bfb      	ldrb	r3, [r7, #15]
 8000548:	3302      	adds	r3, #2
 800054a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800054e:	4608      	mov	r0, r1
 8000550:	4912      	ldr	r1, [pc, #72]	; (800059c <GPIO_Init+0x1dc>)
 8000552:	7bfb      	ldrb	r3, [r7, #15]
 8000554:	4002      	ands	r2, r0
 8000556:	3302      	adds	r3, #2
 8000558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->SYSCFG_EXTICR[SYSCFG_ARRAY_INDEX] = Port_ConfigCode(GPIOD)<<(SYSCFG_BIT_FIELD);			//Assert the Port Config Code
 800055c:	4810      	ldr	r0, [pc, #64]	; (80005a0 <GPIO_Init+0x1e0>)
 800055e:	f000 f8f7 	bl	8000750 <Port_ConfigCode>
 8000562:	4603      	mov	r3, r0
 8000564:	461a      	mov	r2, r3
 8000566:	7bbb      	ldrb	r3, [r7, #14]
 8000568:	fa02 f103 	lsl.w	r1, r2, r3
 800056c:	4a0b      	ldr	r2, [pc, #44]	; (800059c <GPIO_Init+0x1dc>)
 800056e:	7bfb      	ldrb	r3, [r7, #15]
 8000570:	3302      	adds	r3, #2
 8000572:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//Configure EXTI Interrupt delivery using IMR Register
		EXTI->EXTI_IMR |= 1<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo);
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <GPIO_Init+0x1d0>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	7912      	ldrb	r2, [r2, #4]
 800057e:	4611      	mov	r1, r2
 8000580:	2201      	movs	r2, #1
 8000582:	408a      	lsls	r2, r1
 8000584:	4611      	mov	r1, r2
 8000586:	4a02      	ldr	r2, [pc, #8]	; (8000590 <GPIO_Init+0x1d0>)
 8000588:	430b      	orrs	r3, r1
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	e00a      	b.n	80005a4 <GPIO_Init+0x1e4>
 800058e:	bf00      	nop
 8000590:	40013c00 	.word	0x40013c00
 8000594:	40023800 	.word	0x40023800
 8000598:	40020000 	.word	0x40020000
 800059c:	40013800 	.word	0x40013800
 80005a0:	40020c00 	.word	0x40020c00
	}

	//Speed configuration
	temp = (pGPIOx_Handle->GPIO_PinConfig.GPIO_PinSpeed)<<(2*pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	799b      	ldrb	r3, [r3, #6]
 80005a8:	461a      	mov	r2, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	791b      	ldrb	r3, [r3, #4]
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	fa02 f303 	lsl.w	r3, r2, r3
 80005b4:	60bb      	str	r3, [r7, #8]
	pGPIOx_Handle->pGPIOx->OSPEEDR &= ~((0x3)<<(2*pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));	  //Clearing the required bits
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	689a      	ldr	r2, [r3, #8]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	791b      	ldrb	r3, [r3, #4]
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	2103      	movs	r1, #3
 80005c4:	fa01 f303 	lsl.w	r3, r1, r3
 80005c8:	43db      	mvns	r3, r3
 80005ca:	4619      	mov	r1, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	400a      	ands	r2, r1
 80005d2:	609a      	str	r2, [r3, #8]
	pGPIOx_Handle->pGPIOx->OSPEEDR |= temp;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	6899      	ldr	r1, [r3, #8]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	68ba      	ldr	r2, [r7, #8]
 80005e0:	430a      	orrs	r2, r1
 80005e2:	609a      	str	r2, [r3, #8]

	//Output type configuration
	temp = (pGPIOx_Handle->GPIO_PinConfig.GPIO_PinOPtype)<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	7a1b      	ldrb	r3, [r3, #8]
 80005e8:	461a      	mov	r2, r3
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	791b      	ldrb	r3, [r3, #4]
 80005ee:	fa02 f303 	lsl.w	r3, r2, r3
 80005f2:	60bb      	str	r3, [r7, #8]
	pGPIOx_Handle->pGPIOx->OTYPER &= ~((0x1)<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));	 //Clearing the required bits
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	685a      	ldr	r2, [r3, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	791b      	ldrb	r3, [r3, #4]
 80005fe:	4619      	mov	r1, r3
 8000600:	2301      	movs	r3, #1
 8000602:	408b      	lsls	r3, r1
 8000604:	43db      	mvns	r3, r3
 8000606:	4619      	mov	r1, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	400a      	ands	r2, r1
 800060e:	605a      	str	r2, [r3, #4]
	pGPIOx_Handle->pGPIOx->OTYPER |= temp;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	6859      	ldr	r1, [r3, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	68ba      	ldr	r2, [r7, #8]
 800061c:	430a      	orrs	r2, r1
 800061e:	605a      	str	r2, [r3, #4]

	//Pull-Up/Down configuration
	temp = (pGPIOx_Handle->GPIO_PinConfig.GPIO_PinPuPdCtrl)<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	79db      	ldrb	r3, [r3, #7]
 8000624:	461a      	mov	r2, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	791b      	ldrb	r3, [r3, #4]
 800062a:	fa02 f303 	lsl.w	r3, r2, r3
 800062e:	60bb      	str	r3, [r7, #8]
	pGPIOx_Handle->pGPIOx->PUPDR &= ~((0x1)<<(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo));		//Clearing the required bits
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	68da      	ldr	r2, [r3, #12]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	791b      	ldrb	r3, [r3, #4]
 800063a:	4619      	mov	r1, r3
 800063c:	2301      	movs	r3, #1
 800063e:	408b      	lsls	r3, r1
 8000640:	43db      	mvns	r3, r3
 8000642:	4619      	mov	r1, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	400a      	ands	r2, r1
 800064a:	60da      	str	r2, [r3, #12]
	pGPIOx_Handle->pGPIOx->PUPDR |= temp;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	68d9      	ldr	r1, [r3, #12]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	68ba      	ldr	r2, [r7, #8]
 8000658:	430a      	orrs	r2, r1
 800065a:	60da      	str	r2, [r3, #12]

	//Alternate functionality configuration
	temp = (pGPIOx_Handle->GPIO_PinConfig.GPIO_PinAltFunc)<<(4*(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo%8));
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	7a5b      	ldrb	r3, [r3, #9]
 8000660:	461a      	mov	r2, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	791b      	ldrb	r3, [r3, #4]
 8000666:	f003 0307 	and.w	r3, r3, #7
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	fa02 f303 	lsl.w	r3, r2, r3
 8000670:	60bb      	str	r3, [r7, #8]
	pGPIOx_Handle->pGPIOx->AF[pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo/8] &= ~((0xF)<<(4*(pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo%8)));	//Clearing the required bits
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	7912      	ldrb	r2, [r2, #4]
 800067a:	08d2      	lsrs	r2, r2, #3
 800067c:	b2d0      	uxtb	r0, r2
 800067e:	4602      	mov	r2, r0
 8000680:	3208      	adds	r2, #8
 8000682:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	791b      	ldrb	r3, [r3, #4]
 800068a:	f003 0307 	and.w	r3, r3, #7
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	210f      	movs	r1, #15
 8000692:	fa01 f303 	lsl.w	r3, r1, r3
 8000696:	43db      	mvns	r3, r3
 8000698:	4619      	mov	r1, r3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4011      	ands	r1, r2
 80006a0:	f100 0208 	add.w	r2, r0, #8
 80006a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIOx_Handle->pGPIOx->AF[pGPIOx_Handle->GPIO_PinConfig.GPIO_PinNo/8] |= temp;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	7912      	ldrb	r2, [r2, #4]
 80006b0:	08d2      	lsrs	r2, r2, #3
 80006b2:	b2d0      	uxtb	r0, r2
 80006b4:	4602      	mov	r2, r0
 80006b6:	3208      	adds	r2, #8
 80006b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	68ba      	ldr	r2, [r7, #8]
 80006c2:	4311      	orrs	r1, r2
 80006c4:	f100 0208 	add.w	r2, r0, #8
 80006c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <GPIO_IPinRead>:
 *
 * 	@notes					: API for reading individual GPIO pins
 * 							  Type-cast cos these are 32-bit registers
 */
uint8_t GPIO_IPinRead(GPIO_RegDef_t *pGPIOx, uint8_t PinNo)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	70fb      	strb	r3, [r7, #3]
	uint8_t value = (uint8_t)(((pGPIOx->IDR)>>PinNo)&0x00000001);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	691a      	ldr	r2, [r3, #16]
 80006e4:	78fb      	ldrb	r3, [r7, #3]
 80006e6:	fa22 f303 	lsr.w	r3, r2, r3
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	f003 0301 	and.w	r3, r3, #1
 80006f0:	73fb      	strb	r3, [r7, #15]
	return value;
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <GPIO_OPinWrite>:
 * 	@return					: void
 *
 * 	@notes					: API for writing to a GPIO pin
 */
void GPIO_OPinWrite(GPIO_RegDef_t *pGPIOx, uint8_t PinNo, uint8_t value)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	460b      	mov	r3, r1
 800070a:	70fb      	strb	r3, [r7, #3]
 800070c:	4613      	mov	r3, r2
 800070e:	70bb      	strb	r3, [r7, #2]
	if(value==SET)
 8000710:	78bb      	ldrb	r3, [r7, #2]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d109      	bne.n	800072a <GPIO_OPinWrite+0x2a>
		pGPIOx->ODR |= (1<<PinNo);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	78fa      	ldrb	r2, [r7, #3]
 800071c:	2101      	movs	r1, #1
 800071e:	fa01 f202 	lsl.w	r2, r1, r2
 8000722:	431a      	orrs	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	615a      	str	r2, [r3, #20]
	else if(value==RESET)
		pGPIOx->ODR &= ~(1<<PinNo);
}
 8000728:	e00c      	b.n	8000744 <GPIO_OPinWrite+0x44>
	else if(value==RESET)
 800072a:	78bb      	ldrb	r3, [r7, #2]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d109      	bne.n	8000744 <GPIO_OPinWrite+0x44>
		pGPIOx->ODR &= ~(1<<PinNo);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	695b      	ldr	r3, [r3, #20]
 8000734:	78fa      	ldrb	r2, [r7, #3]
 8000736:	2101      	movs	r1, #1
 8000738:	fa01 f202 	lsl.w	r2, r1, r2
 800073c:	43d2      	mvns	r2, r2
 800073e:	401a      	ands	r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	615a      	str	r2, [r3, #20]
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <Port_ConfigCode>:
		(EXTI->EXTI_PR) |= (1<<PinNo);
	}
}

uint8_t Port_ConfigCode(GPIO_RegDef_t* pGPIOx)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	return ((pGPIOx==GPIOA)?0:\
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4a1e      	ldr	r2, [pc, #120]	; (80007d4 <Port_ConfigCode+0x84>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d031      	beq.n	80007c4 <Port_ConfigCode+0x74>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a1d      	ldr	r2, [pc, #116]	; (80007d8 <Port_ConfigCode+0x88>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d02b      	beq.n	80007c0 <Port_ConfigCode+0x70>
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4a1c      	ldr	r2, [pc, #112]	; (80007dc <Port_ConfigCode+0x8c>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d025      	beq.n	80007bc <Port_ConfigCode+0x6c>
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4a1b      	ldr	r2, [pc, #108]	; (80007e0 <Port_ConfigCode+0x90>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d01f      	beq.n	80007b8 <Port_ConfigCode+0x68>
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4a1a      	ldr	r2, [pc, #104]	; (80007e4 <Port_ConfigCode+0x94>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d019      	beq.n	80007b4 <Port_ConfigCode+0x64>
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a19      	ldr	r2, [pc, #100]	; (80007e8 <Port_ConfigCode+0x98>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d013      	beq.n	80007b0 <Port_ConfigCode+0x60>
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4a18      	ldr	r2, [pc, #96]	; (80007ec <Port_ConfigCode+0x9c>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d00d      	beq.n	80007ac <Port_ConfigCode+0x5c>
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4a17      	ldr	r2, [pc, #92]	; (80007f0 <Port_ConfigCode+0xa0>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d007      	beq.n	80007a8 <Port_ConfigCode+0x58>
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4a16      	ldr	r2, [pc, #88]	; (80007f4 <Port_ConfigCode+0xa4>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d101      	bne.n	80007a4 <Port_ConfigCode+0x54>
 80007a0:	2308      	movs	r3, #8
 80007a2:	e010      	b.n	80007c6 <Port_ConfigCode+0x76>
 80007a4:	2300      	movs	r3, #0
 80007a6:	e00e      	b.n	80007c6 <Port_ConfigCode+0x76>
 80007a8:	2307      	movs	r3, #7
 80007aa:	e00c      	b.n	80007c6 <Port_ConfigCode+0x76>
 80007ac:	2306      	movs	r3, #6
 80007ae:	e00a      	b.n	80007c6 <Port_ConfigCode+0x76>
 80007b0:	2305      	movs	r3, #5
 80007b2:	e008      	b.n	80007c6 <Port_ConfigCode+0x76>
 80007b4:	2304      	movs	r3, #4
 80007b6:	e006      	b.n	80007c6 <Port_ConfigCode+0x76>
 80007b8:	2303      	movs	r3, #3
 80007ba:	e004      	b.n	80007c6 <Port_ConfigCode+0x76>
 80007bc:	2302      	movs	r3, #2
 80007be:	e002      	b.n	80007c6 <Port_ConfigCode+0x76>
 80007c0:	2301      	movs	r3, #1
 80007c2:	e000      	b.n	80007c6 <Port_ConfigCode+0x76>
 80007c4:	2300      	movs	r3, #0
			(pGPIOx==GPIOE)?4:\
			(pGPIOx==GPIOF)?5:\
			(pGPIOx==GPIOG)?6:\
			(pGPIOx==GPIOH)?7:\
			(pGPIOx==GPIOI)?8:0);
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	40020000 	.word	0x40020000
 80007d8:	40020400 	.word	0x40020400
 80007dc:	40020800 	.word	0x40020800
 80007e0:	40020c00 	.word	0x40020c00
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40021400 	.word	0x40021400
 80007ec:	40021800 	.word	0x40021800
 80007f0:	40021c00 	.word	0x40021c00
 80007f4:	40022000 	.word	0x40022000

080007f8 <SPI_PCLK_Ctrl>:
 *
 * 	@notes					: API for enabling and disabling the clock
 */

void SPI_PCLK_Ctrl(SPI_RegDef_t *pSPIx, uint8_t EN_DI)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]
	if(EN_DI==ENABLE)
 8000804:	78fb      	ldrb	r3, [r7, #3]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d120      	bne.n	800084c <SPI_PCLK_Ctrl+0x54>
	{
		if(pSPIx==SPI1)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4a24      	ldr	r2, [pc, #144]	; (80008a0 <SPI_PCLK_Ctrl+0xa8>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d106      	bne.n	8000820 <SPI_PCLK_Ctrl+0x28>
			SPI1_PCLK_EN();
 8000812:	4b24      	ldr	r3, [pc, #144]	; (80008a4 <SPI_PCLK_Ctrl+0xac>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000816:	4a23      	ldr	r2, [pc, #140]	; (80008a4 <SPI_PCLK_Ctrl+0xac>)
 8000818:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800081c:	6453      	str	r3, [r2, #68]	; 0x44
		else if(pSPIx==SPI2)
			SPI2_PCLK_DI();
		else if(pSPIx==SPI3)
			SPI3_PCLK_DI();
	}
}
 800081e:	e038      	b.n	8000892 <SPI_PCLK_Ctrl+0x9a>
		else if(pSPIx==SPI2)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4a21      	ldr	r2, [pc, #132]	; (80008a8 <SPI_PCLK_Ctrl+0xb0>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d106      	bne.n	8000836 <SPI_PCLK_Ctrl+0x3e>
			SPI2_PCLK_EN();
 8000828:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <SPI_PCLK_Ctrl+0xac>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	4a1d      	ldr	r2, [pc, #116]	; (80008a4 <SPI_PCLK_Ctrl+0xac>)
 800082e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000834:	e02d      	b.n	8000892 <SPI_PCLK_Ctrl+0x9a>
		else if(pSPIx==SPI3)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4a1c      	ldr	r2, [pc, #112]	; (80008ac <SPI_PCLK_Ctrl+0xb4>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d129      	bne.n	8000892 <SPI_PCLK_Ctrl+0x9a>
			SPI3_PCLK_EN();
 800083e:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <SPI_PCLK_Ctrl+0xac>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	4a18      	ldr	r2, [pc, #96]	; (80008a4 <SPI_PCLK_Ctrl+0xac>)
 8000844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000848:	6413      	str	r3, [r2, #64]	; 0x40
}
 800084a:	e022      	b.n	8000892 <SPI_PCLK_Ctrl+0x9a>
	else if(EN_DI==DISABLE)
 800084c:	78fb      	ldrb	r3, [r7, #3]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d11f      	bne.n	8000892 <SPI_PCLK_Ctrl+0x9a>
		if(pSPIx==SPI1)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <SPI_PCLK_Ctrl+0xa8>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d106      	bne.n	8000868 <SPI_PCLK_Ctrl+0x70>
			SPI1_PCLK_DI();
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <SPI_PCLK_Ctrl+0xac>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	4a11      	ldr	r2, [pc, #68]	; (80008a4 <SPI_PCLK_Ctrl+0xac>)
 8000860:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000864:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000866:	e014      	b.n	8000892 <SPI_PCLK_Ctrl+0x9a>
		else if(pSPIx==SPI2)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4a0f      	ldr	r2, [pc, #60]	; (80008a8 <SPI_PCLK_Ctrl+0xb0>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d106      	bne.n	800087e <SPI_PCLK_Ctrl+0x86>
			SPI2_PCLK_DI();
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <SPI_PCLK_Ctrl+0xac>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <SPI_PCLK_Ctrl+0xac>)
 8000876:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800087a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800087c:	e009      	b.n	8000892 <SPI_PCLK_Ctrl+0x9a>
		else if(pSPIx==SPI3)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <SPI_PCLK_Ctrl+0xb4>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d105      	bne.n	8000892 <SPI_PCLK_Ctrl+0x9a>
			SPI3_PCLK_DI();
 8000886:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <SPI_PCLK_Ctrl+0xac>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	4a06      	ldr	r2, [pc, #24]	; (80008a4 <SPI_PCLK_Ctrl+0xac>)
 800088c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000890:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40013000 	.word	0x40013000
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40003800 	.word	0x40003800
 80008ac:	40003c00 	.word	0x40003c00

080008b0 <SPI_Init>:
 *
 * 	@notes					: API for enabling and disabling the clock
 */

void SPI_Init(SPIx_Handle_t *pSPIx_Handle)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]

	//SPI Device Mode
	temp |= (pSPIx_Handle->SPIx_PinConfig.SPI_DeviceConfig)<<SPI_CR1_MSTR;  //MSTR Bit of SPI_CR1
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	791b      	ldrb	r3, [r3, #4]
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	461a      	mov	r2, r3
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	4313      	orrs	r3, r2
 80008c8:	60fb      	str	r3, [r7, #12]
	/*
		BIDIMODE		Full-Duplex-0											Half-Duplex-1(Master and Slave work reciprocally)
		RXONLY			0(Full-Duplex) - Simplex Tx(Disconnect MISO),			BIDIOE:	0(Receive)
						1(Rx Only) - Simplex RX											1(Transmit)
	*/
	uint8_t BusConfig = pSPIx_Handle->SPIx_PinConfig.SPI_BusConfig;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	795b      	ldrb	r3, [r3, #5]
 80008ce:	72fb      	strb	r3, [r7, #11]
	if(BusConfig == BUSCONF_FULLDUP)
 80008d0:	7afb      	ldrb	r3, [r7, #11]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d104      	bne.n	80008e0 <SPI_Init+0x30>
		temp &= ~(1<<SPI_CR1_BIDIMODE);
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	e01a      	b.n	8000916 <SPI_Init+0x66>
	else if(BusConfig == BUSCONF_HALFDUP)
 80008e0:	7afb      	ldrb	r3, [r7, #11]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d104      	bne.n	80008f0 <SPI_Init+0x40>
		temp |= (1<<SPI_CR1_BIDIMODE);
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	e012      	b.n	8000916 <SPI_Init+0x66>
	else if(BusConfig == BUSCONF_SIMPRX)
 80008f0:	7afb      	ldrb	r3, [r7, #11]
 80008f2:	2b02      	cmp	r3, #2
 80008f4:	d108      	bne.n	8000908 <SPI_Init+0x58>
	{
		temp &= ~(1<<SPI_CR1_BIDIMODE);
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008fc:	60fb      	str	r3, [r7, #12]
		temp |= (1<<SPI_CR1_RXONLY);
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	e006      	b.n	8000916 <SPI_Init+0x66>
	}
	else if(BusConfig == BUSCONF_SIMPTX)	//Disconnect the MISO line
 8000908:	7afb      	ldrb	r3, [r7, #11]
 800090a:	2b03      	cmp	r3, #3
 800090c:	d103      	bne.n	8000916 <SPI_Init+0x66>
		temp &= ~(1<<SPI_CR1_BIDIMODE);
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000914:	60fb      	str	r3, [r7, #12]

	//SPI Clock Speed
	temp |= (pSPIx_Handle->SPIx_PinConfig.SPI_ClkSpeed)<<SPI_CR1_BR;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	799b      	ldrb	r3, [r3, #6]
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	461a      	mov	r2, r3
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	4313      	orrs	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]

	//SPI Data Frame Format
	if(pSPIx_Handle->SPIx_PinConfig.SPI_DFF == DFF8)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	79db      	ldrb	r3, [r3, #7]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d104      	bne.n	8000936 <SPI_Init+0x86>
		temp &= ~(1<<SPI_CR1_DFF);
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	e007      	b.n	8000946 <SPI_Init+0x96>
	else if(pSPIx_Handle->SPIx_PinConfig.SPI_DFF == DFF16)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	79db      	ldrb	r3, [r3, #7]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d103      	bne.n	8000946 <SPI_Init+0x96>
		temp |= (1<<SPI_CR1_DFF);
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000944:	60fb      	str	r3, [r7, #12]

	//SPI CPOL
	if(pSPIx_Handle->SPIx_PinConfig.SPI_CPOL == ZERO_IDLE)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	7a1b      	ldrb	r3, [r3, #8]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d104      	bne.n	8000958 <SPI_Init+0xa8>
		temp &= ~(1<<SPI_CR1_CPOL);
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	f023 0302 	bic.w	r3, r3, #2
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	e007      	b.n	8000968 <SPI_Init+0xb8>
	else if(pSPIx_Handle->SPIx_PinConfig.SPI_CPOL == HIGH_IDLE)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	7a1b      	ldrb	r3, [r3, #8]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d103      	bne.n	8000968 <SPI_Init+0xb8>
		temp |= (1<<SPI_CR1_CPOL);
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	f043 0302 	orr.w	r3, r3, #2
 8000966:	60fb      	str	r3, [r7, #12]

	//SPI CPHA
	if(pSPIx_Handle->SPIx_PinConfig.SPI_CPHA == FIRSTCLK_CAP)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	7a5b      	ldrb	r3, [r3, #9]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d104      	bne.n	800097a <SPI_Init+0xca>
		temp &= ~(1<<SPI_CR1_CPHA);
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f023 0301 	bic.w	r3, r3, #1
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	e007      	b.n	800098a <SPI_Init+0xda>
	else if(pSPIx_Handle->SPIx_PinConfig.SPI_CPHA == SECONDCLK_CAP)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	7a5b      	ldrb	r3, [r3, #9]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d103      	bne.n	800098a <SPI_Init+0xda>
		temp |= (1<<SPI_CR1_CPHA);
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	60fb      	str	r3, [r7, #12]

	//Software Slave Management(SSM)
	if(pSPIx_Handle->SPIx_PinConfig.SPI_SSM == SSM_DI)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	7a9b      	ldrb	r3, [r3, #10]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d104      	bne.n	800099c <SPI_Init+0xec>
		temp &= ~(1<<SPI_CR1_SSM);
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	e007      	b.n	80009ac <SPI_Init+0xfc>
	else if(pSPIx_Handle->SPIx_PinConfig.SPI_SSM == SSM_EN)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	7a9b      	ldrb	r3, [r3, #10]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d103      	bne.n	80009ac <SPI_Init+0xfc>
		temp |= (1<<SPI_CR1_SSM);
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009aa:	60fb      	str	r3, [r7, #12]

	pSPIx_Handle->pSPIx->SPI_CR1 &= ~(temp);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	6819      	ldr	r1, [r3, #0]
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	43da      	mvns	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	400a      	ands	r2, r1
 80009bc:	601a      	str	r2, [r3, #0]
	pSPIx_Handle->pSPIx->SPI_CR1 |= temp;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	6819      	ldr	r1, [r3, #0]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	68fa      	ldr	r2, [r7, #12]
 80009ca:	430a      	orrs	r2, r1
 80009cc:	601a      	str	r2, [r3, #0]
}
 80009ce:	bf00      	nop
 80009d0:	3714      	adds	r7, #20
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <SPI_TxDataB>:
 * 							  				len decremented by 1, loop back to *
 * 							  		DFF_16: 2 bytes of data is written to the data register
 * 							  				len decremented by 2, loop back to *
 */
void SPI_TxDataB(SPI_RegDef_t *pSPIx, uint8_t *pTxBuff, uint32_t len)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b084      	sub	sp, #16
 80009de:	af00      	add	r7, sp, #0
 80009e0:	60f8      	str	r0, [r7, #12]
 80009e2:	60b9      	str	r1, [r7, #8]
 80009e4:	607a      	str	r2, [r7, #4]
	//Tx Data Blocking Call API: Blocks Program execution, till all the data is transmitted

	while(len>0)
 80009e6:	e024      	b.n	8000a32 <SPI_TxDataB+0x58>
	{
		while(!(FlagStatus(pSPIx, SPI_SR_TXEM)));	//wait until TXE bit is SET
 80009e8:	bf00      	nop
 80009ea:	2102      	movs	r1, #2
 80009ec:	68f8      	ldr	r0, [r7, #12]
 80009ee:	f000 f896 	bl	8000b1e <FlagStatus>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d0f8      	beq.n	80009ea <SPI_TxDataB+0x10>

		if(pSPIx->SPI_CR1 & (1<<SPI_CR1_DFF))			//16 bit data Tx
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d00b      	beq.n	8000a1c <SPI_TxDataB+0x42>
		{
			pSPIx->SPI_DR = *((uint16_t*)pTxBuff);		//DR is 16 bits
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	60da      	str	r2, [r3, #12]
			(uint16_t*)pTxBuff++;
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	3301      	adds	r3, #1
 8000a12:	60bb      	str	r3, [r7, #8]
			len -= 2;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3b02      	subs	r3, #2
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	e00a      	b.n	8000a32 <SPI_TxDataB+0x58>
		}
		else	//8 bit data Tx
		{
			pSPIx->SPI_DR = *pTxBuff;		//DR is 8 bits
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	60da      	str	r2, [r3, #12]
			pTxBuff++;
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	60bb      	str	r3, [r7, #8]
			len--;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	607b      	str	r3, [r7, #4]
	while(len>0)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d1d7      	bne.n	80009e8 <SPI_TxDataB+0xe>
		}
	}
}
 8000a38:	bf00      	nop
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <SPI_RxDataB>:
 * 	@notes					: This API is very similar to TxDataB API;
 * 							  Waits until, the RXNE bit of SR register is SET
 * 							  As soon as the bit is SET, it copies the data from the DR to RxBuff
 */
void SPI_RxDataB(SPI_RegDef_t *pSPIx, uint8_t *pRxBuff, uint32_t len)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b084      	sub	sp, #16
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	60f8      	str	r0, [r7, #12]
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
	//Tx Data Blocking Call API: Blocks Program execution, till all the data is transmitted
	while(len>0)
 8000a4e:	e024      	b.n	8000a9a <SPI_RxDataB+0x58>
	{
		while(!(FlagStatus(pSPIx, SPI_SR_RXNEM)));	//wait until RXNE bit is SET
 8000a50:	bf00      	nop
 8000a52:	2101      	movs	r1, #1
 8000a54:	68f8      	ldr	r0, [r7, #12]
 8000a56:	f000 f862 	bl	8000b1e <FlagStatus>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d0f8      	beq.n	8000a52 <SPI_RxDataB+0x10>

		if(pSPIx->SPI_CR1 & (1<<SPI_CR1_DFF))			//16 bit data Rx
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d00b      	beq.n	8000a84 <SPI_RxDataB+0x42>
		{
			*((uint16_t*)pRxBuff) = pSPIx->SPI_DR;		//DR is 16 bits
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	801a      	strh	r2, [r3, #0]
			(uint16_t*)pRxBuff++;
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	60bb      	str	r3, [r7, #8]
			len -= 2;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	3b02      	subs	r3, #2
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	e00a      	b.n	8000a9a <SPI_RxDataB+0x58>
		}
		else	//8 bit data Tx
		{
			*pRxBuff = pSPIx->SPI_DR;		//DR is 8 bits
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	701a      	strb	r2, [r3, #0]
			pRxBuff++;
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	3301      	adds	r3, #1
 8000a92:	60bb      	str	r3, [r7, #8]
			len--;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	607b      	str	r3, [r7, #4]
	while(len>0)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d1d7      	bne.n	8000a50 <SPI_RxDataB+0xe>
		}
	}
}
 8000aa0:	bf00      	nop
 8000aa2:	bf00      	nop
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <SPI_EN>:
 *
 * 	@notes					: Enables/Disables SPI by setting the SPE bit
 * 							  Call the function after all the register config
 */
void SPI_EN(SPI_RegDef_t *pSPIx,uint8_t EN_DI)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	70fb      	strb	r3, [r7, #3]
	pSPIx->SPI_CR1 &= ~(1<<SPI_CR1_SPE);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	601a      	str	r2, [r3, #0]
	if(EN_DI==ENABLE)
 8000ac2:	78fb      	ldrb	r3, [r7, #3]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d105      	bne.n	8000ad4 <SPI_EN+0x2a>
		(pSPIx->SPI_CR1) |= (1<<SPI_CR1_SPE);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	601a      	str	r2, [r3, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <SPI_SSOEConfig>:
 * 	@return					: void
 *
 * 	@notes					: Enables the output by setting the SSOE bit of SPI_CR2
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EN_DI)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	70fb      	strb	r3, [r7, #3]
	if(EN_DI==ENABLE)
 8000aec:	78fb      	ldrb	r3, [r7, #3]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d106      	bne.n	8000b00 <SPI_SSOEConfig+0x20>
		(pSPIx->SPI_CR2) |= (1<<SPI_CR2_SSOE);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f043 0204 	orr.w	r2, r3, #4
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	605a      	str	r2, [r3, #4]
	else if(EN_DI == DISABLE)
		(pSPIx->SPI_CR2) &= ~(1<<SPI_CR2_SSOE);
}
 8000afe:	e008      	b.n	8000b12 <SPI_SSOEConfig+0x32>
	else if(EN_DI == DISABLE)
 8000b00:	78fb      	ldrb	r3, [r7, #3]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d105      	bne.n	8000b12 <SPI_SSOEConfig+0x32>
		(pSPIx->SPI_CR2) &= ~(1<<SPI_CR2_SSOE);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f023 0204 	bic.w	r2, r3, #4
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	605a      	str	r2, [r3, #4]
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <FlagStatus>:
 *
 * 	@notes					: Checks if a bit
 */

uint8_t FlagStatus(SPI_RegDef_t *pSPIx, uint32_t flag)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	b083      	sub	sp, #12
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
 8000b26:	6039      	str	r1, [r7, #0]
	if((pSPIx->SPI_SR) & flag)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	689a      	ldr	r2, [r3, #8]
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <FlagStatus+0x1a>
		return SET;
 8000b34:	2301      	movs	r3, #1
 8000b36:	e000      	b.n	8000b3a <FlagStatus+0x1c>
	return RESET;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
	...

08000b48 <delay>:
void SPI_Comm();
void delay();
bool AckVerify(uint8_t ACK_BYTE);

void delay()
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
	for(int i=0;i<500000;i++);
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	e002      	b.n	8000b5a <delay+0x12>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3301      	adds	r3, #1
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <delay+0x28>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	ddf8      	ble.n	8000b54 <delay+0xc>
}
 8000b62:	bf00      	nop
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	0007a11f 	.word	0x0007a11f

08000b74 <GPIO_Config>:

void GPIO_Config()
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
	GPIOx_Handle_t gpio;
	gpio.pGPIOx = GPIOD;
 8000b7a:	4b28      	ldr	r3, [pc, #160]	; (8000c1c <GPIO_Config+0xa8>)
 8000b7c:	607b      	str	r3, [r7, #4]
	 * PB14	:	MISO
	 * PB15	: 	MOSI
	 */

	//GPIOD PCLK ON
	GPIO_PCLK_Ctrl(GPIOD,ENABLE);
 8000b7e:	2101      	movs	r1, #1
 8000b80:	4826      	ldr	r0, [pc, #152]	; (8000c1c <GPIO_Config+0xa8>)
 8000b82:	f7ff fb31 	bl	80001e8 <GPIO_PCLK_Ctrl>
	GPIO_PCLK_Ctrl(GPIOB,ENABLE);
 8000b86:	2101      	movs	r1, #1
 8000b88:	4825      	ldr	r0, [pc, #148]	; (8000c20 <GPIO_Config+0xac>)
 8000b8a:	f7ff fb2d 	bl	80001e8 <GPIO_PCLK_Ctrl>

	/*GPIO PD2*/
	gpio.GPIO_PinConfig.GPIO_PinNo = GPIO_PINNO_2;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	723b      	strb	r3, [r7, #8]
	gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000b92:	2301      	movs	r3, #1
 8000b94:	727b      	strb	r3, [r7, #9]
	gpio.GPIO_PinConfig.GPIO_PinOPtype = GPIO_PP;
 8000b96:	2300      	movs	r3, #0
 8000b98:	733b      	strb	r3, [r7, #12]
	gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_PINSPEED_HIGH;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	72bb      	strb	r3, [r7, #10]
	gpio.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_PIN_NPUPD;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(&gpio);
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fc0b 	bl	80003c0 <GPIO_Init>

	/*GPIO PD0*/
	gpio.GPIO_PinConfig.GPIO_PinNo = GPIO_PINNO_0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	723b      	strb	r3, [r7, #8]
	gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	727b      	strb	r3, [r7, #9]
	gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_PINSPEED_HIGH;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	72bb      	strb	r3, [r7, #10]
	gpio.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_PIN_NPUPD;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(&gpio);
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fbff 	bl	80003c0 <GPIO_Init>

	//GPIOB Pin Config Tx Comm
	gpio.pGPIOx = GPIOB;
 8000bc2:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <GPIO_Config+0xac>)
 8000bc4:	607b      	str	r3, [r7, #4]
	gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_AF;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	727b      	strb	r3, [r7, #9]
	gpio.GPIO_PinConfig.GPIO_PinOPtype = GPIO_PP;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	733b      	strb	r3, [r7, #12]
	gpio.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_PIN_NPUPD;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	72fb      	strb	r3, [r7, #11]
	gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_PINSPEED_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	72bb      	strb	r3, [r7, #10]
	gpio.GPIO_PinConfig.GPIO_PinAltFunc = 5;
 8000bd6:	2305      	movs	r3, #5
 8000bd8:	737b      	strb	r3, [r7, #13]

	//NSS
	gpio.GPIO_PinConfig.GPIO_PinNo = GPIO_PINNO_9;
 8000bda:	2309      	movs	r3, #9
 8000bdc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&gpio);
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fbed 	bl	80003c0 <GPIO_Init>

	//SCK
	gpio.GPIO_PinConfig.GPIO_PinNo = GPIO_PINNO_10;
 8000be6:	230a      	movs	r3, #10
 8000be8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&gpio);
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fbe7 	bl	80003c0 <GPIO_Init>

	//MISO
	gpio.GPIO_PinConfig.GPIO_PinNo = GPIO_PINNO_14;
 8000bf2:	230e      	movs	r3, #14
 8000bf4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&gpio);
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fbe1 	bl	80003c0 <GPIO_Init>

	//MOSI
	gpio.GPIO_PinConfig.GPIO_PinNo = GPIO_PINNO_15;
 8000bfe:	230f      	movs	r3, #15
 8000c00:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&gpio);
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fbdb 	bl	80003c0 <GPIO_Init>

	//Configure
	GPIO_Init(&gpio);
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fbd7 	bl	80003c0 <GPIO_Init>
}
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40020c00 	.word	0x40020c00
 8000c20:	40020400 	.word	0x40020400

08000c24 <SPI_Config>:

void SPI_Config()
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
	SPIx_Handle_t spi;

	SPI_PCLK_Ctrl(SPI2, ENABLE);
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	480d      	ldr	r0, [pc, #52]	; (8000c64 <SPI_Config+0x40>)
 8000c2e:	f7ff fde3 	bl	80007f8 <SPI_PCLK_Ctrl>

	spi.pSPIx = SPI2;
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <SPI_Config+0x40>)
 8000c34:	607b      	str	r3, [r7, #4]
	spi.SPIx_PinConfig.SPI_DeviceConfig = MASTER;
 8000c36:	2301      	movs	r3, #1
 8000c38:	723b      	strb	r3, [r7, #8]
	spi.SPIx_PinConfig.SPI_BusConfig = BUSCONF_FULLDUP;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	727b      	strb	r3, [r7, #9]
	spi.SPIx_PinConfig.SPI_ClkSpeed = BRDIV8;				//2MHz
 8000c3e:	2302      	movs	r3, #2
 8000c40:	72bb      	strb	r3, [r7, #10]
	spi.SPIx_PinConfig.SPI_CPOL = ZERO_IDLE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	733b      	strb	r3, [r7, #12]
	spi.SPIx_PinConfig.SPI_CPHA = FIRSTCLK_CAP;
 8000c46:	2300      	movs	r3, #0
 8000c48:	737b      	strb	r3, [r7, #13]
	spi.SPIx_PinConfig.SPI_DFF = DFF8;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	72fb      	strb	r3, [r7, #11]
	spi.SPIx_PinConfig.SPI_SSM = SSM_DI;					//Hardware management
 8000c4e:	2300      	movs	r3, #0
 8000c50:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&spi);
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fe2b 	bl	80008b0 <SPI_Init>
}
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40003800 	.word	0x40003800

08000c68 <ButtonResp>:
 * 	@return					: void
 *
 * 	@notes					: The function deals with the button response
 */
void ButtonResp()
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	GPIO_OPinWrite(GPIOD, GPIO_PINNO_2, RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2102      	movs	r1, #2
 8000c70:	480e      	ldr	r0, [pc, #56]	; (8000cac <ButtonResp+0x44>)
 8000c72:	f7ff fd45 	bl	8000700 <GPIO_OPinWrite>
	while(!(GPIO_IPinRead(GPIOD, GPIO_PINNO_0)))
 8000c76:	e004      	b.n	8000c82 <ButtonResp+0x1a>
		GPIO_OPinWrite(GPIOD, GPIO_PINNO_2, RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2102      	movs	r1, #2
 8000c7c:	480b      	ldr	r0, [pc, #44]	; (8000cac <ButtonResp+0x44>)
 8000c7e:	f7ff fd3f 	bl	8000700 <GPIO_OPinWrite>
	while(!(GPIO_IPinRead(GPIOD, GPIO_PINNO_0)))
 8000c82:	2100      	movs	r1, #0
 8000c84:	4809      	ldr	r0, [pc, #36]	; (8000cac <ButtonResp+0x44>)
 8000c86:	f7ff fd25 	bl	80006d4 <GPIO_IPinRead>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d0f3      	beq.n	8000c78 <ButtonResp+0x10>
	GPIO_OPinWrite(GPIOD, GPIO_PINNO_2, SET);
 8000c90:	2201      	movs	r2, #1
 8000c92:	2102      	movs	r1, #2
 8000c94:	4805      	ldr	r0, [pc, #20]	; (8000cac <ButtonResp+0x44>)
 8000c96:	f7ff fd33 	bl	8000700 <GPIO_OPinWrite>
	delay();
 8000c9a:	f7ff ff55 	bl	8000b48 <delay>
	GPIO_OPinWrite(GPIOD, GPIO_PINNO_2, RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2102      	movs	r1, #2
 8000ca2:	4802      	ldr	r0, [pc, #8]	; (8000cac <ButtonResp+0x44>)
 8000ca4:	f7ff fd2c 	bl	8000700 <GPIO_OPinWrite>
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40020c00 	.word	0x40020c00

08000cb0 <AckVerify>:

bool AckVerify(uint8_t ACK_BYTE)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
	if(ACK_BYTE==245)
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	2bf5      	cmp	r3, #245	; 0xf5
 8000cbe:	d106      	bne.n	8000cce <AckVerify+0x1e>
	{
		GPIO_OPinWrite(GPIOD, GPIO_PINNO_2, SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2102      	movs	r1, #2
 8000cc4:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <AckVerify+0x28>)
 8000cc6:	f7ff fd1b 	bl	8000700 <GPIO_OPinWrite>
		return true;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e000      	b.n	8000cd0 <AckVerify+0x20>
	}
	return false;
 8000cce:	2300      	movs	r3, #0
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40020c00 	.word	0x40020c00

08000cdc <SPI_Comm>:

void SPI_Comm()
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
	int i=0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
	SPI_SSOEConfig(SPI2, ENABLE);		//SSOE : LOW
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	4886      	ldr	r0, [pc, #536]	; (8000f04 <SPI_Comm+0x228>)
 8000cea:	f7ff fef9 	bl	8000ae0 <SPI_SSOEConfig>

	for(i=0;i<5;i++)
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	e0fd      	b.n	8000ef0 <SPI_Comm+0x214>
	{
		uint8_t CMD_CODE;			//To store the command code
		uint8_t ACK_BYTE;			//To store the receieved acknowledgement
		uint8_t DummyByte = 0xFF;	//Dummy byte to initialize SPI Slave Transfer
 8000cf4:	23ff      	movs	r3, #255	; 0xff
 8000cf6:	727b      	strb	r3, [r7, #9]
		uint8_t DummyRead;
		uint8_t args[2];

		ButtonResp();
 8000cf8:	f7ff ffb6 	bl	8000c68 <ButtonResp>

		//SPI Tx/Rx Configurations
		SPI_EN(SPI2, ENABLE);
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	4881      	ldr	r0, [pc, #516]	; (8000f04 <SPI_Comm+0x228>)
 8000d00:	f7ff fed3 	bl	8000aaa <SPI_EN>

		if(i==0)
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d133      	bne.n	8000d72 <SPI_Comm+0x96>
		{
			args[0] = DPin;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	713b      	strb	r3, [r7, #4]
			args[1] = value;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	717b      	strb	r3, [r7, #5]

			CMD_CODE = CMD_LED_CTRL;
 8000d12:	2301      	movs	r3, #1
 8000d14:	72fb      	strb	r3, [r7, #11]
			SPI_TxDataB(SPI2,&CMD_CODE,1);					//CMD_LED_CTRL
 8000d16:	f107 030b 	add.w	r3, r7, #11
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4879      	ldr	r0, [pc, #484]	; (8000f04 <SPI_Comm+0x228>)
 8000d20:	f7ff fe5b 	bl	80009da <SPI_TxDataB>
			//Dummy Read to clear RXNE: Clear Rx Buffer
			SPI_RxDataB(SPI2,&DummyRead,1);
 8000d24:	f107 0308 	add.w	r3, r7, #8
 8000d28:	2201      	movs	r2, #1
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4875      	ldr	r0, [pc, #468]	; (8000f04 <SPI_Comm+0x228>)
 8000d2e:	f7ff fe88 	bl	8000a42 <SPI_RxDataB>
			//SPI Slave doesn't initiate Tx, thereby send dummy byte to shift from SR of Slave to SR of Master
			//Sending 8Bit Dummy value, cause SPI is configured with DFF = 8 bits
			SPI_TxDataB(SPI2, &DummyByte,1);
 8000d32:	f107 0309 	add.w	r3, r7, #9
 8000d36:	2201      	movs	r2, #1
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4872      	ldr	r0, [pc, #456]	; (8000f04 <SPI_Comm+0x228>)
 8000d3c:	f7ff fe4d 	bl	80009da <SPI_TxDataB>
			SPI_RxDataB(SPI2,&ACK_BYTE,1);
 8000d40:	f107 030a 	add.w	r3, r7, #10
 8000d44:	2201      	movs	r2, #1
 8000d46:	4619      	mov	r1, r3
 8000d48:	486e      	ldr	r0, [pc, #440]	; (8000f04 <SPI_Comm+0x228>)
 8000d4a:	f7ff fe7a 	bl	8000a42 <SPI_RxDataB>
			if(!(AckVerify(ACK_BYTE)))	//enter if-block, if AckVerify returns false
 8000d4e:	7abb      	ldrb	r3, [r7, #10]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ffad 	bl	8000cb0 <AckVerify>
 8000d56:	4603      	mov	r3, r0
 8000d58:	f083 0301 	eor.w	r3, r3, #1
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 80cb 	bne.w	8000efa <SPI_Comm+0x21e>
				break;

			//Functionality Definition
			SPI_TxDataB(SPI2,args,2);				//Digital Pin
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	2202      	movs	r2, #2
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4866      	ldr	r0, [pc, #408]	; (8000f04 <SPI_Comm+0x228>)
 8000d6c:	f7ff fe35 	bl	80009da <SPI_TxDataB>
 8000d70:	e0af      	b.n	8000ed2 <SPI_Comm+0x1f6>
		}

		else if(i==1)
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d158      	bne.n	8000e2a <SPI_Comm+0x14e>
		{
			uint8_t analogRead;

			SPI_RxDataB(SPI2,&DummyRead,1);
 8000d78:	f107 0308 	add.w	r3, r7, #8
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4860      	ldr	r0, [pc, #384]	; (8000f04 <SPI_Comm+0x228>)
 8000d82:	f7ff fe5e 	bl	8000a42 <SPI_RxDataB>
			CMD_CODE = CMD_SENSOR_READ;
 8000d86:	2302      	movs	r3, #2
 8000d88:	72fb      	strb	r3, [r7, #11]
			SPI_TxDataB(SPI2,&CMD_CODE,1);
 8000d8a:	f107 030b 	add.w	r3, r7, #11
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4619      	mov	r1, r3
 8000d92:	485c      	ldr	r0, [pc, #368]	; (8000f04 <SPI_Comm+0x228>)
 8000d94:	f7ff fe21 	bl	80009da <SPI_TxDataB>

			SPI_RxDataB(SPI2,&DummyRead,1);
 8000d98:	f107 0308 	add.w	r3, r7, #8
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4858      	ldr	r0, [pc, #352]	; (8000f04 <SPI_Comm+0x228>)
 8000da2:	f7ff fe4e 	bl	8000a42 <SPI_RxDataB>
			SPI_TxDataB(SPI2,&DummyByte,1);
 8000da6:	f107 0309 	add.w	r3, r7, #9
 8000daa:	2201      	movs	r2, #1
 8000dac:	4619      	mov	r1, r3
 8000dae:	4855      	ldr	r0, [pc, #340]	; (8000f04 <SPI_Comm+0x228>)
 8000db0:	f7ff fe13 	bl	80009da <SPI_TxDataB>
			SPI_RxDataB(SPI2,&ACK_BYTE,1);
 8000db4:	f107 030a 	add.w	r3, r7, #10
 8000db8:	2201      	movs	r2, #1
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4851      	ldr	r0, [pc, #324]	; (8000f04 <SPI_Comm+0x228>)
 8000dbe:	f7ff fe40 	bl	8000a42 <SPI_RxDataB>
			if(!(AckVerify(ACK_BYTE)))			//enter if-block, if AckVerify returns false
 8000dc2:	7abb      	ldrb	r3, [r7, #10]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff73 	bl	8000cb0 <AckVerify>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	f083 0301 	eor.w	r3, r3, #1
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <SPI_Comm+0xfe>
				break;
 8000dd6:	bf00      	nop
				break;
 8000dd8:	e08f      	b.n	8000efa <SPI_Comm+0x21e>

			//Functionality Definition
			args[0] = ANALOG_PIN0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	713b      	strb	r3, [r7, #4]
			SPI_TxDataB(SPI2,args,1);
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	2201      	movs	r2, #1
 8000de2:	4619      	mov	r1, r3
 8000de4:	4847      	ldr	r0, [pc, #284]	; (8000f04 <SPI_Comm+0x228>)
 8000de6:	f7ff fdf8 	bl	80009da <SPI_TxDataB>
			SPI_RxDataB(SPI2,&DummyRead,1);		//Clear RXNE bit
 8000dea:	f107 0308 	add.w	r3, r7, #8
 8000dee:	2201      	movs	r2, #1
 8000df0:	4619      	mov	r1, r3
 8000df2:	4844      	ldr	r0, [pc, #272]	; (8000f04 <SPI_Comm+0x228>)
 8000df4:	f7ff fe25 	bl	8000a42 <SPI_RxDataB>
			delay();
 8000df8:	f7ff fea6 	bl	8000b48 <delay>
			SPI_TxDataB(SPI2,&DummyByte,1);
 8000dfc:	f107 0309 	add.w	r3, r7, #9
 8000e00:	2201      	movs	r2, #1
 8000e02:	4619      	mov	r1, r3
 8000e04:	483f      	ldr	r0, [pc, #252]	; (8000f04 <SPI_Comm+0x228>)
 8000e06:	f7ff fde8 	bl	80009da <SPI_TxDataB>
			SPI_RxDataB(SPI2,&analogRead,1);
 8000e0a:	1cfb      	adds	r3, r7, #3
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	4619      	mov	r1, r3
 8000e10:	483c      	ldr	r0, [pc, #240]	; (8000f04 <SPI_Comm+0x228>)
 8000e12:	f7ff fe16 	bl	8000a42 <SPI_RxDataB>
			GPIO_OPinWrite(GPIOD, GPIO_PINNO_2, SET);
 8000e16:	2201      	movs	r2, #1
 8000e18:	2102      	movs	r1, #2
 8000e1a:	483b      	ldr	r0, [pc, #236]	; (8000f08 <SPI_Comm+0x22c>)
 8000e1c:	f7ff fc70 	bl	8000700 <GPIO_OPinWrite>
			delay();
 8000e20:	f7ff fe92 	bl	8000b48 <delay>
			delay();
 8000e24:	f7ff fe90 	bl	8000b48 <delay>
 8000e28:	e053      	b.n	8000ed2 <SPI_Comm+0x1f6>
		}

		else if(i==2)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d150      	bne.n	8000ed2 <SPI_Comm+0x1f6>
		{
			uint8_t ledRead;

			CMD_CODE = CMD_LED_READ;
 8000e30:	2303      	movs	r3, #3
 8000e32:	72fb      	strb	r3, [r7, #11]
			SPI_TxDataB(SPI2,&CMD_CODE,1);
 8000e34:	f107 030b 	add.w	r3, r7, #11
 8000e38:	2201      	movs	r2, #1
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4831      	ldr	r0, [pc, #196]	; (8000f04 <SPI_Comm+0x228>)
 8000e3e:	f7ff fdcc 	bl	80009da <SPI_TxDataB>

			SPI_RxDataB(SPI2,&DummyRead,1);
 8000e42:	f107 0308 	add.w	r3, r7, #8
 8000e46:	2201      	movs	r2, #1
 8000e48:	4619      	mov	r1, r3
 8000e4a:	482e      	ldr	r0, [pc, #184]	; (8000f04 <SPI_Comm+0x228>)
 8000e4c:	f7ff fdf9 	bl	8000a42 <SPI_RxDataB>
			SPI_TxDataB(SPI2,&DummyByte,1);
 8000e50:	f107 0309 	add.w	r3, r7, #9
 8000e54:	2201      	movs	r2, #1
 8000e56:	4619      	mov	r1, r3
 8000e58:	482a      	ldr	r0, [pc, #168]	; (8000f04 <SPI_Comm+0x228>)
 8000e5a:	f7ff fdbe 	bl	80009da <SPI_TxDataB>
			SPI_RxDataB(SPI2,&ACK_BYTE,1);
 8000e5e:	f107 030a 	add.w	r3, r7, #10
 8000e62:	2201      	movs	r2, #1
 8000e64:	4619      	mov	r1, r3
 8000e66:	4827      	ldr	r0, [pc, #156]	; (8000f04 <SPI_Comm+0x228>)
 8000e68:	f7ff fdeb 	bl	8000a42 <SPI_RxDataB>
			if(!(AckVerify(ACK_BYTE)))			//enter if-block, if AckVerify returns false
 8000e6c:	7abb      	ldrb	r3, [r7, #10]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ff1e 	bl	8000cb0 <AckVerify>
 8000e74:	4603      	mov	r3, r0
 8000e76:	f083 0301 	eor.w	r3, r3, #1
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <SPI_Comm+0x1a8>
				break;
 8000e80:	bf00      	nop
				break;
 8000e82:	e03a      	b.n	8000efa <SPI_Comm+0x21e>

			//Functionality Definition
			args[0] = ANALOG_PIN0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	713b      	strb	r3, [r7, #4]
			SPI_TxDataB(SPI2,args,1);
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	481d      	ldr	r0, [pc, #116]	; (8000f04 <SPI_Comm+0x228>)
 8000e90:	f7ff fda3 	bl	80009da <SPI_TxDataB>
			SPI_RxDataB(SPI2,&DummyRead,1);		//Clear RXNE bit
 8000e94:	f107 0308 	add.w	r3, r7, #8
 8000e98:	2201      	movs	r2, #1
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4819      	ldr	r0, [pc, #100]	; (8000f04 <SPI_Comm+0x228>)
 8000e9e:	f7ff fdd0 	bl	8000a42 <SPI_RxDataB>
			delay();
 8000ea2:	f7ff fe51 	bl	8000b48 <delay>
			SPI_TxDataB(SPI2,&DummyByte,1);
 8000ea6:	f107 0309 	add.w	r3, r7, #9
 8000eaa:	2201      	movs	r2, #1
 8000eac:	4619      	mov	r1, r3
 8000eae:	4815      	ldr	r0, [pc, #84]	; (8000f04 <SPI_Comm+0x228>)
 8000eb0:	f7ff fd93 	bl	80009da <SPI_TxDataB>
			SPI_RxDataB(SPI2,&ledRead,1);
 8000eb4:	1cbb      	adds	r3, r7, #2
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4812      	ldr	r0, [pc, #72]	; (8000f04 <SPI_Comm+0x228>)
 8000ebc:	f7ff fdc1 	bl	8000a42 <SPI_RxDataB>
			GPIO_OPinWrite(GPIOD, GPIO_PINNO_2, SET);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2102      	movs	r1, #2
 8000ec4:	4810      	ldr	r0, [pc, #64]	; (8000f08 <SPI_Comm+0x22c>)
 8000ec6:	f7ff fc1b 	bl	8000700 <GPIO_OPinWrite>
			delay();
 8000eca:	f7ff fe3d 	bl	8000b48 <delay>
			delay();
 8000ece:	f7ff fe3b 	bl	8000b48 <delay>

		}

		while(FlagStatus(SPI2, SPI_SR_BSYM));
 8000ed2:	bf00      	nop
 8000ed4:	2180      	movs	r1, #128	; 0x80
 8000ed6:	480b      	ldr	r0, [pc, #44]	; (8000f04 <SPI_Comm+0x228>)
 8000ed8:	f7ff fe21 	bl	8000b1e <FlagStatus>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d1f8      	bne.n	8000ed4 <SPI_Comm+0x1f8>
		SPI_EN(SPI2, DISABLE);
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4807      	ldr	r0, [pc, #28]	; (8000f04 <SPI_Comm+0x228>)
 8000ee6:	f7ff fde0 	bl	8000aaa <SPI_EN>
	for(i=0;i<5;i++)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	3301      	adds	r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	f77f aefe 	ble.w	8000cf4 <SPI_Comm+0x18>
	}
}
 8000ef8:	e000      	b.n	8000efc <SPI_Comm+0x220>
				break;
 8000efa:	bf00      	nop
}
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40003800 	.word	0x40003800
 8000f08:	40020c00 	.word	0x40020c00

08000f0c <main>:

int main(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	//Configure SPI and GPIO
	GPIO_Config();
 8000f10:	f7ff fe30 	bl	8000b74 <GPIO_Config>
	SPI_Config();
 8000f14:	f7ff fe86 	bl	8000c24 <SPI_Config>

	SPI_Comm();
 8000f18:	f7ff fee0 	bl	8000cdc <SPI_Comm>

	return 0;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f24:	480d      	ldr	r0, [pc, #52]	; (8000f5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f26:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f28:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f2c:	480c      	ldr	r0, [pc, #48]	; (8000f60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f2e:	490d      	ldr	r1, [pc, #52]	; (8000f64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f30:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <LoopForever+0xe>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f34:	e002      	b.n	8000f3c <LoopCopyDataInit>

08000f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3a:	3304      	adds	r3, #4

08000f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f40:	d3f9      	bcc.n	8000f36 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f42:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f44:	4c0a      	ldr	r4, [pc, #40]	; (8000f70 <LoopForever+0x16>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f48:	e001      	b.n	8000f4e <LoopFillZerobss>

08000f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f4c:	3204      	adds	r2, #4

08000f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f50:	d3fb      	bcc.n	8000f4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f52:	f000 f811 	bl	8000f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f56:	f7ff ffd9 	bl	8000f0c <main>

08000f5a <LoopForever>:

LoopForever:
    b LoopForever
 8000f5a:	e7fe      	b.n	8000f5a <LoopForever>
  ldr   r0, =_estack
 8000f5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f64:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000f68:	08000fe0 	.word	0x08000fe0
  ldr r2, =_sbss
 8000f6c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000f70:	2000001c 	.word	0x2000001c

08000f74 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC_IRQHandler>
	...

08000f78 <__libc_init_array>:
 8000f78:	b570      	push	{r4, r5, r6, lr}
 8000f7a:	4d0d      	ldr	r5, [pc, #52]	; (8000fb0 <__libc_init_array+0x38>)
 8000f7c:	4c0d      	ldr	r4, [pc, #52]	; (8000fb4 <__libc_init_array+0x3c>)
 8000f7e:	1b64      	subs	r4, r4, r5
 8000f80:	10a4      	asrs	r4, r4, #2
 8000f82:	2600      	movs	r6, #0
 8000f84:	42a6      	cmp	r6, r4
 8000f86:	d109      	bne.n	8000f9c <__libc_init_array+0x24>
 8000f88:	4d0b      	ldr	r5, [pc, #44]	; (8000fb8 <__libc_init_array+0x40>)
 8000f8a:	4c0c      	ldr	r4, [pc, #48]	; (8000fbc <__libc_init_array+0x44>)
 8000f8c:	f000 f818 	bl	8000fc0 <_init>
 8000f90:	1b64      	subs	r4, r4, r5
 8000f92:	10a4      	asrs	r4, r4, #2
 8000f94:	2600      	movs	r6, #0
 8000f96:	42a6      	cmp	r6, r4
 8000f98:	d105      	bne.n	8000fa6 <__libc_init_array+0x2e>
 8000f9a:	bd70      	pop	{r4, r5, r6, pc}
 8000f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fa0:	4798      	blx	r3
 8000fa2:	3601      	adds	r6, #1
 8000fa4:	e7ee      	b.n	8000f84 <__libc_init_array+0xc>
 8000fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000faa:	4798      	blx	r3
 8000fac:	3601      	adds	r6, #1
 8000fae:	e7f2      	b.n	8000f96 <__libc_init_array+0x1e>
 8000fb0:	08000fd8 	.word	0x08000fd8
 8000fb4:	08000fd8 	.word	0x08000fd8
 8000fb8:	08000fd8 	.word	0x08000fd8
 8000fbc:	08000fdc 	.word	0x08000fdc

08000fc0 <_init>:
 8000fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fc2:	bf00      	nop
 8000fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fc6:	bc08      	pop	{r3}
 8000fc8:	469e      	mov	lr, r3
 8000fca:	4770      	bx	lr

08000fcc <_fini>:
 8000fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fce:	bf00      	nop
 8000fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fd2:	bc08      	pop	{r3}
 8000fd4:	469e      	mov	lr, r3
 8000fd6:	4770      	bx	lr
